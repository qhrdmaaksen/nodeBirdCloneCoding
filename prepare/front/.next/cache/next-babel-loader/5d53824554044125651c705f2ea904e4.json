{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\component\\\\PostForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Form, Input, Button } from 'antd';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\nimport useInput from \"../hooks/useInput\";\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      // 게시글이 없다면 게시글 작성 alert\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('images info :: ', e.target.files); // 이미지에 대한 정보가 담겨있음\n\n    var imageFormData = new FormData(); // form data 를 multipart 형식으로 서버로 보냄\n\n    [].forEach.call(e.target.files, function (f) {\n      // 배열에 forEach 를 빌려 쓰는 것\n      imageFormData.append('image', f); // image 키랑 f 값\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  }, []);\n  return (// post Form\n    __jsx(Form, {\n      style: {\n        margin: '10px 0 20px'\n      },\n      encType: \"multipart/form-data\",\n      onFinish: onSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 4\n      }\n    }, __jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }, __jsx(\"input\", {\n      type: \"file\",\n      name: \"image\",\n      multiple: true,\n      hidden: true,\n      ref: imageInput,\n      onChange: onChangeImages,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }\n    }), __jsx(Button, {\n      onClick: onClickImageUpload,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }\n    }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n      type: \"primary\",\n      style: {\n        \"float\": 'right'\n      },\n      htmlType: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 6\n      }\n    }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }, imagePaths.map(function (v, i) {\n      return (// 이미지 등록을 했을 시, 이미지 경로가 저장되며, 반복문으로 표시해줌\n        __jsx(\"div\", {\n          key: v,\n          style: {\n            display: 'inline-block'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 9\n          }\n        }, __jsx(\"img\", {\n          src: \"http://localhost:3065/\".concat(v),\n          style: {\n            width: '200px'\n          },\n          alt: v,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 10\n          }\n        }), __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 10\n          }\n        }, __jsx(Button, {\n          onClick: onRemoveImage(i),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }\n        }, \"\\uC81C\\uAC70\")))\n      );\n    })))\n  );\n};\n\n_s(PostForm, \"3FK2zRZPNgg8Zyo/ctJDr8anxN0=\", false, function () {\n  return [useSelector, useDispatch, useInput];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/component/PostForm.js"],"names":["Form","Input","Button","React","useCallback","useEffect","useRef","useState","useSelector","useDispatch","addPost","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","ADD_POST_REQUEST","useInput","PostForm","state","post","imagePaths","addPostDone","dispatch","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import {Form, Input, Button} from 'antd'\r\nimport React, {useCallback, useEffect, useRef, useState} from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST} from '../reducers/post'\r\nimport useInput from \"../hooks/useInput\";\r\n\r\nconst PostForm = () => {\r\n\tconst {imagePaths, addPostDone} = useSelector((state) => state.post)\r\n\tconst dispatch = useDispatch()\r\n\tconst [text, onChangeText, setText] = useInput('')\r\n\r\n\tuseEffect(() => {\r\n\t\tif (addPostDone) {\r\n\t\t\tsetText('')\r\n\t\t}\r\n\t}, [addPostDone])\r\n\r\n\tconst onSubmit = useCallback(() => {\r\n\t\tif (!text || !text.trim()) { // 게시글이 없다면 게시글 작성 alert\r\n\t\t\treturn alert('게시글을 작성하세요.')\r\n\t\t}\r\n\t\tconst formData = new FormData();\r\n\t\timagePaths.forEach((p)=>{\r\n\t\t\tformData.append('image', p)\r\n\t\t})\r\n\t\tformData.append('content', text)\r\n\t\tdispatch({\r\n\t\t\ttype: ADD_POST_REQUEST,\r\n\t\t\tdata: formData,\r\n\t\t})\r\n\t}, [text, imagePaths])\r\n\r\n\tconst imageInput = useRef()\r\n\tconst onClickImageUpload = useCallback(() => {\r\n\t\timageInput.current.click();\r\n\t}, [imageInput.current])\r\n\r\n\tconst onChangeImages = useCallback(\r\n\t\t\t(e) => {\r\n\t\t\t\tconsole.log('images info :: ', e.target.files) // 이미지에 대한 정보가 담겨있음\r\n\t\t\t\tconst imageFormData = new FormData(); // form data 를 multipart 형식으로 서버로 보냄\r\n\t\t\t\t[].forEach.call(e.target.files, (f) => { // 배열에 forEach 를 빌려 쓰는 것\r\n\t\t\t\t\timageFormData.append('image', f) // image 키랑 f 값\r\n\t\t\t\t})\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPLOAD_IMAGES_REQUEST,\r\n\t\t\t\t\tdata: imageFormData,\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t[],\r\n\t);\r\n\r\n\tconst onRemoveImage = useCallback((index)=>()=>{\r\n\t\tdispatch({\r\n\t\t\ttype: REMOVE_IMAGE,\r\n\t\t\tdata: index,\r\n\t\t})\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t\t// post Form\r\n\t\t\t<Form style={{margin: '10px 0 20px'}} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n\t\t\t\t<Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\"/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type=\"file\" name=\"image\" multiple hidden ref={imageInput}\r\n\t\t\t\t\t\t\t\t onChange={onChangeImages}/>\r\n\t\t\t\t\t<Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n\t\t\t\t\t<Button type=\"primary\" style={{float: 'right'}} htmlType=\"submit\">\r\n\t\t\t\t\t\t짹짹\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{imagePaths.map((v, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t// 이미지 등록을 했을 시, 이미지 경로가 저장되며, 반복문으로 표시해줌\r\n\t\t\t\t\t\t\t\t<div key={v} style={{display: 'inline-block'}}>\r\n\t\t\t\t\t\t\t\t\t<img src={`http://localhost:3065/${v}`} style={{width: '200px'}} alt={v}/>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={onRemoveImage(i)}>제거</Button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</Form>\r\n\t)\r\n}\r\n\r\nexport default PostForm\r\n"]},"metadata":{},"sourceType":"module"}