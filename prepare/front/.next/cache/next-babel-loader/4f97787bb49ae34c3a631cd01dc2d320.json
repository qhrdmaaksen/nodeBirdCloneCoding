{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { CHANGE_NICKNAME_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  // generator 아님\n  //return axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄 // front\n  // 실제 서버에 로그인 요청을 보냄 // back\n  //return axios.post('http://localhost:3065/user/login', data)\n  // localhost 중복 없애기\n  return axios.post('/user/login', data);\n} // 테스트 코드\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\n// \t\tl.next();\n// \t\tl.next();\n/////////////////\n\n\nfunction* logIn(action) {\n  // login action request 가 action 에 전달\n  try {\n    // 요청 실패 대비\n    //yield delay(1000) // front\n    const result = yield call(logInAPI, action.data); // 서버에서 받은 결과 값을 받음\n\n    console.log('saga logIn 실행중::', action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      //data: action.data, // front\n      data: result.data // (성공 결과 담김) back\n\n    });\n    console.log('saga logIn 완료 ::', result);\n  } catch (err) {\n    console.error('logIn', err);\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: LOG_IN_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  // return axios.post('/api/logout') front\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    // 요청 실패 대비\n    //yield delay(1000) front\n    yield call(logOutAPI); // 서버에서 받은 결과 값을 받음 back\n\n    console.log('sagas:: logout 실행');\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n    console.log('sagas:: logout 완료');\n  } catch (err) {\n    console.error('front logOut : ', err);\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: LOG_OUT_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction changeNicknameAPI(data) {\n  // generator 아님\n  // 실제 서버에 로그인 요청을 보냄 // back\n  //return axios.post('http://localhost:3065/user/login', data)\n  // localhost 중복 없애기\n  return axios.patch('/user/nickname', {\n    nickname: data\n  });\n}\n\nfunction* changeNickname(action) {\n  // login action request 가 action 에 전달\n  try {\n    // 요청 실패 대비\n    //yield delay(1000) // front\n    const result = yield call(changeNicknameAPI, action.data); // 서버에서 받은 결과 값을 받음\n\n    console.log('saga changeNickname 실행중::', action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      //data: action.data, // front\n      data: result.data // (성공 결과 담김) back\n\n    });\n    console.log('saga changeNickname 완료 ::', result);\n  } catch (err) {\n    console.error('changeNickname', err);\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction loadMyInfoAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줘요\n\n  }); // 서버사이드렌더링일 때는, 브라우저가 없어요.\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n    console.log('saga loadMyInfo 실행 :: ', action.data);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n    console.log('saga loadMyInfo 성공:: ', result);\n  } catch (err) {\n    console.error('saga loadMyInfo error :: ', err);\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  // data 에 사용자 id 넣어주기\n  // return axios.post('/api/follow', data) front\n  return axios.patch(`/user/${data}/follow`);\n}\n\nfunction* follow(action) {\n  try {\n    //yield delay(1000) front\n    const result = yield call(followAPI, action.data);\n    console.log('saga follow 실행 : ', result);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      //data: action.data front\n      data: result.data\n    });\n    console.log('saga follow 완료 :: ', result);\n  } catch (err) {\n    console.error('saga follow error :: ', err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  // data 에 사용자 id 넣어주기\n  //return axios.post('/api/unfollow', data) front\n  return axios.delete(`/user/${data}/follow`);\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data); //yield delay(1000) front\n\n    console.log('saga unfollow 요청 :: ', action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      //data: action.data front\n      data: result.data\n    });\n    console.log('saga unfollow 성공:: ', result);\n  } catch (err) {\n    console.error('saga unfollow error:: ', err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  // back end server addr\n  // data 는 email, nickname, password object\n  //return axios.post('/api/signup', data) // front\n  return axios.post('/user', data); // back\n}\n\nfunction* signUp(action) {\n  try {\n    //yield delay(1000)\n    const result = yield call(signUpAPI, action.data);\n    console.log('saga sign up result 실행중 :: ', action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS //data: result.data\n\n    });\n    console.log('saga sign up 완료 :: ', result);\n  } catch (err) {\n    console.error('saga signUp error : ', err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadFollowersAPI(data) {\n  return axios.get('/user/followers', data);\n}\n\nfunction* loadFollowers(action) {\n  try {\n    const result = yield call(loadFollowersAPI, action.data);\n    console.log('saga followers:: 요청', action.data);\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n    console.log('saga followers:: 성공', result);\n  } catch (err) {\n    console.error('saga followers::', err);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadFollowingsAPI(data) {\n  return axios.get('/user/followings', data);\n}\n\nfunction* loadFollowings(action) {\n  try {\n    const result = yield call(loadFollowingsAPI, action.data);\n    console.log('saga followings 요청::', action.data);\n    yield put({\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n    console.log('saga followings 성공::', result);\n  } catch (err) {\n    console.error('saga followings 실패::', err);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removeFollowerAPI(data) {\n  return axios.delete(`/user/follower/${data}`); // 몇번째의 팔로워를 제거한다\n}\n\nfunction* removeFollower(action) {\n  try {\n    const result = yield call(removeFollowerAPI, action.data);\n    console.log('saga removeFollower 요청:: ', action.data);\n    yield put({\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n    console.log('saga removeFollower 성공:: ', result);\n  } catch (err) {\n    console.error('saga removeFollower 실패:: ', err);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserAPI(data) {\n  return axios.get(`/user/${data}`);\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    console.log('saga loadUser 실행 :: ', action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n    console.log('saga loadUser 성공 :: ', result);\n  } catch (err) {\n    console.error('saga loadUser Failure 실패 :: ', err);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction* watchRemoveFollower() {\n  yield takeLatest(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction* watchLoadFollowers() {\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction* watchLoadFollowings() {\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  // 로그인 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchLogOut() {\n  // 로그아웃 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(LOG_OUT_REQUEST, logOut); //LOG_OUT_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchSignUp() {\n  // 회원가입 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(SIGN_UP_REQUEST, signUp); // SIGN_UP_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchRemoveFollower), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchChangeNickname), fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnFollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":null,"metadata":{},"sourceType":"module"}