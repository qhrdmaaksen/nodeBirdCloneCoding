{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport shortId from 'shortid';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '비타민'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '개정판이 나왔네요!?'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '정말정말 신기하당!'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 경로들이 저장됨\n  addPostLoading: false,\n  addPostDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addCommentError: null\n}; //게시글 작성하는 액션\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\n\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\n\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n}; // dynamic action create\n\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'vitamin'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        // 불변성 지켜주며 앞에다가 추가해야 게시글 위에올라감\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      //action.data.content, postId, userId\n      var postIndex = state.mainPosts.findIndex(function (v) {\n        return v.id === action.data.postId;\n      });\n      post.Comments = post.Comments.slice();\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        // 불변성 지켜주며 앞에다가 추가해야 게시글 위에올라감\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","generate","reducer","state","action","error","postIndex","findIndex","v","postId","post","slice"],"mappings":"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","sourcesContent":["import shortId from 'shortid'\r\n\r\n\r\nexport const initialState = {\r\n\tmainPosts: [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\tUser: {\r\n\t\t\t\tid: 1,\r\n\t\t\t\tnickname: '비타민',\r\n\t\t\t},\r\n\t\t\tcontent: '첫 번째 게시글 #해시태그 #익스프레스',\r\n\t\t\tImages: [{\r\n\t\t\t\tsrc: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n\t\t\t}, {\r\n\t\t\t\tsrc: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n\t\t\t}, {\r\n\t\t\t\tsrc: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n\t\t\t}],\r\n\t\t\tComments: [\r\n\t\t\t\t{\r\n\t\t\t\t\tUser: {\r\n\t\t\t\t\t\tnickname: 'nero',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcontent: '개정판이 나왔네요!?',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tUser: {\r\n\t\t\t\t\t\tnickname: 'hero',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcontent: '정말정말 신기하당!',\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t],\r\n\timagePaths: [], // 이미지 경로들이 저장됨\r\n\taddPostLoading: false,\r\n\taddPostDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddPostError: null,\r\n\taddCommentLoading: false,\r\n\taddCommentDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddCommentError: null,\r\n}\r\n\r\n//게시글 작성하는 액션\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data)=>({\r\n\ttype: ADD_POST_REQUEST,\r\n\tdata,\r\n})\r\n\r\n// dynamic action create\r\nexport const addComment = (data) => ({\r\n\ttype: ADD_COMMENT_REQUEST,\r\n\tdata,\r\n})\r\n\r\nconst dummyPost = (data)=>({\r\n\tid: shortId.generate(),\r\n\tcontent: data,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: 'vitamin',\r\n\t},\r\n\tImages: [],\r\n\tComments: [],\r\n})\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ADD_POST_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\taddPostLoading: true,\r\n\t\t\t\taddPostDone: false,\r\n\t\t\t\taddPostError: null,\r\n\t\t\t}\r\n\t\tcase ADD_POST_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmainPosts: [dummyPost(action.data), ...state.mainPosts], // 불변성 지켜주며 앞에다가 추가해야 게시글 위에올라감\r\n\t\t\t\taddPostLoading: false,\r\n\t\t\t\taddPostDone: true,\r\n\t\t\t}\r\n\t\tcase ADD_POST_FAILURE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\taddPostLoading: false,\r\n\t\t\t\taddPostError: action.error,\r\n\t\t\t}\r\n\t\tcase ADD_COMMENT_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\taddCommentLoading: true,\r\n\t\t\t\taddCommentDone: false,\r\n\t\t\t\taddCommentError: null,\r\n\t\t\t}\r\n\t\tcase ADD_COMMENT_SUCCESS:\r\n\t\t\t\t//action.data.content, postId, userId\r\n\t\t\t\tconst postIndex = state.mainPosts.findIndex((v)=> v.id === action.data.postId)\r\n\t\t\t\t\r\n\t\t\t\tpost.Comments = post.Comments.slice()\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmainPosts: [dummyPost, ...state.mainPosts], // 불변성 지켜주며 앞에다가 추가해야 게시글 위에올라감\r\n\t\t\t\taddCommentLoading: false,\r\n\t\t\t\taddCommentDone: true,\r\n\t\t\t}\r\n\t\tcase ADD_COMMENT_FAILURE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\taddCommentLoading: false,\r\n\t\t\t\taddCommentError: action.error,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t}\r\n\t}\r\n}\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}