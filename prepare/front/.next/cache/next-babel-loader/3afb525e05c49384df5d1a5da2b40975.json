{"ast":null,"code":"var _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; // Next 에서는 이 구문이 필요가 없다.\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../component/AppLayout';\nimport PostForm from '../component/PostForm';\nimport PostCard from \"../component/PostCard\";\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from \"../store/configureStore\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    // retweet 실패 시 alert 출력\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  /* CSR\r\n  useEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n  \tdispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n  \t\ttype: LOAD_MY_INFO_REQUEST,\r\n  \t});\r\n  \tdispatch({\r\n  \t\ttype: LOAD_POSTS_REQUEST,\r\n  \t});\r\n  }, []);*/\n  // 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\n\n  /*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n  \t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\n\n  useEffect(() => {\n    function onScroll() {\n      // (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 마지막 게시글의 id\n\n          dispatch({\n            // 다 내리면 그때 새로운 것 로딩\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }\n  }), \" \", mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  })));\n}; //  Home 보다 먼저 실행이 된다 ( server 쪽에서 실행) (SSR)\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(context => {\n  useEffect(() => {\n    // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\n    context.store.dispatch({\n      // 매번 로그인 상태를 복구해주기 위해서 만듬\n      type: LOAD_MY_INFO_REQUEST\n    });\n    context.store.dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  console.log('context :: ', context);\n});\nexport default Home;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","post","alert","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","context","store"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react' // Next 에서는 이 구문이 필요가 없다.\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport AppLayout from '../component/AppLayout'\r\nimport PostForm from '../component/PostForm'\r\nimport PostCard from \"../component/PostCard\";\r\nimport {LOAD_POSTS_REQUEST} from '../reducers/post'\r\nimport {LOAD_MY_INFO_REQUEST} from '../reducers/user'\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst Home = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst {me} = useSelector((state) => state.user)\r\n\tconst {mainPosts, hasMorePosts, loadPostsLoading, retweetError} = useSelector((state) => state.post)\r\n\r\n\r\n\tuseEffect(() => { // retweet 실패 시 alert 출력\r\n\t\tif (retweetError) {\r\n\t\t\talert(retweetError)\r\n\t\t}\r\n\t}, [retweetError])\r\n\r\n\t/* CSR\r\n\tuseEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n\t\tdispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n\t\t\ttype: LOAD_MY_INFO_REQUEST,\r\n\t\t});\r\n\t\tdispatch({\r\n\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t});\r\n\t}, []);*/\r\n\r\n\t// 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\r\n\t/*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n\t\t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\r\n\tuseEffect(() => {\r\n\t\tfunction onScroll() {\r\n\t\t\t// (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\r\n\t\t\tconsole.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n\t\t\tif (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n\t\t\t\tif (hasMorePosts && !loadPostsLoading) { // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\r\n\t\t\t\t\tconst lastId = mainPosts[mainPosts.length - 1]?.id; // 마지막 게시글의 id\r\n\t\t\t\t\tdispatch({ // 다 내리면 그때 새로운 것 로딩\r\n\t\t\t\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t\t\t\t\tlastId,\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('scroll', onScroll)\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('scroll', onScroll)\r\n\t\t};\r\n\t}, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n\treturn (\r\n\t\t\t<AppLayout>\r\n\t\t\t\t{/*AppLayout 을 사용한다, 만약 다른 레이아웃을 사용하고싶다면 따로 component 에 만들어서 이와같이 감싸면된다.*/}\r\n\t\t\t\t{/*뭔가 묶일 수 있는 단위가있을 것 같으면 먼저 컴포넌트 이름을 정해주자*/}\r\n\t\t\t\t{me && <PostForm/>} {/*모두 참 인경우 마지막 피 연산자를 반환*/}\r\n\t\t\t\t{mainPosts.map((post) => (\r\n\t\t\t\t\t\t<PostCard key={post.id} post={post}/>\r\n\t\t\t\t))}\r\n\t\t\t\t{/*이와같이 AppLayout 으로 감싼 이부분은 AppLayout 의 children 이된다.*/}\r\n\t\t\t</AppLayout>\r\n\t)\r\n}\r\n\r\n//  Home 보다 먼저 실행이 된다 ( server 쪽에서 실행) (SSR)\r\nexport const getServerSideProps = wrapper.getServerSideProps((context) => {\r\n\tuseEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n\t\tcontext.store.dispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n\t\t\ttype: LOAD_MY_INFO_REQUEST,\r\n\t\t});\r\n\t\tcontext.store.dispatch({\r\n\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t});\r\n\t}, []);\r\n\tconsole.log('context :: ', context)\r\n})\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}