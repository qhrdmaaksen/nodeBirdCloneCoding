{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  // gererator 아님\n  //return axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄 // front\n  // 실제 서버에 로그인 요청을 보냄 // back\n  //return axios.post('http://localhost:3065/user/login', data)\n  // localhost 중복 없애기\n  return axios.post('/login', data);\n} // 테스트 코드\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\n// \t\tl.next();\n// \t\tl.next();\n/////////////////\n\n\nfunction* logIn(action) {\n  // login action request 가 action 에 전달\n  try {\n    // 요청 실패 대비\n    console.log('saga logIn'); //yield delay(1000) // front\n\n    const result = yield call(logInAPI, action.data); // 서버에서 받은 결과 값을 받음\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      //data: action.data, // front\n      data: result.data // (성공 결과 담김) back\n\n    });\n  } catch (err) {\n    console.error('logIn' + err);\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: LOG_IN_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  // return axios.post('/api/logout') front\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    // 요청 실패 대비\n    //yield delay(1000) front\n    yield call(logOutAPI); // 서버에서 받은 결과 값을 받음 back\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error('front logOut : ' + err);\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: LOG_OUT_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/follow', data);\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error('follow error : ' + err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error('unfollow error : ' + err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  // back end server addr\n  // data 는 email, nickname, password object\n  //return axios.post('/api/signup', data) // front\n  return axios.post('/user', data); // back\n}\n\nfunction* signUp(action) {\n  try {\n    //yield delay(1000)\n    const result = yield call(signUpAPI, action.data);\n    console.log('sign up result : ' + result);\n    yield put({\n      type: SIGN_UP_SUCCESS //data: result.data\n\n    });\n  } catch (err) {\n    console.error('signUp error : ' + err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  // 로그인 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchLogOut() {\n  // 로그아웃 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(LOG_OUT_REQUEST, logOut); //LOG_OUT_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchSignUp() {\n  // 회원가입 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(SIGN_UP_REQUEST, signUp); // SIGN_UP_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnFollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/user.js"],"names":["all","call","delay","fork","put","takeLatest","axios","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","data","post","logIn","action","console","log","result","type","err","error","response","logOutAPI","logOut","followAPI","follow","unfollowAPI","unfollow","signUpAPI","signUp","watchFollow","watchUnFollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import {all, call, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tFOLLOW_FAILURE,\r\n\tFOLLOW_REQUEST, FOLLOW_SUCCESS,\r\n\tLOG_IN_FAILURE,\r\n\tLOG_IN_REQUEST,\r\n\tLOG_IN_SUCCESS,\r\n\tLOG_OUT_FAILURE,\r\n\tLOG_OUT_REQUEST,\r\n\tLOG_OUT_SUCCESS,\r\n\tSIGN_UP_FAILURE,\r\n\tSIGN_UP_REQUEST,\r\n\tSIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS,\r\n} from \"../reducers/user\";\r\n\r\n\r\nfunction logInAPI(data) { // gererator 아님\r\n\t//return axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄 // front\r\n\r\n\t// 실제 서버에 로그인 요청을 보냄 // back\r\n\t//return axios.post('http://localhost:3065/user/login', data)\r\n\r\n\t// localhost 중복 없애기\r\n\treturn axios.post('/login', data)\r\n}\r\n\r\n// 테스트 코드\r\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\r\n// \t\tl.next();\r\n// \t\tl.next();\r\n/////////////////\r\nfunction* logIn(action) { // login action request 가 action 에 전달\r\n\ttry { // 요청 실패 대비\r\n\t\tconsole.log('saga logIn')\r\n\t\t//yield delay(1000) // front\r\n\t\tconst result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS,\r\n\t\t\t//data: action.data, // front\r\n\t\t\tdata: result.data // (성공 결과 담김) back\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('logIn' + err)\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: LOG_IN_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction logOutAPI() {\r\n\t// return axios.post('/api/logout') front\r\n\treturn axios.post('/user/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n\ttry { // 요청 실패 대비\r\n\t\t//yield delay(1000) front\r\n\t\tyield call(logOutAPI) // 서버에서 받은 결과 값을 받음 back\r\n\t\tyield put({\r\n\t\t\ttype: LOG_OUT_SUCCESS,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('front logOut : ' + err)\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: LOG_OUT_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction followAPI(data) {\r\n\treturn axios.post('/api/follow', data)\r\n}\r\n\r\nfunction* follow(action) {\r\n\ttry {\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: FOLLOW_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('follow error : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: FOLLOW_FAILURE,\r\n\t\t\tdata: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n\treturn axios.post('/api/unfollow', data)\r\n}\r\n\r\nfunction* unfollow(action) {\r\n\ttry {\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: UNFOLLOW_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('unfollow error : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: UNFOLLOW_FAILURE,\r\n\t\t\tdata: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n\t// back end server addr\r\n\t// data 는 email, nickname, password object\r\n\t//return axios.post('/api/signup', data) // front\r\n\treturn axios.post('/user', data) // back\r\n}\r\n\r\nfunction* signUp(action) {\r\n\ttry {\r\n\t\t//yield delay(1000)\r\n\t\tconst result = yield call(signUpAPI, action.data)\r\n\t\tconsole.log('sign up result : ' + result)\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_SUCCESS,\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('signUp error : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchFollow() {\r\n\tyield takeLatest(FOLLOW_REQUEST, follow)\r\n}\r\n\r\nfunction* watchUnFollow() {\r\n\tyield takeLatest(UNFOLLOW_REQUEST, unfollow)\r\n}\r\n\r\nfunction* watchLogIn() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(LOG_IN_REQUEST, logIn) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchLogOut() {\t// 로그아웃 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(LOG_OUT_REQUEST, logOut) //LOG_OUT_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchSignUp() {\t// 회원가입 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(SIGN_UP_REQUEST, signUp) // SIGN_UP_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchFollow),\r\n\t\tfork(watchUnFollow),\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchLogOut),\r\n\t\tfork(watchSignUp),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}