{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport reducer from '../reducers';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst configureStore = () => {\n  const middlewares = [];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware([]));\n  const store = createStore(reducer, enhancer);\n  store.dispatch({\n    // 디스패치하는 순간 타입과 데이터가 리듀서로 보내진다.\n    type: 'CHANGE_NICKNAME',\n    data: 'vitamin777'\n  });\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, // 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\n{\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","reducer","composeWithDevTools","configureStore","middlewares","enhancer","store","dispatch","type","data","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAAQC,eAAR,EAAyBC,OAAzB,EAAkCC,WAAlC,QAAoD,OAApD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,mBAAT,QAAmC,0BAAnC;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC5B,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,QAAQ,GAAG,QAAwCN,OAAO,CAACD,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAA/C,GAAmFF,mBAAmB,CAACJ,eAAe,CAAC,EAAD,CAAhB,CAAvH;AACA,QAAMQ,KAAK,GAAGN,WAAW,CAACC,OAAD,EAAUI,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,CAAe;AAAE;AAChBC,IAAAA,IAAI,EAAE,iBADQ;AAEdC,IAAAA,IAAI,EAAE;AAFQ,GAAf;AAIA,SAAOH,KAAP;AACA,CATD;;AAWA,MAAMI,OAAO,GAAGb,aAAa,CAACM,cAAD,EAC3B;AACA;AAAEQ,EAAAA,KAAK;AAAP,CAF2B,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper'\r\nimport {applyMiddleware, compose, createStore} from \"redux\";\r\nimport reducer from '../reducers'\r\nimport { composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nconst configureStore = () => {\r\n\tconst middlewares = []\r\n\tconst enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware([]))\r\n\tconst store = createStore(reducer, enhancer)\r\n\tstore.dispatch({ // 디스패치하는 순간 타입과 데이터가 리듀서로 보내진다.\r\n\t\ttype: 'CHANGE_NICKNAME',\r\n\t\tdata: 'vitamin777',\r\n\t})\r\n\treturn store;\r\n}\r\n\r\nconst wrapper = createWrapper(configureStore,\r\n\t\t// 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\r\n\t\t{ debug: process.env.NODE_ENV === 'development'})\r\n\r\nexport default wrapper"]},"metadata":{},"sourceType":"module"}