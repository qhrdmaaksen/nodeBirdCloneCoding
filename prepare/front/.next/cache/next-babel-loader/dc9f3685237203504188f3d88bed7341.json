{"ast":null,"code":"var _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\component\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined, HeartTwoTone } from \"@ant-design/icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); //state.user.me && state.user.me.id\n  //\tconst [liked, setLiked] = useState(false) front\n  // useEffect(() => { // retweet 실패 시 alert 출력\n  // \tif (retweetError) {\n  // \t\talert(retweetError)\n  // \t}\n  // }, [retweetError])\n\n  const onLike = useCallback(() => {\n    // 좋아요 클릭\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id // 게시글 아이디\n\n    });\n  }, [id]);\n  const onUnLike = useCallback(() => {\n    // 좋아요 해제 클릭\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id // 게시글 아이디\n\n    });\n  }, [id]);\n  /* front\r\n  const onToggleLike = useCallback(() => {\r\n  \tsetLiked((prev) => !prev)\r\n  }, [])*/\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id); // 게시글 좋아요 누른 사람중에 내가 있는지\n\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 32\n      }\n    }) // 이미지가 한개 이상있을때 포스트 이미지스\n    ,\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 8\n      }\n    }), // 리트윗 버튼\n    liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 12\n      }\n    }) // 하트 버튼\n    : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 12\n      }\n    }), // 하트 버튼\n    __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 8\n      }\n    }), // 댓글 버튼\n    __jsx(Popover, {\n      key: \"more\",\n      content: // 더 보기 버튼\n      __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 10\n        }\n      }, id && post.User.id === id ?\n      /*내가 쓴 글이면 수정 삭제 가능*/\n      __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 14\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 14\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }\n      }, \"\\uC2E0\\uACE0\"), \" \"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 8\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 20\n      }\n    }) // 우측 추가공간,로그인했을경우만보이게\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, post.RetweetId && post.Retweet, \"? (\", __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 16\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }) // 특수한 기능을 처리하는 것을 만들기 위해선 따로 컴포넌트로 빼주는게 보기 깔끔하다\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 6\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 8\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 12\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 23\n        }\n      }, item.User.nickname[0]),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 8\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/component/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","List","Popover","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","HeartTwoTone","useDispatch","useSelector","PropTypes","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","PostCard","post","dispatch","removePostLoading","retweetError","state","commentFormOpened","setCommentFormOpened","id","user","me","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","liked","Likers","find","v","onRetweet","marginBottom","Images","User","RetweetId","Retweet","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react'\r\nimport {Avatar, Button, Card, Comment, List, Popover} from \"antd\";\r\nimport {EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined, HeartTwoTone} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport PropTypes from 'prop-types'\r\nimport PostImages from \"./PostImages\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport PostCardContent from \"./PostCardContent\";\r\nimport {LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST} from \"../reducers/post\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\n\r\nconst PostCard = ({post}) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst {removePostLoading, retweetError} = useSelector((state) => state.post)\r\n\tconst [commentFormOpened, setCommentFormOpened] = useState(false)\r\n\tconst id = useSelector((state) => state.user.me?.id) //state.user.me && state.user.me.id\r\n//\tconst [liked, setLiked] = useState(false) front\r\n\r\n\t// useEffect(() => { // retweet 실패 시 alert 출력\r\n\t// \tif (retweetError) {\r\n\t// \t\talert(retweetError)\r\n\t// \t}\r\n\t// }, [retweetError])\r\n\r\n\tconst onLike = useCallback(() => { // 좋아요 클릭\r\n\t\tif (!id) { // 로그인이 안되어있다면 바로바로 막아주는게 좋다\r\n\t\t\talert('로그인이 필요합니다!')\r\n\t\t}\r\n\t\treturn dispatch({\r\n\t\t\ttype: LIKE_POST_REQUEST,\r\n\t\t\tdata: post.id, // 게시글 아이디\r\n\t\t})\r\n\t}, [id])\r\n\tconst onUnLike = useCallback(() => { // 좋아요 해제 클릭\r\n\t\tif (!id) { // 로그인이 안되어있다면 바로바로 막아주는게 좋다\r\n\t\t\talert('로그인이 필요합니다!')\r\n\t\t}\r\n\t\treturn dispatch({\r\n\t\t\ttype: UNLIKE_POST_REQUEST,\r\n\t\t\tdata: post.id, // 게시글 아이디\r\n\t\t})\r\n\t}, [id])\r\n\r\n\t/* front\r\n\tconst onToggleLike = useCallback(() => {\r\n\t\tsetLiked((prev) => !prev)\r\n\t}, [])*/\r\n\r\n\tconst onToggleComment = useCallback(() => {\r\n\t\tsetCommentFormOpened((prev) => !prev)\r\n\t}, [])\r\n\r\n\tconst onRemovePost = useCallback(() => {\r\n\t\tif (!id) {\r\n\t\t\treturn alert('로그인이 필요합니다.')\r\n\t\t}\r\n\t\treturn dispatch({\r\n\t\t\ttype: REMOVE_POST_REQUEST,\r\n\t\t\tdata: post.id,\r\n\t\t})\r\n\t}, [id])\r\n\r\n\tconst liked = post.Likers.find((v) => v.id === id) // 게시글 좋아요 누른 사람중에 내가 있는지\r\n\r\n\tconst onRetweet = useCallback(\r\n\t\t\t() => {\r\n\t\t\t\tif (!id) { // 로그인이 안되어있다면 바로바로 막아주는게 좋다\r\n\t\t\t\t\talert('로그인이 필요합니다!')\r\n\t\t\t\t}\r\n\t\t\t\treturn dispatch({\r\n\t\t\t\t\ttype: RETWEET_REQUEST,\r\n\t\t\t\t\tdata: post.id,\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t[id],\r\n\t);\r\n\r\n\r\n\treturn (\r\n\t\t\t<div style={{marginBottom: 20}}>\r\n\t\t\t\t<Card\r\n\t\t\t\t\t\tcover={post.Images[0] && <PostImages images={post.Images}/>} // 이미지가 한개 이상있을때 포스트 이미지스\r\n\t\t\t\t\t\tactions={[\r\n\t\t\t\t\t\t\t<RetweetOutlined key=\"retweet\" onClick={onRetweet}/>, // 리트윗 버튼\r\n\t\t\t\t\t\t\tliked\r\n\t\t\t\t\t\t\t\t\t? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike}/> // 하트 버튼\r\n\t\t\t\t\t\t\t\t\t: <HeartOutlined key=\"heart\" onClick={onLike}/>, // 하트 버튼\r\n\t\t\t\t\t\t\t<MessageOutlined key=\"comment\" onClick={onToggleComment}/>, // 댓글 버튼\r\n\t\t\t\t\t\t\t<Popover key=\"more\" content={( // 더 보기 버튼\r\n\t\t\t\t\t\t\t\t\t<Button.Group>\r\n\t\t\t\t\t\t\t\t\t\t{id && post.User.id === id ? ( /*내가 쓴 글이면 수정 삭제 가능*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button>수정</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t) : <Button>신고</Button>} {/* 남이 쓴 글이면 삭제 가능*/}\r\n\t\t\t\t\t\t\t\t\t</Button.Group>\r\n\t\t\t\t\t\t\t)}>\r\n\t\t\t\t\t\t\t\t<EllipsisOutlined/>\r\n\t\t\t\t\t\t\t</Popover>,\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t\textra={id && <FollowButton post={post}/>} // 우측 추가공간,로그인했을경우만보이게\r\n\t\t\t\t>\r\n\t\t\t\t\t{post.RetweetId && post.Retweet}\r\n\t\t\t\t\t? (\r\n\t\t\t\t\t<Card.Meta\r\n\t\t\t\t\t\t\tavatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n\t\t\t\t\t\t\ttitle={post.User.nickname}\r\n\t\t\t\t\t\t\tdescription={<PostCardContent\r\n\t\t\t\t\t\t\t\t\tpostData={post.content}/>} // 특수한 기능을 처리하는 것을 만들기 위해선 따로 컴포넌트로 빼주는게 보기 깔끔하다\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Card>\r\n\t\t\t\t{commentFormOpened && (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<CommentForm post={post}/>\r\n\t\t\t\t\t\t\t<List\r\n\t\t\t\t\t\t\t\t\theader={`${post.Comments.length}개의 댓글`}\r\n\t\t\t\t\t\t\t\t\titemLayout=\"horizontal\"\r\n\t\t\t\t\t\t\t\t\tdataSource={post.Comments}\r\n\t\t\t\t\t\t\t\t\trenderItem={(item) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Comment\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor={item.User.nickname}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tavatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontent={item.content}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>)}\r\n\t\t\t\t{/*<CommentForm />\r\n\t\t\t\t<Comments />*/}\r\n\t\t\t</div>\r\n\t)\r\n}\r\nPostCard.propTypes = {\r\n\tpost: PropTypes.shape({\r\n\t\tid: PropTypes.number,\r\n\t\tUser: PropTypes.object,\r\n\t\tcontent: PropTypes.string,\r\n\t\tcreatedAt: PropTypes.string,\r\n\t\tComments: PropTypes.arrayOf(PropTypes.object),\r\n\t\tImages: PropTypes.arrayOf(PropTypes.object),\r\n\t\tLikers: PropTypes.arrayOf(PropTypes.object),\r\n\t\tRetweetId: PropTypes.number,\r\n\t\tRetweet: PropTypes.objectOf(PropTypes.any),\r\n\t}).isRequired,\r\n};\r\n\r\nexport default PostCard"]},"metadata":{},"sourceType":"module"}