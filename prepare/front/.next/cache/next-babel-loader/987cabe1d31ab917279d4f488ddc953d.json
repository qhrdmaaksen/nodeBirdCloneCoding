{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 경로들이 저장됨\n  hasMorePosts: true,\n  // 더 많은 게시물 가져오기\n  loadPostsLoading: false,\n  // 화면 로드중 로딩\n  loadPostsDone: false,\n  // 화면 로드 완료되었을때 true 변환\n  loadPostsError: null,\n  addPostLoading: false,\n  // 게시물 등록중 로딩\n  addPostDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addPostError: null,\n  removePostLoading: false,\n  // 게시물 삭제중 로딩\n  removePostDone: false,\n  // 게시물 삭제가 완료되었을때 true 변환\n  removePostError: null,\n  addCommentLoading: false,\n  // 댓글 등록중 로딩\n  addCommentDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addCommentError: null\n}; // 이부분을 사용해서 무한 스크롤링을 만들것\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})); //게시글 작성하는 액션\n\nexport const LOAD_POSTS_REQUEST = ' LOAD_POSTS_REQUEST'; // 화면을 로딩하면 바로 LOAD_POSTS_REQUEST 를 호출해줄것\n\nexport const LOAD_POSTS_SUCCESS = ' LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = ' LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\n\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n}); // dynamic action create\n\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '비타민'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '비타민'\n  }\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  // immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true; // action.data 에 dummy data 가 들어있을것이며, 기존데이터와 합쳐주는것\n      // concat 을 할땐 항상 앞에 대입을 해줘야한다 그래야 합쳐짐\n\n      draft.mainPosts = action.data.concat(draft.mainPosts); // 게시물을 50 개까지만 가져오겠다\n\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data); // 지울땐 보통 filter 가 편하다\n\n      draft.PostLoading = false;\n      draft.PostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        //action.data.content, postId, userId\n        const post = draft.mainPosts.find(v => v.id === action.data.postId); // 게시글 리스트중에 post 찾기\n\n        post.Comments.unshift(dummyComment(action.data.content)); // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌\n\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","PostLoading","PostDone","post","find","postId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC3BC,EAAAA,SAAS,EAAE,EADgB;AAE3BC,EAAAA,UAAU,EAAE,EAFe;AAEX;AAChBC,EAAAA,YAAY,EAAE,IAHa;AAGP;AACpBC,EAAAA,gBAAgB,EAAE,KAJS;AAIF;AACzBC,EAAAA,aAAa,EAAE,KALY;AAKL;AACtBC,EAAAA,cAAc,EAAE,IANW;AAO3BC,EAAAA,cAAc,EAAE,KAPW;AAOJ;AACvBC,EAAAA,WAAW,EAAE,KARc;AAQP;AACpBC,EAAAA,YAAY,EAAE,IATa;AAU3BC,EAAAA,iBAAiB,EAAE,KAVQ;AAUD;AAC1BC,EAAAA,cAAc,EAAE,KAXW;AAWJ;AACvBC,EAAAA,eAAe,EAAE,IAZU;AAa3BC,EAAAA,iBAAiB,EAAE,KAbQ;AAaD;AAC1BC,EAAAA,cAAc,EAAE,KAdW;AAcJ;AACvBC,EAAAA,eAAe,EAAE;AAfU,CAArB,C,CAiBP;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAYC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,GAAqBC,GAArB,CAAyB,OAAO;AAC5EC,EAAAA,EAAE,EAAExB,OAAO,CAACyB,QAAR,EADwE;AAE5EC,EAAAA,IAAI,EAAE;AACLF,IAAAA,EAAE,EAAExB,OAAO,CAACyB,QAAR,EADC;AAELE,IAAAA,QAAQ,EAAEzB,KAAK,CAAC0B,IAAN,CAAWC,QAAX;AAFL,GAFsE;AAM5EC,EAAAA,OAAO,EAAE5B,KAAK,CAAC6B,KAAN,CAAYC,SAAZ,EANmE;AAO5EC,EAAAA,MAAM,EAAE,CAAC;AACRC,IAAAA,GAAG,EAAEhC,KAAK,CAACiC,KAAN,CAAYA,KAAZ;AADG,GAAD,CAPoE;AAU5EC,EAAAA,QAAQ,EAAE,CAAC;AACVV,IAAAA,IAAI,EAAE;AACLF,MAAAA,EAAE,EAAExB,OAAO,CAACyB,QAAR,EADC;AAELE,MAAAA,QAAQ,EAAEzB,KAAK,CAAC0B,IAAN,CAAWC,QAAX;AAFL,KADI;AAKVC,IAAAA,OAAO,EAAE5B,KAAK,CAAC6B,KAAN,CAAYM,QAAZ;AALC,GAAD;AAVkE,CAAP,CAAzB,CAAtC,C,CAmBP;;AACA,OAAO,MAAOC,kBAAkB,GAAG,qBAA5B,C,CAAmD;;AAC1D,OAAO,MAAOC,kBAAkB,GAAG,qBAA5B;AACP,OAAO,MAAOC,kBAAkB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB,C,CAA6C;;AACpD,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AACjCC,EAAAA,IAAI,EAAEX,gBAD2B;AAEjCU,EAAAA;AAFiC,CAAX,CAAhB,C,CAKP;;AACA,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACpCC,EAAAA,IAAI,EAAEL,mBAD8B;AAEpCI,EAAAA;AAFoC,CAAX,CAAnB;;AAKP,MAAMG,SAAS,GAAIH,IAAD,KAAW;AAC5B3B,EAAAA,EAAE,EAAE2B,IAAI,CAAC3B,EADmB;AAE5BM,EAAAA,OAAO,EAAEqB,IAAI,CAACrB,OAFc;AAG5BJ,EAAAA,IAAI,EAAE;AACLF,IAAAA,EAAE,EAAE,CADC;AAELG,IAAAA,QAAQ,EAAE;AAFL,GAHsB;AAO5BM,EAAAA,MAAM,EAAE,EAPoB;AAQ5BG,EAAAA,QAAQ,EAAE;AARkB,CAAX,CAAlB;;AAWA,MAAMmB,YAAY,GAAIJ,IAAD,KAAW;AAC/B3B,EAAAA,EAAE,EAAExB,OAAO,CAACyB,QAAR,EAD2B;AAE/BK,EAAAA,OAAO,EAAEqB,IAFsB;AAG/BzB,EAAAA,IAAI,EAAE;AACLF,IAAAA,EAAE,EAAE,CADC;AAELG,IAAAA,QAAQ,EAAE;AAFL;AAHyB,CAAX,CAArB,C,CAQA;;;AACA,MAAM6B,OAAO,GAAG,CAACC,KAAK,GAAGtD,YAAT,EAAuBuD,MAAvB,KAAkCzD,OAAO,CAACwD,KAAD,EAASE,KAAD,IAAW;AAC3E;AACA,UAAQD,MAAM,CAACN,IAAf;AACC,SAAKd,kBAAL;AACCqB,MAAAA,KAAK,CAACpD,gBAAN,GAAyB,IAAzB;AACAoD,MAAAA,KAAK,CAACnD,aAAN,GAAsB,KAAtB;AACAmD,MAAAA,KAAK,CAAClD,cAAN,GAAuB,IAAvB;AACA;;AACD,SAAK8B,kBAAL;AACCoB,MAAAA,KAAK,CAACpD,gBAAN,GAAyB,KAAzB;AACAoD,MAAAA,KAAK,CAACnD,aAAN,GAAsB,IAAtB,CAFD,CAGC;AACA;;AACAmD,MAAAA,KAAK,CAACvD,SAAN,GAAkBsD,MAAM,CAACP,IAAP,CAAYS,MAAZ,CAAmBD,KAAK,CAACvD,SAAzB,CAAlB,CALD,CAMC;;AACAuD,MAAAA,KAAK,CAACrD,YAAN,GAAqBqD,KAAK,CAACvD,SAAN,CAAgByD,MAAhB,GAAyB,EAA9C;AACA;;AACD,SAAKrB,kBAAL;AACCmB,MAAAA,KAAK,CAACpD,gBAAN,GAAyB,KAAzB;AACAoD,MAAAA,KAAK,CAAClD,cAAN,GAAuBiD,MAAM,CAACI,KAA9B;AACA;;AACD,SAAKrB,gBAAL;AACCkB,MAAAA,KAAK,CAACjD,cAAN,GAAuB,IAAvB;AACAiD,MAAAA,KAAK,CAAChD,WAAN,GAAoB,KAApB;AACAgD,MAAAA,KAAK,CAAC/C,YAAN,GAAqB,IAArB;AACA;;AACD,SAAK8B,gBAAL;AACCiB,MAAAA,KAAK,CAACvD,SAAN,CAAgB2D,OAAhB,CAAwBT,SAAS,CAACI,MAAM,CAACP,IAAR,CAAjC;AACAQ,MAAAA,KAAK,CAACjD,cAAN,GAAuB,KAAvB;AACAiD,MAAAA,KAAK,CAAChD,WAAN,GAAoB,IAApB;AACA;;AACD,SAAKgC,gBAAL;AACCgB,MAAAA,KAAK,CAACjD,cAAN,GAAuB,KAAvB;AACAiD,MAAAA,KAAK,CAAC/C,YAAN,GAAqB8C,MAAM,CAACI,KAA5B;AACA;;AACD,SAAKlB,mBAAL;AACCe,MAAAA,KAAK,CAAC9C,iBAAN,GAA0B,IAA1B;AACA8C,MAAAA,KAAK,CAAC7C,cAAN,GAAuB,KAAvB;AACA6C,MAAAA,KAAK,CAAC5C,eAAN,GAAwB,IAAxB;AACA;;AACD,SAAK8B,mBAAL;AACCc,MAAAA,KAAK,CAACvD,SAAN,GAAkBuD,KAAK,CAACvD,SAAN,CAAgB4D,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACzC,EAAF,KAASkC,MAAM,CAACP,IAA9C,CAAlB,CADD,CACuE;;AACtEQ,MAAAA,KAAK,CAACO,WAAN,GAAoB,KAApB;AACAP,MAAAA,KAAK,CAACQ,QAAN,GAAiB,IAAjB;AACA;;AACD,SAAKrB,mBAAL;AACCa,MAAAA,KAAK,CAAC9C,iBAAN,GAA0B,KAA1B;AACA8C,MAAAA,KAAK,CAAC5C,eAAN,GAAwB2C,MAAM,CAACI,KAA/B;AACA;;AACD,SAAKf,mBAAL;AACCY,MAAAA,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B;AACA2C,MAAAA,KAAK,CAAC1C,cAAN,GAAuB,KAAvB;AACA0C,MAAAA,KAAK,CAACzC,eAAN,GAAwB,IAAxB;AACA;;AACD,SAAK8B,mBAAL;AAA0B;AACzB;AACA,cAAMoB,IAAI,GAAGT,KAAK,CAACvD,SAAN,CAAgBiE,IAAhB,CAAsBJ,CAAD,IAAOA,CAAC,CAACzC,EAAF,KAASkC,MAAM,CAACP,IAAP,CAAYmB,MAAjD,CAAb,CAFyB,CAE6C;;AACtEF,QAAAA,IAAI,CAAChC,QAAL,CAAc2B,OAAd,CAAsBR,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYrB,OAAb,CAAlC,EAHyB,CAGgC;;AACzD6B,QAAAA,KAAK,CAAC3C,iBAAN,GAA0B,KAA1B;AACA2C,QAAAA,KAAK,CAAC1C,cAAN,GAAuB,IAAvB;AACA;AACA;;AACD,SAAKgC,mBAAL;AACCU,MAAAA,KAAK,CAAC3C,iBAAN,GAA0B,KAA1B;AACA2C,MAAAA,KAAK,CAACzC,eAAN,GAAwBwC,MAAM,CAACI,KAA/B;AACA;;AACD;AACC;AAjEF;AAmEA,CArEwD,CAAzD;;AAsEA,eAAeN,OAAf","sourcesContent":["import shortId from 'shortid'\r\nimport produce from 'immer'\r\nimport faker from 'faker'\r\n\r\nexport const initialState = {\r\n\tmainPosts: [\t],\r\n\timagePaths: [], // 이미지 경로들이 저장됨\r\n\thasMorePosts: true, // 더 많은 게시물 가져오기\r\n\tloadPostsLoading: false, // 화면 로드중 로딩\r\n\tloadPostsDone: false, // 화면 로드 완료되었을때 true 변환\r\n\tloadPostsError: null,\r\n\taddPostLoading: false, // 게시물 등록중 로딩\r\n\taddPostDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddPostError: null,\r\n\tremovePostLoading: false, // 게시물 삭제중 로딩\r\n\tremovePostDone: false, // 게시물 삭제가 완료되었을때 true 변환\r\n\tremovePostError: null,\r\n\taddCommentLoading: false, // 댓글 등록중 로딩\r\n\taddCommentDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddCommentError: null,\r\n}\r\n// 이부분을 사용해서 무한 스크롤링을 만들것\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n\tid: shortId.generate(),\r\n\tUser: {\r\n\t\tid: shortId.generate(),\r\n\t\tnickname: faker.name.findName(),\r\n\t},\r\n\tcontent: faker.lorem.paragraph(),\r\n\tImages: [{\r\n\t\tsrc: faker.image.image(),\r\n\t}],\r\n\tComments: [{\r\n\t\tUser: {\r\n\t\t\tid: shortId.generate(),\r\n\t\t\tnickname: faker.name.findName(),\r\n\t\t},\r\n\t\tcontent: faker.lorem.sentence(),\r\n\t}],\r\n}))\r\n\r\n//게시글 작성하는 액션\r\nexport const  LOAD_POSTS_REQUEST = ' LOAD_POSTS_REQUEST'; // 화면을 로딩하면 바로 LOAD_POSTS_REQUEST 를 호출해줄것\r\nexport const  LOAD_POSTS_SUCCESS = ' LOAD_POSTS_SUCCESS';\r\nexport const  LOAD_POSTS_FAILURE = ' LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n\ttype: ADD_POST_REQUEST,\r\n\tdata,\r\n})\r\n\r\n// dynamic action create\r\nexport const addComment = (data) => ({\r\n\ttype: ADD_COMMENT_REQUEST,\r\n\tdata,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n\tid: data.id,\r\n\tcontent: data.content,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t},\r\n\tImages: [],\r\n\tComments: [],\r\n})\r\n\r\nconst dummyComment = (data) => ({\r\n\tid: shortId.generate(),\r\n\tcontent: data,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t}\r\n})\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n\t// immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\r\n\tswitch (action.type) {\r\n\t\tcase LOAD_POSTS_REQUEST:\r\n\t\t\tdraft.loadPostsLoading = true;\r\n\t\t\tdraft.loadPostsDone = false;\r\n\t\t\tdraft.loadPostsError = null;\r\n\t\t\tbreak;\r\n\t\tcase LOAD_POSTS_SUCCESS:\r\n\t\t\tdraft.loadPostsLoading = false\r\n\t\t\tdraft.loadPostsDone = true\r\n\t\t\t// action.data 에 dummy data 가 들어있을것이며, 기존데이터와 합쳐주는것\r\n\t\t\t// concat 을 할땐 항상 앞에 대입을 해줘야한다 그래야 합쳐짐\r\n\t\t\tdraft.mainPosts = action.data.concat(draft.mainPosts)\r\n\t\t\t// 게시물을 50 개까지만 가져오겠다\r\n\t\t\tdraft.hasMorePosts = draft.mainPosts.length < 50\r\n\t\t\tbreak;\r\n\t\tcase LOAD_POSTS_FAILURE:\r\n\t\t\tdraft.loadPostsLoading = false\r\n\t\t\tdraft.loadPostsError = action.error\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_REQUEST:\r\n\t\t\tdraft.addPostLoading = true;\r\n\t\t\tdraft.addPostDone = false;\r\n\t\t\tdraft.addPostError = null;\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_SUCCESS:\r\n\t\t\tdraft.mainPosts.unshift(dummyPost(action.data))\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostDone = true\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_FAILURE:\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostError = action.error\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_REQUEST:\r\n\t\t\tdraft.removePostLoading = true\r\n\t\t\tdraft.removePostDone = false\r\n\t\t\tdraft.removePostError = null\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_SUCCESS:\r\n\t\t\tdraft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data) // 지울땐 보통 filter 가 편하다\r\n\t\t\tdraft.PostLoading = false\r\n\t\t\tdraft.PostDone = true\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_FAILURE:\r\n\t\t\tdraft.removePostLoading = false\r\n\t\t\tdraft.removePostError = action.error\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_REQUEST:\r\n\t\t\tdraft.addCommentLoading = true\r\n\t\t\tdraft.addCommentDone = false\r\n\t\t\tdraft.addCommentError = null\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_SUCCESS: {\r\n\t\t\t//action.data.content, postId, userId\r\n\t\t\tconst post = draft.mainPosts.find((v) => v.id === action.data.postId) // 게시글 리스트중에 post 찾기\r\n\t\t\tpost.Comments.unshift(dummyComment(action.data.content)) // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentDone = true\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase ADD_COMMENT_FAILURE:\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentError = action.error\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n})\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}