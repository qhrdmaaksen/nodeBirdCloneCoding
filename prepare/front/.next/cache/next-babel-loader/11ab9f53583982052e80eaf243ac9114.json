{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  loadUserLoading: false,\n  // 상대 정보 보기 시도중일땐 로딩중 띄울거임\n  loadUserDone: false,\n  // 상대 정보 보기 됨\n  loadUserError: null,\n  // 상대 정보 보기중일때 에러 없앰\n  loadMyInfoLoading: false,\n  // 유저 정보 보기 시도중일땐 로딩중 띄울거임\n  loadMyInfoDone: false,\n  // 유저 정보 보기 됨\n  loadMyInfoError: null,\n  // 유저 정보 보기중일때 에러 없앰\n  removeFollowerLoading: false,\n  // 팔로워 유저 삭제 시도중일땐 로딩중 띄울거임\n  removeFollowerDone: false,\n  // 팔로워 유저 삭제 됨\n  removeFollowerError: null,\n  // 팔로워 유저 삭제 중일때 에러 없앰\n  followLoading: false,\n  // 팔로우 시도중일땐 로딩중 띄울거임\n  followDone: false,\n  // 팔로우 됨\n  followError: null,\n  // 팔로우중일때 에러 없앰\n  unfollowLoading: false,\n  // 언팔로우 시도중일땐 로딩중 띄울거임\n  unfollowDone: false,\n  // 언팔로우 됨\n  unfollowError: null,\n  // 언팔로우중일때 에러 없앰\n  loadFollowersLoading: false,\n  // 팔로워 시도중일땐 로딩중 띄울거임\n  loadFollowersDone: false,\n  // 팔로워 됨\n  loadFollowersError: null,\n  // 팔로워일때 에러 없앰\n  loadFollowingsLoading: false,\n  // 팔로윙 시도중일땐 로딩중 띄울거임\n  loadFollowingsDone: false,\n  // 팔로윙 됨\n  loadFollowingsError: null,\n  // 팔로윙 중일때 에러 없앰\n  logInLoading: false,\n  // 로그인 시도중일땐 로딩중 띄울거임\n  logInDone: false,\n  // 로그인 됨\n  logInError: null,\n  // 로딩중일때 에러 없앰\n  logOutLoading: false,\n  // 로그아웃 시도중\n  logOutDone: false,\n  // 로그아웃 완료\n  logOutError: null,\n  signUpLoading: false,\n  // 회원가입 로딩중\n  signUpDone: false,\n  // 회원 가입 완료\n  signUpError: null,\n  changeNicknameLoading: false,\n  // 닉네임 변경 로딩중\n  changeNicknameDone: false,\n  // 닉네임 변경 완료\n  changeNicknameError: null,\n  me: null,\n  signUpData: {},\n  // 회원 가입 데이터\n  loginData: {},\n  userInfo: null\n}; // 로그인 액션 생성기 thunk\n// export const loginAction = (data) => { // 함수를 리턴하는 비동기 액션 크리에이터가 추가\n// \treturn (dispatch, getState) => {\n// \t\tconst state = getState()\n// \t\tdispatch(loginRequestAction())\n// \t\taxios.post('/api/login')\n// \t\t\t\t.then((res) => {\n// \t\t\t\t\tdispatch(loginSuccessAction(res.data))\n// \t\t\t\t})\n// \t\t\t\t.catch((error) => {\n// \t\t\t\t\tdispatch(loginFailureAction(error))\n// \t\t\t\t})\n// \t}\n// }\n// actions\n\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST';\nexport const LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS';\nexport const LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE';\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport const CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport const CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE';\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE'; // 유저 리듀서의 상태를 바꿀수있는 액션 생성\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\n/* front\r\nconst dummyUser = (data) => ({\r\n\t...data,\r\n\tnickname: '비타민',\r\n\tid: 1,\r\n\tPosts: [{id: 1}],\r\n\tFollowings: [{nickname: '외노'}, {nickname: '음메'}, {nickname: '썽'}, {nickname: '오댕'}, {nickname: '만뽀'}],\r\n\tFollowers: [{nickname: '까매'}, {nickname: '만두'}, {nickname: '보챙'}, {nickname: '뒷가'}, {nickname: '야덩'}],\r\n})*/\n\nexport const loginRequestAction = data => ({\n  type: LOG_IN_REQUEST,\n  data\n}); // 로그아웃 액션 생성기 thunk\n// export const logoutAction = (data) => {\n// \treturn (dispatch) => {\n// \t\taxios.post('/api/logout')\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(logoutSuccessAction())\n// \t\t\t\t})\n// \t\t\t\t.catch(() => {\n// \t\t\t\t\tdispatch(logoutFailureAction())\n// \t\t\t\t})\n// \t}\n// }\n\nexport const logoutRequestAction = () => ({\n  type: LOG_OUT_REQUEST\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_USER_REQUEST:\n      // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n      draft.loadUserLoading = true;\n      draft.loadUserDone = false;\n      draft.loadUserError = null; // 로딩 중일때는 에러 없앰\n\n      console.log('reducer myInfo 요청');\n      break;\n\n    case LOAD_USER_SUCCESS:\n      draft.userInfo = action.data; // back 상대 정보가 들어있음\n\n      draft.loadUserLoading = false;\n      draft.loadUserDone = true; //draft.me = dummyUser(action.data)\n\n      console.log('reducer myInfo 성공');\n      break;\n\n    case LOAD_USER_FAILURE:\n      console.error('loadUserFail 실패:: ' + action.error);\n      draft.loadUserLoading = false;\n      draft.loadUserError = action.error;\n      break;\n\n    case LOAD_MY_INFO_REQUEST:\n      // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n      draft.loadMyInfoLoading = true;\n      draft.loadMyInfoDone = false;\n      draft.loadMyInfoError = null; // 로딩 중일때는 에러 없앰\n\n      console.log('reducer myInfo 요청');\n      break;\n\n    case LOAD_MY_INFO_SUCCESS:\n      draft.me = action.data; // back 내 정보가 들어있음\n\n      draft.loadMyInfoLoading = false;\n      draft.loadMyInfoDone = true; //draft.me = dummyUser(action.data)\n\n      console.log('reducer myInfo 성공');\n      break;\n\n    case LOAD_MY_INFO_FAILURE:\n      console.error('loadMyInfoFail 실패:: ' + action.error);\n      draft.loadMyInfoLoading = false;\n      draft.loadMyInfoError = action.error;\n      break;\n\n    case REMOVE_FOLLOWER_REQUEST:\n      draft.removeFollowerLoading = true;\n      draft.removeFollowerDone = false;\n      draft.removeFollowerError = null;\n      console.log('reducer removeFollower 요청');\n      break;\n\n    case REMOVE_FOLLOWER_SUCCESS:\n      // 나의 팔로워 제거\n      draft.me.Followers = draft.me.Followers.filter(v => v.id !== action.data.UserId);\n      draft.removeFollowerLoading = false;\n      draft.removeFollowerDone = true;\n      console.log('reducer removeFollower 성공');\n      break;\n\n    case REMOVE_FOLLOWER_FAILURE:\n      console.error('removeFollowerFail 실패:: ' + action.error);\n      draft.removeFollowerLoading = false;\n      draft.removeFollowerError = action.error;\n\n    case FOLLOW_REQUEST:\n      // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n      draft.followLoading = true;\n      draft.followError = null; // 로딩 중일때는 에러 없앰\n\n      draft.followDone = false;\n      console.log('reducer FOLLOW_REQUEST 요청');\n      break;\n\n    case FOLLOW_SUCCESS:\n      draft.followLoading = false;\n      draft.followDone = true; //draft.me = dummyUser(action.data)\n\n      draft.me.Followings.push({\n        id: action.data.UserId\n      });\n      console.log('reducer FOLLOW_SUCCESS 성공');\n      break;\n\n    case FOLLOW_FAILURE:\n      draft.followLoading = false;\n      draft.followError = action.error;\n      console.error('reducer FOLLOW_FAILURE 실패::', action.error);\n      break;\n\n    case UNFOLLOW_REQUEST:\n      // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n      draft.unfollowLoading = true;\n      draft.unfollowError = null; // 로딩 중일때는 에러 없앰\n\n      draft.unfollowDone = false;\n      console.log('reducer unfollow 요청');\n      break;\n\n    case UNFOLLOW_SUCCESS:\n      draft.unfollowLoading = false;\n      draft.unfollowDone = true; //draft.me = dummyUser(action.data)\n      // 언팔로우 한 사람만 빠지게\n\n      draft.me.Followings = draft.me.Followings.filter(v => v.id !== action.data.UserId);\n      console.log('reducer unfollow 성공');\n      break;\n\n    case UNFOLLOW_FAILURE:\n      draft.unfollowLoading = false;\n      draft.unfollowError = action.error;\n      console.error('reducer unfollow 실패::', action.error);\n      break;\n\n    case LOG_IN_REQUEST:\n      draft.logInLoading = true;\n      draft.logInError = null;\n      draft.logInDone = false;\n      console.log('reducer login 요청');\n      break;\n\n    case LOG_IN_SUCCESS:\n      draft.logInLoading = false;\n      draft.logInDone = true; //draft.me = dummyUser(action.data) front\n\n      draft.me = action.data; // back\n\n      console.log('reducer login 성공');\n      break;\n\n    case LOG_IN_FAILURE:\n      draft.logInLoading = false;\n      draft.logInError = action.error;\n      console.error('reducer login 실패:: ', action.error);\n      break;\n\n    case LOG_OUT_REQUEST:\n      draft.logOutLoading = true;\n      draft.logOutDone = false;\n      draft.logOutError = null;\n      console.log('reducer logout 요청');\n      break;\n\n    case LOG_OUT_SUCCESS:\n      draft.logOutLoading = false;\n      draft.logOutDone = true;\n      draft.me = null;\n      console.log('reducer logout 성공');\n      break;\n\n    case LOG_OUT_FAILURE:\n      draft.logOutLoading = false;\n      draft.logOutError = action.error;\n      console.error('reducer logout 실패', action.error);\n      break;\n\n    case SIGN_UP_REQUEST:\n      draft.signUpLoading = true;\n      draft.signUpDone = false;\n      draft.signUpError = null;\n      console.log('reducer signup 요청');\n      break;\n\n    case SIGN_UP_SUCCESS:\n      draft.signUpLoading = false;\n      draft.signUpDone = true;\n      console.log('reducer signUp 성공');\n      break;\n\n    case SIGN_UP_FAILURE:\n      draft.signUpLoading = false;\n      draft.signUpError = action.error;\n      console.error('reducer signUp 실패', action.error);\n      break;\n\n    case CHANGE_NICKNAME_REQUEST:\n      draft.changeNicknameLoading = true;\n      draft.changeNicknameDone = false;\n      draft.changeNicknameError = null;\n      console.log('reducer CHANGE_NICKNAME_REQUEST 요청');\n      break;\n\n    case CHANGE_NICKNAME_SUCCESS:\n      draft.changeNicknameLoading = false;\n      draft.changeNicknameDone = true;\n      console.log('reducer CHANGE_NICKNAME_SUCCESS 성공');\n      break;\n\n    case CHANGE_NICKNAME_FAILURE:\n      draft.changeNicknameLoading = false;\n      draft.changeNicknameError = action.error;\n      console.error('reducer CHANGE_NICKNAME 실패', action.error);\n      break;\n\n    case LOAD_FOLLOWERS_REQUEST:\n      draft.loadFollowersLoading = true;\n      draft.loadFollowersDone = false;\n      draft.loadFollowersError = null;\n      console.log('reducer LOAD_FOLLOWERS_REQUEST 요청');\n      break;\n\n    case LOAD_FOLLOWERS_SUCCESS:\n      draft.loadFollowersLoading = false;\n      draft.loadFollowersDone = true;\n      draft.me.Followers = action.data;\n      console.log('reducer LOAD_FOLLOWERS_SUCCESS 성공');\n      break;\n\n    case LOAD_FOLLOWERS_FAILURE:\n      draft.loadFollowersLoading = false;\n      draft.loadFollowersError = action.error;\n      console.error('reducer LOAD_FOLLOWERS 실패', action.error);\n      break;\n\n    case LOAD_FOLLOWINGS_REQUEST:\n      draft.loadFollowingsLoading = true;\n      draft.loadFollowingsDone = false;\n      draft.loadFollowingsError = null;\n      console.log('reducer LOAD_FOLLOWINGS_REQUEST 요청');\n      break;\n\n    case LOAD_FOLLOWINGS_SUCCESS:\n      draft.loadFollowingsLoading = false;\n      draft.loadFollowingsDone = true;\n      draft.me.Followings = action.data;\n      console.log('reducer LOAD_FOLLOWINGS_SUCCESS 성공');\n      break;\n\n    case LOAD_FOLLOWINGS_FAILURE:\n      draft.loadFollowingsLoading = false;\n      draft.loadFollowingsError = action.error;\n      console.error('reducer LOAD_FOLLOWINGS 실패', action.error);\n      break;\n\n    case ADD_POST_TO_ME:\n      // 게시글을 쓰면 게시글 아이디가 여기로 들어와서 하나가 추가된다\n      draft.me.Posts.unshift({\n        id: action.data\n      });\n      console.log('ADD_POST_TO_ME 성공');\n      break;\n    // return {\n    // \t...state,\n    // \tme: {\n    // \t\t...state.me,\n    // \t\tPosts: [{id: action.data}, ...state.me.Posts],\n    // \t}\n    // }\n\n    case REMOVE_POST_OF_ME:\n      draft.me.Posts = draft.me.Posts.filter(v => v.id !== action.data);\n      console.log('REMOVE_POST_OF_ME');\n      break;\n    // return { // 불변성을 지키며 게시글을 지워야한다.\n    // \t...state,\n    // \tme: {\n    // \t\t...state.me,\n    // \t\tPosts: state.me.Posts.filter((v) => v.id !== action.data)\n    // \t}\n    // }\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}