{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(follow),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(unfollow),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchFollow),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnFollow),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, REMOVE_POST_OF_ME, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\nfunction loadPostsAPI(data) {\n  // 3 전달되면\n  return axios.get('/api/posts', data); // 4 데이터가 간다\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10) // data 10 개\n\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('loadPosts : ' + _context.t0);\n          _context.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/follow', data);\n}\n\nfunction follow(action) {\n  return _regeneratorRuntime.wrap(function follow$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: FOLLOW_SUCCESS,\n            data: data\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error('follow error : ' + _context2.t0);\n          _context2.next = 12;\n          return put({\n            type: FOLLOW_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow', data);\n}\n\nfunction unfollow(action) {\n  return _regeneratorRuntime.wrap(function unfollow$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: UNFOLLOW_SUCCESS,\n            data: data\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('unfollow error : ' + _context3.t0);\n          _context3.next = 12;\n          return put({\n            type: UNFOLLOW_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context4.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context4.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context4.next = 15;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error('addPost : ' + _context4.t0);\n          _context4.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data // 어떤 게시물을 지웠는지 id 가있을것\n\n          });\n\n        case 5:\n          _context5.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context5.next = 14;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error('removePost : ' + _context5.t0);\n          _context5.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data); // 4 데이터가 간다\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context6.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data //data: result.data\n\n          });\n\n        case 5:\n          _context6.next = 12;\n          break;\n\n        case 7:\n          _context6.prev = 7;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error('addComment : ' + _context6.t0);\n          _context6.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 7]]);\n}\n\nfunction watchFollow() {\n  return _regeneratorRuntime.wrap(function watchFollow$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(FOLLOW_REQUEST, follow);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchUnFollow() {\n  return _regeneratorRuntime.wrap(function watchUnFollow$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(UNFOLLOW_REQUEST, unfollow);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchFollow), fork(watchUnFollow), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["loadPosts","follow","unfollow","addPost","removePost","addComment","watchFollow","watchUnFollow","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","delay","fork","put","takeLatest","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","REMOVE_POST_OF_ME","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","shortId","loadPostsAPI","data","get","action","type","console","error","response","followAPI","post","unfollowAPI","addPostAPI","id","generate","content","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import {all, delay, fork, put, takeLatest, throttle} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE,\r\n\tLOAD_POSTS_REQUEST,\r\n\tLOAD_POSTS_SUCCESS,\r\n\tREMOVE_POST_FAILURE,\r\n\tREMOVE_POST_REQUEST,\r\n\tREMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport {\r\n\tADD_POST_TO_ME,\r\n\tFOLLOW_FAILURE,\r\n\tFOLLOW_REQUEST,\r\n\tFOLLOW_SUCCESS,\r\n\tREMOVE_POST_OF_ME, UNFOLLOW_FAILURE,\r\n\tUNFOLLOW_REQUEST, UNFOLLOW_SUCCESS\r\n} from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\n\r\n\r\nfunction loadPostsAPI(data) { // 3 전달되면\r\n\treturn axios.get('/api/posts', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* loadPosts(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(loadPostsAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_SUCCESS,\r\n\t\t\tdata: generateDummyPost(10), // data 10 개\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('loadPosts : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_FAILURE,\r\n\t\t\tdata: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction followAPI(data) {\r\n\treturn axios.post('/api/follow', data)\r\n}\r\n\r\nfunction* follow(action) {\r\n\ttry {\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: FOLLOW_SUCCESS,\r\n\t\t\tdata,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('follow error : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: FOLLOW_FAILURE,\r\n\t\t\tdata: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\nfunction unfollowAPI(data) {\r\n\treturn axios.post('/api/unfollow', data)\r\n}\r\nfunction* unfollow(action){\r\n\ttry {\r\n\t\tyield delay(1000)\r\n\t\tyield put ({\r\n\t\t\ttype: UNFOLLOW_SUCCESS,\r\n\t\t\tdata,\r\n\t\t})\r\n\t}catch (err) {\r\n\t\tconsole.error('unfollow error : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: UNFOLLOW_FAILURE,\r\n\t\t\tdata: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tconst id = shortId.generate()\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\tdata: {\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: action.data,\r\n\t\t\t}\r\n\t\t})\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\tdata: id,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addPost : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction removePostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* removePost(action) { // 1 액션에서\r\n\ttry { // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\r\n\t\t//const result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_SUCCESS,\r\n\t\t\tdata: action.data, // 어떤 게시물을 지웠는지 id 가있을것\r\n\t\t})\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_OF_ME,\r\n\t\t\tdata: action.data,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('removePost : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\treturn axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addComment : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchFollow() {\r\n\tyield takeLatest(FOLLOW_REQUEST, follow)\r\n}\r\n\r\nfunction* watchUnFollow() {\r\n\tyield takeLatest(UNFOLLOW_REQUEST, unfollow)\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchFollow),\r\n\t\tfork(watchUnFollow),\r\n\t\tfork(watchLoadPosts),\r\n\t\tfork(watchAddPost),\r\n\t\tfork(watchRemovePost),\r\n\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}