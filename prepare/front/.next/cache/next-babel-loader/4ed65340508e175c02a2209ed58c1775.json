{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined, HeartTwoTone } from \"@ant-design/icons\";\nimport Link from 'next/link';\nimport moment from 'moment';\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nmoment.locale('ko'); // 한글로 바꾼다\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); //state.user.me && state.user.me.id\n  //\tconst [liked, setLiked] = useState(false) front\n\n  var onLike = useCallback(function () {\n    // 좋아요 클릭\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id // 게시글 아이디\n\n    });\n  }, [id]);\n  var onUnLike = useCallback(function () {\n    // 좋아요 해제 클릭\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id // 게시글 아이디\n\n    });\n  }, [id]);\n  /* front\r\n  const onToggleLike = useCallback(() => {\r\n  \tsetLiked((prev) => !prev)\r\n  }, [])*/\n\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  }); // 게시글 좋아요 누른 사람중에 내가 있는지\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 32\n      }\n    }) // 이미지가 한개 이상있을때 포스트 이미지스\n    ,\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 8\n      }\n    }), // 리트윗 버튼\n    liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 12\n      }\n    }) // 하트 버튼\n    : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 12\n      }\n    }), // 하트 버튼\n    __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 8\n      }\n    }), // 댓글 버튼\n    __jsx(Popover, {\n      key: \"more\",\n      content: // 더 보기 버튼\n      __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 10\n        }\n      }, id && post.User.id === id ?\n      /*내가 쓴 글이면 수정 삭제 가능*/\n      __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 16\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 16\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }\n      }, \"\\uC2E0\\uACE0\"), \" \"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 8\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717 \\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 20\n      }\n    }) // 우측 추가공간,로그인했을경우만보이게\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 45\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 10\n    }\n  }, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.Retweet.User.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 16\n      }\n    }, __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    }, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 26\n      }\n    }) // 특수한 기능을 처리하는 것을 만들기 위해선 따로 컴포넌트로 빼주는게 보기 깔끔하다\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar:\n    /*avatar 누르면 그사람이 쓴 글 볼 수있게*/\n    __jsx(Link, {\n      href: \"/user/\".concat(post.User.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 16\n      }\n    }, __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 26\n      }\n    }) // 특수한 기능을 처리하는 것을 만들기 위해선 따로 컴포넌트로 빼주는게 보기 깔끔하다\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }))), commentFormOpened && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 8\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 12\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar:\n        /*댓글의 avatar 를 눌러도 그 사람이 쓴 글 볼 수있게*/\n        __jsx(Link, {\n          href: \"/user/\".concat(item.User.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 17\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 18\n          }\n        }, __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 19\n          }\n        }, item.User.nickname[0]))),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 8\n    }\n  })));\n};\n\n_s(PostCard, \"xAZOXRtpy70224b/tH2NwE9iHEg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","PropTypes","useDispatch","useSelector","Avatar","Button","Card","Comment","List","Popover","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","HeartTwoTone","Link","moment","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","locale","PostCard","post","dispatch","state","removePostLoading","commentFormOpened","setCommentFormOpened","id","user","me","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweet","createdAt","format","content","Comments","length","item","propTypes","shape","number","object","string","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Avatar, Button, Card, Comment, List, Popover} from \"antd\";\r\nimport {EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined, HeartTwoTone} from \"@ant-design/icons\";\r\nimport Link from 'next/link'\r\nimport moment from 'moment'\r\n\r\nimport PostImages from \"./PostImages\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport PostCardContent from \"./PostCardContent\";\r\nimport {LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST} from \"../reducers/post\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\n\r\nmoment.locale('ko') // 한글로 바꾼다\r\n\r\nconst PostCard = ({post}) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst {removePostLoading} = useSelector((state) => state.post)\r\n\tconst [commentFormOpened, setCommentFormOpened] = useState(false)\r\n\tconst id = useSelector((state) => state.user.me?.id) //state.user.me && state.user.me.id\r\n//\tconst [liked, setLiked] = useState(false) front\r\n\r\n\r\n\tconst onLike = useCallback(() => { // 좋아요 클릭\r\n\t\tif (!id) { // 로그인이 안되어있다면 바로바로 막아주는게 좋다\r\n\t\t\treturn alert('로그인이 필요합니다!')\r\n\t\t}\r\n\t\treturn dispatch({\r\n\t\t\ttype: LIKE_POST_REQUEST,\r\n\t\t\tdata: post.id, // 게시글 아이디\r\n\t\t})\r\n\t}, [id])\r\n\tconst onUnLike = useCallback(() => { // 좋아요 해제 클릭\r\n\t\tif (!id) { // 로그인이 안되어있다면 바로바로 막아주는게 좋다\r\n\t\t\treturn alert('로그인이 필요합니다!')\r\n\t\t}\r\n\t\treturn dispatch({\r\n\t\t\ttype: UNLIKE_POST_REQUEST,\r\n\t\t\tdata: post.id, // 게시글 아이디\r\n\t\t})\r\n\t}, [id])\r\n\r\n\t/* front\r\n\tconst onToggleLike = useCallback(() => {\r\n\t\tsetLiked((prev) => !prev)\r\n\t}, [])*/\r\n\r\n\tconst onToggleComment = useCallback(() => {\r\n\t\tsetCommentFormOpened((prev) => !prev)\r\n\t}, [])\r\n\r\n\tconst onRemovePost = useCallback(() => {\r\n\t\tif (!id) {\r\n\t\t\treturn alert('로그인이 필요합니다.')\r\n\t\t}\r\n\t\treturn dispatch({\r\n\t\t\ttype: REMOVE_POST_REQUEST,\r\n\t\t\tdata: post.id,\r\n\t\t})\r\n\t}, [id])\r\n\r\n\r\n\tconst onRetweet = useCallback(() => {\r\n\t\tif (!id) { // 로그인이 안되어있다면 바로바로 막아주는게 좋다\r\n\t\t\treturn alert('로그인이 필요합니다!')\r\n\t\t}\r\n\t\treturn dispatch({\r\n\t\t\ttype: RETWEET_REQUEST,\r\n\t\t\tdata: post.id,\r\n\t\t})\r\n\t}, [id]);\r\n\r\n\tconst liked = post.Likers.find((v) => v.id === id) // 게시글 좋아요 누른 사람중에 내가 있는지\r\n\r\n\treturn (\r\n\t\t\t<div style={{marginBottom: 20}}>\r\n\t\t\t\t<Card\r\n\t\t\t\t\t\tcover={post.Images[0] && <PostImages images={post.Images}/>} // 이미지가 한개 이상있을때 포스트 이미지스\r\n\t\t\t\t\t\tactions={[\r\n\t\t\t\t\t\t\t<RetweetOutlined key=\"retweet\" onClick={onRetweet}/>, // 리트윗 버튼\r\n\t\t\t\t\t\t\tliked\r\n\t\t\t\t\t\t\t\t\t? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike}/> // 하트 버튼\r\n\t\t\t\t\t\t\t\t\t: <HeartOutlined key=\"heart\" onClick={onLike}/>, // 하트 버튼\r\n\t\t\t\t\t\t\t<MessageOutlined key=\"comment\" onClick={onToggleComment}/>, // 댓글 버튼\r\n\t\t\t\t\t\t\t<Popover key=\"more\" content={( // 더 보기 버튼\r\n\t\t\t\t\t\t\t\t\t<Button.Group>\r\n\t\t\t\t\t\t\t\t\t\t{id && post.User.id === id\r\n\t\t\t\t\t\t\t\t\t\t\t\t? ( /*내가 쓴 글이면 수정 삭제 가능*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button>수정</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t: <Button>신고</Button>} {/* 남이 쓴 글이면 삭제 가능*/}\r\n\t\t\t\t\t\t\t\t\t</Button.Group>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<EllipsisOutlined/>\r\n\t\t\t\t\t\t\t</Popover>,\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t\ttitle={post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null}\r\n\t\t\t\t\t\textra={id && <FollowButton post={post}/>} // 우측 추가공간,로그인했을경우만보이게\r\n\t\t\t\t>\r\n\t\t\t\t\t{/*retweet 인 경우 카드안에 카드 넣어주기*/}\r\n\t\t\t\t\t{post.RetweetId && post.Retweet\r\n\t\t\t\t\t\t\t? (\r\n\t\t\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\t\t\t\tcover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images}/>}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{float: 'right'}}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n\t\t\t\t\t\t\t\t\t\t<Card.Meta\r\n\t\t\t\t\t\t\t\t\t\t\t\tavatar={(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link href={`/user/${post.Retweet.User.id}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a><Avatar>{post.Retweet.User.nickname[0]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttitle={post.Retweet.User.nickname}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdescription={<PostCardContent\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpostData={post.Retweet.content}/>} // 특수한 기능을 처리하는 것을 만들기 위해선 따로 컴포넌트로 빼주는게 보기 깔끔하다\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t: (\r\n\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{float: 'right'}}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n\t\t\t\t\t\t\t\t\t\t<Card.Meta\r\n\t\t\t\t\t\t\t\t\t\t\t\tavatar={( /*avatar 누르면 그사람이 쓴 글 볼 수있게*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link href={`/user/${post.User.id}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{post.User.nickname[0]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttitle={post.User.nickname}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdescription={<PostCardContent\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpostData={post.content}/>} // 특수한 기능을 처리하는 것을 만들기 위해선 따로 컴포넌트로 빼주는게 보기 깔끔하다\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t</Card>\r\n\t\t\t\t{commentFormOpened && (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<CommentForm post={post}/>\r\n\t\t\t\t\t\t\t<List\r\n\t\t\t\t\t\t\t\t\theader={`${post.Comments.length}개의 댓글`}\r\n\t\t\t\t\t\t\t\t\titemLayout=\"horizontal\"\r\n\t\t\t\t\t\t\t\t\tdataSource={post.Comments}\r\n\t\t\t\t\t\t\t\t\trenderItem={(item) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Comment\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor={item.User.nickname}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tavatar={( /*댓글의 avatar 를 눌러도 그 사람이 쓴 글 볼 수있게*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link href={`/user/${item.User.id}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.User.nickname[0]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontent={item.content}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>)}\r\n\t\t\t\t{/*<CommentForm />\r\n\t\t\t\t<Comments />*/}\r\n\t\t\t</div>\r\n\t)\r\n}\r\nPostCard.propTypes = {\r\n\tpost: PropTypes.shape({\r\n\t\tid: PropTypes.number,\r\n\t\tUser: PropTypes.object,\r\n\t\tcontent: PropTypes.string,\r\n\t\tcreatedAt: PropTypes.string,\r\n\t\tComments: PropTypes.arrayOf(PropTypes.object),\r\n\t\tImages: PropTypes.arrayOf(PropTypes.object),\r\n\t\tLikers: PropTypes.arrayOf(PropTypes.object),\r\n\t\tRetweetId: PropTypes.number,\r\n\t\tRetweet: PropTypes.objectOf(PropTypes.any),\r\n\t}).isRequired,\r\n};\r\n\r\nexport default PostCard"]},"metadata":{},"sourceType":"module"}