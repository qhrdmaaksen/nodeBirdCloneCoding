{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  isLoggingIn: false,\n  // 로그인 시도중일땐 로딩중 띄울거임\n  isLoggedIn: false,\n  // 로그인 됨\n  isLoggedOut: false,\n  // 로그아웃 시도중\n  me: null,\n  signUpData: {},\n  // 회원 가입\n  loginData: {}\n}; // 로그인 액션 생성기 thunk\n// export const loginAction = (data) => { // 함수를 리턴하는 비동기 액션 크리에이터가 추가\n// \treturn (dispatch, getState) => {\n// \t\tconst state = getState()\n// \t\tdispatch(loginRequestAction())\n// \t\taxios.post('/api/login')\n// \t\t\t\t.then((res) => {\n// \t\t\t\t\tdispatch(loginSuccessAction(res.data))\n// \t\t\t\t})\n// \t\t\t\t.catch((err) => {\n// \t\t\t\t\tdispatch(loginFailureAction(err))\n// \t\t\t\t})\n// \t}\n// }\n\nexport const loginRequestAction = data => {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data\n  };\n};\nexport const loginSuccessAction = data => {\n  return {\n    type: 'LOG_IN_SUCCESS',\n    data\n  };\n};\nexport const loginFailureAction = data => {\n  return {\n    type: 'LOG_IN_FAILURE',\n    data\n  };\n}; // 로그아웃 액션 생성기 thunk\n// export const logoutAction = (data) => {\n// \treturn (dispatch) => {\n// \t\taxios.post('/api/logout')\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(logoutSuccessAction())\n// \t\t\t\t})\n// \t\t\t\t.catch(() => {\n// \t\t\t\t\tdispatch(logoutFailureAction())\n// \t\t\t\t})\n// \t}\n// }\n\nexport const logoutRequestAction = () => {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN_REQUEST':\n      console.log('reducer login');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: true,\n        me: action.data\n      });\n\n    case 'LOG_IN_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: _objectSpread(_objectSpread({}, action.data), {}, {\n          nickname: 'vitamin'\n        })\n      });\n\n    case 'LOG_IN_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: false\n      });\n\n    case 'LOG_OUT_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedOut: true\n      });\n\n    case 'LOG_OUT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedOut: false,\n        isLoggedIn: false,\n        me: null\n      });\n\n    case 'LOG_OUT_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedOut: false,\n        isLoggedIn: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/user.js"],"names":["initialState","isLoggingIn","isLoggedIn","isLoggedOut","me","signUpData","loginData","loginRequestAction","data","type","loginSuccessAction","loginFailureAction","logoutRequestAction","reducer","state","action","console","log","nickname"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC3BC,EAAAA,WAAW,EAAE,KADc;AACP;AACpBC,EAAAA,UAAU,EAAE,KAFe;AAER;AACnBC,EAAAA,WAAW,EAAE,KAHc;AAGP;AACpBC,EAAAA,EAAE,EAAE,IAJuB;AAK3BC,EAAAA,UAAU,EAAE,EALe;AAKX;AAChBC,EAAAA,SAAS,EAAE;AANgB,CAArB,C,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AAC3C,SAAO;AACNC,IAAAA,IAAI,EAAE,gBADA;AAEND,IAAAA;AAFM,GAAP;AAIA,CALM;AAMP,OAAO,MAAME,kBAAkB,GAAIF,IAAD,IAAU;AAC3C,SAAO;AACNC,IAAAA,IAAI,EAAE,gBADA;AAEND,IAAAA;AAFM,GAAP;AAIA,CALM;AAMP,OAAO,MAAMG,kBAAkB,GAAIH,IAAD,IAAU;AAC3C,SAAO;AACNC,IAAAA,IAAI,EAAE,gBADA;AAEND,IAAAA;AAFM,GAAP;AAIA,CALM,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,mBAAmB,GAAG,MAAM;AACxC,SAAO;AACNH,IAAAA,IAAI,EAAE;AADA,GAAP;AAGA,CAJM;;AAMP,MAAMI,OAAO,GAAG,CAACC,KAAK,GAAGd,YAAT,EAAuBe,MAAvB,KAAkC;AACjD,UAAQA,MAAM,CAACN,IAAf;AACC,SAAK,gBAAL;AACCO,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,6CAEIH,KAFJ;AAGCb,QAAAA,WAAW,EAAE,IAHd;AAICG,QAAAA,EAAE,EAAEW,MAAM,CAACP;AAJZ;;AAMD,SAAK,gBAAL;AACC,6CAEIM,KAFJ;AAGCb,QAAAA,WAAW,EAAE,KAHd;AAICC,QAAAA,UAAU,EAAE,IAJb;AAKCE,QAAAA,EAAE,kCAAMW,MAAM,CAACP,IAAb;AAAmBU,UAAAA,QAAQ,EAAE;AAA7B;AALH;;AAOD,SAAK,gBAAL;AACC,6CAEIJ,KAFJ;AAGCb,QAAAA,WAAW,EAAE,KAHd;AAICC,QAAAA,UAAU,EAAE;AAJb;;AAMD,SAAK,iBAAL;AACC,6CAEIY,KAFJ;AAGCX,QAAAA,WAAW,EAAE;AAHd;;AAKD,SAAK,iBAAL;AACC,6CAEIW,KAFJ;AAGCX,QAAAA,WAAW,EAAE,KAHd;AAICD,QAAAA,UAAU,EAAE,KAJb;AAKCE,QAAAA,EAAE,EAAE;AALL;;AAOD,SAAK,iBAAL;AACC,6CAEIU,KAFJ;AAGCX,QAAAA,WAAW,EAAE,KAHd;AAICD,QAAAA,UAAU,EAAE;AAJb;;AAMD;AACC,aAAOY,KAAP;AA9CF;AAgDA,CAjDD;;AAmDA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n\tisLoggingIn: false, // 로그인 시도중일땐 로딩중 띄울거임\r\n\tisLoggedIn: false, // 로그인 됨\r\n\tisLoggedOut: false, // 로그아웃 시도중\r\n\tme: null,\r\n\tsignUpData: {}, // 회원 가입\r\n\tloginData: {},\r\n}\r\n\r\n// 로그인 액션 생성기 thunk\r\n// export const loginAction = (data) => { // 함수를 리턴하는 비동기 액션 크리에이터가 추가\r\n// \treturn (dispatch, getState) => {\r\n// \t\tconst state = getState()\r\n// \t\tdispatch(loginRequestAction())\r\n// \t\taxios.post('/api/login')\r\n// \t\t\t\t.then((res) => {\r\n// \t\t\t\t\tdispatch(loginSuccessAction(res.data))\r\n// \t\t\t\t})\r\n// \t\t\t\t.catch((err) => {\r\n// \t\t\t\t\tdispatch(loginFailureAction(err))\r\n// \t\t\t\t})\r\n// \t}\r\n// }\r\nexport const loginRequestAction = (data) => {\r\n\treturn {\r\n\t\ttype: 'LOG_IN_REQUEST',\r\n\t\tdata,\r\n\t}\r\n}\r\nexport const loginSuccessAction = (data) => {\r\n\treturn {\r\n\t\ttype: 'LOG_IN_SUCCESS',\r\n\t\tdata,\r\n\t}\r\n}\r\nexport const loginFailureAction = (data) => {\r\n\treturn {\r\n\t\ttype: 'LOG_IN_FAILURE',\r\n\t\tdata,\r\n\t}\r\n}\r\n// 로그아웃 액션 생성기 thunk\r\n// export const logoutAction = (data) => {\r\n// \treturn (dispatch) => {\r\n// \t\taxios.post('/api/logout')\r\n// \t\t\t\t.then(() => {\r\n// \t\t\t\t\tdispatch(logoutSuccessAction())\r\n// \t\t\t\t})\r\n// \t\t\t\t.catch(() => {\r\n// \t\t\t\t\tdispatch(logoutFailureAction())\r\n// \t\t\t\t})\r\n// \t}\r\n// }\r\nexport const logoutRequestAction = () => {\r\n\treturn {\r\n\t\ttype: 'LOG_OUT_REQUEST',\r\n\t}\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'LOG_IN_REQUEST':\r\n\t\t\tconsole.log('reducer login')\r\n\t\t\treturn {\r\n\t\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 uiser.js 의 state 임\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoggingIn: true,\r\n\t\t\t\tme: action.data,\r\n\t\t\t}\r\n\t\tcase 'LOG_IN_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 uiser.js 의 state 임\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoggingIn: false,\r\n\t\t\t\tisLoggedIn: true,\r\n\t\t\t\tme: {...action.data, nickname: 'vitamin'},\r\n\t\t\t}\r\n\t\tcase 'LOG_IN_FAILURE':\r\n\t\t\treturn {\r\n\t\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 uiser.js 의 state 임\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoggingIn: false,\r\n\t\t\t\tisLoggedIn: false,\r\n\t\t\t}\r\n\t\tcase 'LOG_OUT_REQUEST':\r\n\t\t\treturn {\r\n\t\t\t\t// store 에서 보낸 state 가 만들어짐\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoggedOut: true,\r\n\t\t\t}\r\n\t\tcase 'LOG_OUT_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t// store 에서 보낸 state 가 만들어짐\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoggedOut: false,\r\n\t\t\t\tisLoggedIn: false,\r\n\t\t\t\tme: null,\r\n\t\t\t}\r\n\t\tcase 'LOG_OUT_FAILURE':\r\n\t\t\treturn {\r\n\t\t\t\t// store 에서 보낸 state 가 만들어짐\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoggedOut: false,\r\n\t\t\t\tisLoggedIn: false,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}