{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction* addPost(action) {\n  // 1 액션에서\n  try {\n    //const result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error('addPost : ' + err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction* removePost(action) {\n  // 1 액션에서\n  try {\n    // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\n    //const result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // 어떤 게시물을 지웠는지 id 가있을것\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error('removePost : ' + err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  return axios.post(`/api/post/${data.postId}/comment`, data); // 4 데이터가 간다\n}\n\nfunction* addComment(action) {\n  // 1 액션에서\n  try {\n    //const result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data //data: result.data\n\n    });\n  } catch (err) {\n    console.error('addComment : ' + err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","addPost","action","id","generate","type","content","err","console","error","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS, LOAD_POSTS_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tconst id = shortId.generate()\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\tdata: {\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: action.data,\r\n\t\t\t}\r\n\t\t})\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\tdata: id,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addPost : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction removePostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* removePost(action) { // 1 액션에서\r\n\ttry { // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\r\n\t\t//const result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_SUCCESS,\r\n\t\t\tdata: action.data, // 어떤 게시물을 지웠는지 id 가있을것\r\n\t\t})\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_OF_ME,\r\n\t\t\tdata: action.data,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('removePost : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\treturn axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addComment : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\nfunction* watchLoadPosts() {\r\n\tyield takeLatest(LOAD_POSTS_REQUEST, addPost)\r\n}\r\nfunction* watchRemovePost() {\r\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchAddPost),\r\n\t\tfork(watchLoadPosts),\r\n\t\tfork(watchRemovePost),\r\n\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}