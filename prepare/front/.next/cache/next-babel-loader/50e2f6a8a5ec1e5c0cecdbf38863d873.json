{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { store } from 'next/dist/build/output/store';\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  user: {},\n  post: {\n    mainPosts: []\n  }\n}; // 액션 생성기\n\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // 비동기 액션 생성기\n// 액션 생성기\n\n/*const changeNickname = (data) => {\n\treturn {\n\t\ttype: 'CHANGE_NICKNAME',\n\t\tdata,\n\t}\n}\nchangeNickname('vitamin777')*/\n\n/*{\n\t\ttype: 'CHANGE_NICKNAME',\n\t\tdata: 'vitamin777',\n}*/\n\n/*store.dispatch(changeNickname('vitamin7777777'))*/\n// 이전상태와 액션을 통해 다음 상태를 만들어내는 함수\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type // 예전 상태에서 액션에따라 데이터를 바꿔 다음 상태를 리턴\n  ) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/index.js"],"names":["store","HYDRATE","initialState","user","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","console","log","payload","isLoggedIn"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,8BAAtB;AACA,SAASC,OAAT,QAAuB,oBAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAInBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAJa,CAArB,C,CAQA;;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAMP,OAAO,MAAME,YAAY,GAAG,MAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM,C,CAKP;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACpD,UACEA,MAAM,CAACJ,IADT,CACc;AADd;AAGE,SAAKP,OAAL;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,6CACKD,KADL,GAEKC,MAAM,CAACG,OAFZ;;AAIF,SAAK,QAAL;AACE,6CAEKJ,KAFL;AAGER,QAAAA,IAAI,kCACCQ,KAAK,CAACR,IADP;AAEFa,UAAAA,UAAU,EAAE,IAFV;AAGFb,UAAAA,IAAI,EAAES,MAAM,CAACL;AAHX;AAHN;;AASF,SAAK,SAAL;AACE,6CAEKI,KAFL;AAGER,QAAAA,IAAI,kCACCQ,KAAK,CAACR,IADP;AAEFa,UAAAA,UAAU,EAAE,KAFV;AAGFb,UAAAA,IAAI,EAAE;AAHJ;AAHN;;AASF;AACE,+BACKQ,KADL;AA9BJ;AAkCD,CAnCD;;AAqCA,eAAeD,WAAf","sourcesContent":["import { store } from 'next/dist/build/output/store'\nimport { HYDRATE} from \"next-redux-wrapper\";\n\nconst initialState = {\n  user: {\n\n  },\n  post: {\n    mainPosts: [],\n  },\n}\n// 액션 생성기\nexport const loginAction = (data) => {\n  return {\n    type: 'LOG_IN',\n    data,\n  }\n}\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT',\n  }\n}\n// 비동기 액션 생성기\n\n// 액션 생성기\n/*const changeNickname = (data) => {\n\treturn {\n\t\ttype: 'CHANGE_NICKNAME',\n\t\tdata,\n\t}\n}\nchangeNickname('vitamin777')*/\n/*{\n\t\ttype: 'CHANGE_NICKNAME',\n\t\tdata: 'vitamin777',\n}*/\n\n/*store.dispatch(changeNickname('vitamin7777777'))*/\n\n// 이전상태와 액션을 통해 다음 상태를 만들어내는 함수\nconst rootReducer = (state = initialState, action) => {\n  switch (\n    action.type // 예전 상태에서 액션에따라 데이터를 바꿔 다음 상태를 리턴\n  ) {\n    case HYDRATE:\n      console.log('HYDRATE', action)\n      return {\n        ...state,\n        ...action.payload,\n      }\n    case 'LOG_IN':\n      return {\n        // store 에서 보낸 state 가 만들어짐\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: true,\n          user: action.data,\n        },\n      }\n    case 'LOG_OUT':\n      return {\n        // store 에서 보낸 state 가 만들어짐\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: false,\n          user: null,\n        },\n      }\n    default:\n      return {\n        ...state,\n      }\n  }\n}\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}