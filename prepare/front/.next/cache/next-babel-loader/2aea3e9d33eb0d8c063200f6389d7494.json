{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// hashtag/[tag].js\nimport { useRouter } from \"next/router\";\nimport wrapper from \"../../store/configureStore\";\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport { LOAD_HASHTAG_POSTS_REQUEST, LOAD_POSTS_REQUEST } from '../../reducers/post';\nimport { getStaticProps } from \"../about\";\nimport AppLayout from '../../component/AppLayout';\nimport PostCard from \"../../component/PostCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Head from \"next/head\";\nimport { useEffect } from \"react\";\n\nconst Hashtag = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    tag\n  } = router.query; // loadPostsLoading 은 loadHashtagPostsLoading 이지만 reducer 에서 같이 쓰기로 했기에 loadPostsLoading\n\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post); // 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\n\n  /*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n  \t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\n\n  useEffect(() => {\n    const onScroll = () => {\n      // (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\n          dispatch({\n            // 다 내리면 그때 새로운 것 로딩\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            // 마지막 게시글의 id\n            data: tag\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, tag, loadPostsLoading]);\n  return __jsx(AppLayout, null, mainPosts.map(c => __jsx(PostCard, {\n    key: c.id,\n    post: c\n  })));\n};\n/*getServerSideProps&getStaticProps 안의 context 에서는 context.params.id&context.query.id 하면\r\nuseRouter 에 똑같이 접근 할 수 있다*/\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context);\n  const cookie = context.req ? context.req.headers.cookie : '';\n  console.log('dynamic routing Post getServerSideProps Start ::');\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    // 내 정보 요청\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    // 단일 게시글 요청\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: context.params.tag //\n\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  return {\n    props: {}\n  };\n});\nexport default Hashtag;","map":null,"metadata":{},"sourceType":"module"}