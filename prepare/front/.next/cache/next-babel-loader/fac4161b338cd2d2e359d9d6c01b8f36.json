{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; // Next 에서는 이 구문이 필요가 없다.\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../component/AppLayout';\nimport PostForm from '../component/PostForm';\nimport PostCard from \"../component/PostCard\";\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []); // 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\n\n  /*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n  \t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\n\n  useEffect(function () {\n    function onScroll() {\n      // (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        dispatch({\n          // 다 내리면 그때 새로운 것 로딩\n          type: LOAD_POSTS_REQUEST\n        });\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }\n  }, me && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }\n  }), \" \", mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    });\n  }));\n};\n\n_s(Home, \"AgIJcfH1H12KzRN1QiO1ExB/+eo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","me","mainPosts","map","post","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CAAuC;;AACvC,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,kBAAR,QAAiC,kBAAjC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAClB,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACAD,EAAAA,SAAS,CAAC,YAAM;AAAE;AACjBQ,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEH;AADE,KAAD,CAAR;AAGA,GAJQ,EAIN,EAJM,CAAT,CAFkB,CAQlB;;AACA;AACD;;AACCN,EAAAA,SAAS,CAAC,YAAM;AACf,aAASU,QAAT,GAAqB;AACpB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AACA,UAAIL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,KAA2DF,QAAQ,CAACC,eAAT,CAAyBE,YAAxF,EAAsG;AACrGV,QAAAA,QAAQ,CAAC;AAAE;AACVC,UAAAA,IAAI,EAAEH;AADE,SAAD,CAAR;AAGA;AACD;;AACAO,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCT,QAAlC;AACD,WAAO,YAAM;AACXG,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCV,QAArC;AACD,KAFD;AAGA,GAdQ,EAcN,EAdM,CAAT;AAgBA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGEW,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,OAIEC,SAAS,CAACC,GAAV,CAAc,UAACC,IAAD;AAAA,WACb,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACC,EAApB;AAAwB,MAAA,IAAI,EAAED,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CAJF,CADF;AAWA,CAtCD;;GAAMjB,I;UACYN,W;;;KADZM,I;AAwCN,eAAeA,IAAf","sourcesContent":["import React, {useEffect} from 'react' // Next 에서는 이 구문이 필요가 없다.\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport AppLayout from '../component/AppLayout'\r\nimport PostForm from '../component/PostForm'\r\nimport PostCard from \"../component/PostCard\";\r\nimport {LOAD_POSTS_REQUEST} from '../reducers/post'\r\n\r\nconst Home = () => {\r\n\tconst dispatch = useDispatch()\r\n\tuseEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n\t\tdispatch({\r\n\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t})\r\n\t}, []);\r\n\r\n\t// 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\r\n\t/*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n\t\t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\r\n\tuseEffect(() => {\r\n\t\tfunction onScroll () {\r\n\t\t\t// (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\r\n\t\t\tconsole.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n\t\t\tif (window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\r\n\t\t\t\tdispatch({ // 다 내리면 그때 새로운 것 로딩\r\n\t\t\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\t\twindow.addEventListener('scroll', onScroll)\r\n\t\treturn () => {\r\n\t\t\t\twindow.removeEventListener('scroll', onScroll)\r\n\t\t};\r\n\t}, []);\r\n\t\r\n\treturn (\r\n\t\t\t<AppLayout>\r\n\t\t\t\t{/*AppLayout 을 사용한다, 만약 다른 레이아웃을 사용하고싶다면 따로 component에 만들어서 이와같이 감싸면된다.*/}\r\n\t\t\t\t{/*뭔가 묶일 수 있는 단위가있을 것 같으면 먼저 컴포넌트 이름을 정해주자*/}\r\n\t\t\t\t{me && <PostForm/>} {/*모두 참 인경우 마지막 피 연산자를 반환*/}\r\n\t\t\t\t{mainPosts.map((post) => (\r\n\t\t\t\t\t\t<PostCard key={post.id} post={post}/>\r\n\t\t\t\t))}\r\n\t\t\t\t{/*이와같이 AppLayout 으로 감싼 이부분은 AppLayout 의 children 이된다.*/}\r\n\t\t\t</AppLayout>\r\n\t)\r\n}\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}