{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  // gererator 아님\n  return axios.post('/api/login', data); // 실제 서버에 로그인 요청을 보냄\n} // 테스트 코드\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\n// \t\tl.next();\n// \t\tl.next();\n/////////////////\n\n\nfunction* logIn(action) {\n  // login action request 가 action 에 전달\n  try {\n    // 요청 실패 대비\n    console.log('saga login');\n    yield delay(1000); //const result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data //data: result.data // (성공 결과 담김)\n\n    });\n  } catch (err) {\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // 요청 실패 대비\n    yield delay(1000); //const result = yield call(logOutAPI) // 서버에서 받은 결과 값을 받음\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS' //data: result.data // (성공 결과 담김)\n\n    });\n  } catch (err) {\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 로그인 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchLogOut() {\n  // 로그인 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest('LOG_OUT_REQUEST', logOut); //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","logInAPI","data","post","logIn","action","console","log","type","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAAE;AACzB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADuB,CACe;AACtC,C,CAED;AACA;AACA;AACA;AACA;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AAAE;AACzB,MAAI;AAAE;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAMX,KAAK,CAAC,IAAD,CAAX,CAFG,CAGH;;AACA,UAAME,GAAG,CAAC;AACTU,MAAAA,IAAI,EAAE,gBADG;AAETN,MAAAA,IAAI,EAAEG,MAAM,CAACH,IAFJ,CAGT;;AAHS,KAAD,CAAT;AAKA,GATD,CASE,OAAOO,GAAP,EAAY;AACb,UAAMX,GAAG,CAAC;AAAE;AACXU,MAAAA,IAAI,EAAE,gBADG;AAETN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR,IAFV,CAEe;;AAFf,KAAD,CAAT;AAIA;AACD;;AAED,SAASS,SAAT,GAAqB;AACpB,SAAOX,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACA;;AAED,UAAUS,MAAV,GAAmB;AAClB,MAAI;AAAE;AACL,UAAMhB,KAAK,CAAC,IAAD,CAAX,CADG,CAEH;;AACA,UAAME,GAAG,CAAC;AACTU,MAAAA,IAAI,EAAE,iBADG,CAET;;AAFS,KAAD,CAAT;AAIA,GAPD,CAOE,OAAOC,GAAP,EAAY;AACb,UAAMX,GAAG,CAAC;AAAE;AACXU,MAAAA,IAAI,EAAE,iBADG;AAETN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR,IAFV,CAEe;;AAFf,KAAD,CAAT;AAIA;AACD;;AAED,UAAUW,UAAV,GAAuB;AAAE;AACxB,QAAMd,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB,CADsB,CACoB;AAC1C;;AAED,UAAUU,WAAV,GAAwB;AAAE;AACzB,QAAMf,UAAU,CAAC,iBAAD,EAAoBa,MAApB,CAAhB,CADuB,CACqB;AAC5C;;AAED,eAAe,UAAUG,QAAV,GAAqB;AACnC,QAAMpB,GAAG,CAAC,CACTE,IAAI,CAACgB,UAAD,CADK,EAEThB,IAAI,CAACiB,WAAD,CAFK,CAAD,CAAT;AAIA","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction logInAPI(data) { // gererator 아님\r\n\treturn axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄\r\n}\r\n\r\n// 테스트 코드\r\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\r\n// \t\tl.next();\r\n// \t\tl.next();\r\n/////////////////\r\nfunction* logIn(action) { // login action request 가 action 에 전달\r\n\ttry { // 요청 실패 대비\r\n\t\tconsole.log('saga login')\r\n\t\tyield delay(1000)\r\n\t\t//const result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: 'LOG_IN_SUCCESS',\r\n\t\t\tdata: action.data,\r\n\t\t\t//data: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: 'LOG_IN_FAILURE',\r\n\t\t\tdata: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction logOutAPI() {\r\n\treturn axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n\ttry { // 요청 실패 대비\r\n\t\tyield delay(1000)\r\n\t\t//const result = yield call(logOutAPI) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: 'LOG_OUT_SUCCESS',\r\n\t\t\t//data: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: 'LOG_OUT_FAILURE',\r\n\t\t\tdata: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest('LOG_IN_REQUEST', logIn) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchLogOut() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest('LOG_OUT_REQUEST', logOut) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchLogOut),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}