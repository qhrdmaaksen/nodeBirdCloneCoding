{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { CHANGE_NICKNAME_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  // generator 아님\n  //return axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄 // front\n  // 실제 서버에 로그인 요청을 보냄 // back\n  //return axios.post('http://localhost:3065/user/login', data)\n  // localhost 중복 없애기\n  return axios.post('/user/login', data);\n} // 테스트 코드\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\n// \t\tl.next();\n// \t\tl.next();\n/////////////////\n\n\nfunction* logIn(action) {\n  // login action request 가 action 에 전달\n  try {\n    // 요청 실패 대비\n    //yield delay(1000) // front\n    const result = yield call(logInAPI, action.data); // 서버에서 받은 결과 값을 받음\n\n    console.log('saga logIn 실행중::', action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      //data: action.data, // front\n      data: result.data // (성공 결과 담김) back\n\n    });\n    console.log('saga logIn 완료 ::', result);\n  } catch (err) {\n    console.error('logIn', err);\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: LOG_IN_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  // return axios.post('/api/logout') front\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    // 요청 실패 대비\n    //yield delay(1000) front\n    yield call(logOutAPI); // 서버에서 받은 결과 값을 받음 back\n\n    console.log('sagas:: logout 실행');\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n    console.log('sagas:: logout 완료');\n  } catch (err) {\n    console.error('front logOut : ', err);\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: LOG_OUT_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction changeNicknameAPI(data) {\n  // generator 아님\n  // 실제 서버에 로그인 요청을 보냄 // back\n  //return axios.post('http://localhost:3065/user/login', data)\n  // localhost 중복 없애기\n  return axios.patch('/user/nickname', {\n    nickname: data\n  });\n}\n\nfunction* changeNickname(action) {\n  // login action request 가 action 에 전달\n  try {\n    // 요청 실패 대비\n    //yield delay(1000) // front\n    const result = yield call(changeNicknameAPI, action.data); // 서버에서 받은 결과 값을 받음\n\n    console.log('saga changeNickname 실행중::', action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      //data: action.data, // front\n      data: result.data // (성공 결과 담김) back\n\n    });\n    console.log('saga changeNickname 완료 ::', result);\n  } catch (err) {\n    console.error('changeNickname', err);\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n    console.log('saga loadMyInfo 실행중::', action.data);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n    console.log('saga loadMyInfo 완료', result);\n  } catch (err) {\n    console.error('saga loadMyInfo error : ', err);\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  // return axios.post('/api/follow', data) front\n  return axios.patch(`/user/${data}/follow`);\n}\n\nfunction* follow(action) {\n  try {\n    //yield delay(1000) front\n    const result = yield call(followAPI, action.data);\n    console.log('saga follow 실행 : ', result);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      //data: action.data front\n      data: result.data\n    }); //console.log('saga follow 완료 :: ', result)\n  } catch (err) {\n    console.error('saga follow error :: ', err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error('unfollow error : ', err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  // back end server addr\n  // data 는 email, nickname, password object\n  //return axios.post('/api/signup', data) // front\n  return axios.post('/user', data); // back\n}\n\nfunction* signUp(action) {\n  try {\n    //yield delay(1000)\n    const result = yield call(signUpAPI, action.data);\n    console.log('saga sign up result 실행중 :: ', action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS //data: result.data\n\n    });\n    console.log('saga sign up 완료 :: ', result);\n  } catch (err) {\n    console.error('saga signUp error : ', err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  // 로그인 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchLogOut() {\n  // 로그아웃 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(LOG_OUT_REQUEST, logOut); //LOG_OUT_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchSignUp() {\n  // 회원가입 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(SIGN_UP_REQUEST, signUp); // SIGN_UP_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchChangeNickname), fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnFollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/user.js"],"names":["all","call","delay","fork","put","takeLatest","axios","CHANGE_NICKNAME_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOAD_MY_INFO_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","data","post","logIn","action","result","console","log","type","err","error","response","logOutAPI","logOut","changeNicknameAPI","patch","nickname","changeNickname","loadMyInfoAPI","get","loadMyInfo","followAPI","follow","unfollowAPI","unfollow","signUpAPI","signUp","watchChangeNickname","watchLoadMyInfo","watchFollow","watchUnFollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import {all, call, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tCHANGE_NICKNAME_FAILURE,\r\n\tCHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS,\r\n\tFOLLOW_FAILURE,\r\n\tFOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS,\r\n\tLOG_IN_FAILURE,\r\n\tLOG_IN_REQUEST,\r\n\tLOG_IN_SUCCESS,\r\n\tLOG_OUT_FAILURE,\r\n\tLOG_OUT_REQUEST,\r\n\tLOG_OUT_SUCCESS,\r\n\tSIGN_UP_FAILURE,\r\n\tSIGN_UP_REQUEST,\r\n\tSIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS,\r\n} from \"../reducers/user\";\r\n\r\n\r\nfunction logInAPI(data) { // generator 아님\r\n\t//return axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄 // front\r\n\r\n\t// 실제 서버에 로그인 요청을 보냄 // back\r\n\t//return axios.post('http://localhost:3065/user/login', data)\r\n\r\n\t// localhost 중복 없애기\r\n\treturn axios.post('/user/login', data)\r\n}\r\n\r\n// 테스트 코드\r\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\r\n// \t\tl.next();\r\n// \t\tl.next();\r\n/////////////////\r\nfunction* logIn(action) { // login action request 가 action 에 전달\r\n\ttry { // 요청 실패 대비\r\n\t\t//yield delay(1000) // front\r\n\t\tconst result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\r\n\t\tconsole.log('saga logIn 실행중::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS,\r\n\t\t\t//data: action.data, // front\r\n\t\t\tdata: result.data // (성공 결과 담김) back\r\n\t\t})\r\n\t\tconsole.log('saga logIn 완료 ::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('logIn', err)\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: LOG_IN_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction logOutAPI() {\r\n\t// return axios.post('/api/logout') front\r\n\treturn axios.post('/user/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n\ttry { // 요청 실패 대비\r\n\t\t//yield delay(1000) front\r\n\t\tyield call(logOutAPI) // 서버에서 받은 결과 값을 받음 back\r\n\t\tconsole.log('sagas:: logout 실행')\r\n\t\tyield put({\r\n\t\t\ttype: LOG_OUT_SUCCESS,\r\n\t\t})\r\n\t\tconsole.log('sagas:: logout 완료')\r\n\t} catch (err) {\r\n\t\tconsole.error('front logOut : ', err)\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: LOG_OUT_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction changeNicknameAPI(data) { // generator 아님\r\n\t// 실제 서버에 로그인 요청을 보냄 // back\r\n\t//return axios.post('http://localhost:3065/user/login', data)\r\n\t// localhost 중복 없애기\r\n\treturn axios.patch('/user/nickname', {nickname: data})\r\n}\r\n\r\nfunction* changeNickname(action) { // login action request 가 action 에 전달\r\n\ttry { // 요청 실패 대비\r\n\t\t//yield delay(1000) // front\r\n\t\tconst result = yield call(changeNicknameAPI, action.data) // 서버에서 받은 결과 값을 받음\r\n\t\tconsole.log('saga changeNickname 실행중::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: CHANGE_NICKNAME_SUCCESS,\r\n\t\t\t//data: action.data, // front\r\n\t\t\tdata: result.data // (성공 결과 담김) back\r\n\t\t})\r\n\t\tconsole.log('saga changeNickname 완료 ::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('changeNickname', err)\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: CHANGE_NICKNAME_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction loadMyInfoAPI() {\r\n\treturn axios.get('/user')\r\n}\r\n\r\nfunction* loadMyInfo(action) {\r\n\ttry {\r\n\t\tconst result = yield call(loadMyInfoAPI, action.data)\r\n\t\tconsole.log('saga loadMyInfo 실행중::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_MY_INFO_SUCCESS,\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t\tconsole.log('saga loadMyInfo 완료', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga loadMyInfo error : ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_MY_INFO_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction followAPI(data) {\r\n\t// return axios.post('/api/follow', data) front\r\n\treturn axios.patch(`/user/${data}/follow`)\r\n}\r\n\r\nfunction* follow(action) {\r\n\ttry {\r\n\t\t//yield delay(1000) front\r\n\t\tconst result = yield call(followAPI, action.data)\r\n\t\tconsole.log('saga follow 실행 : ', result)\r\n\t\tyield put({\r\n\t\t\ttype: FOLLOW_SUCCESS,\r\n\t\t\t//data: action.data front\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t\t//console.log('saga follow 완료 :: ', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga follow error :: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: FOLLOW_FAILURE,\r\n\t\t\terror: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n\treturn axios.post('/api/unfollow', data)\r\n}\r\n\r\nfunction* unfollow(action) {\r\n\ttry {\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: UNFOLLOW_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('unfollow error : ', err)\r\n\t\tyield put({\r\n\t\t\ttype: UNFOLLOW_FAILURE,\r\n\t\t\terror: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n\t// back end server addr\r\n\t// data 는 email, nickname, password object\r\n\t//return axios.post('/api/signup', data) // front\r\n\treturn axios.post('/user', data) // back\r\n}\r\n\r\nfunction* signUp(action) {\r\n\ttry {\r\n\t\t//yield delay(1000)\r\n\t\tconst result = yield call(signUpAPI, action.data)\r\n\t\tconsole.log('saga sign up result 실행중 :: ', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_SUCCESS,\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t\tconsole.log('saga sign up 완료 :: ', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga signUp error : ', err)\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchChangeNickname() {\r\n\tyield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname)\r\n}\r\n\r\nfunction* watchLoadMyInfo() {\r\n\tyield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo)\r\n}\r\n\r\nfunction* watchFollow() {\r\n\tyield takeLatest(FOLLOW_REQUEST, follow)\r\n}\r\n\r\nfunction* watchUnFollow() {\r\n\tyield takeLatest(UNFOLLOW_REQUEST, unfollow)\r\n}\r\n\r\nfunction* watchLogIn() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(LOG_IN_REQUEST, logIn) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchLogOut() {\t// 로그아웃 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(LOG_OUT_REQUEST, logOut) //LOG_OUT_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchSignUp() {\t// 회원가입 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(SIGN_UP_REQUEST, signUp) // SIGN_UP_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchChangeNickname),\r\n\t\tfork(watchLoadMyInfo),\r\n\t\tfork(watchFollow),\r\n\t\tfork(watchUnFollow),\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchLogOut),\r\n\t\tfork(watchSignUp),\r\n\t])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}