{"ast":null,"code":"var _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\component\\\\FollowButton.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback } from 'react';\nimport PropTypes from \"prop-types\";\nimport { Button } from 'antd';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from \"../reducers/user\";\n\nconst FollowButton = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    me,\n    followLoading,\n    unfollowLoading\n  } = useSelector(state => state.user); // v.id 가 포스트 작성자의 id 라면\n\n  const isFollowing = me === null || me === void 0 ? void 0 : me.Followings.find(v => v.id === post.User.id);\n  const onClickButton = useCallback(() => {\n    if (isFollowing) {\n      dispatch({\n        type: UNFOLLOW_REQUEST,\n        data: post.User.id\n        /*팔로우할때 사용자의 정보를 보내주는곳*/\n\n      });\n    } else {\n      dispatch({\n        type: FOLLOW_REQUEST,\n        data: post.User.id\n      });\n    }\n  }, [isFollowing]);\n\n  if (post.User.id === me.id) {\n    // 포스트 작성자의 아이디와 내 아이디가 같다면\n    return null;\n  }\n\n  return __jsx(Button, {\n    loading: followLoading || unfollowLoading,\n    onClick: onClickButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }\n  }, isFollowing ? '언팔로우' : '팔로우', \" \");\n};\n\nFollowButton.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default FollowButton;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/component/FollowButton.js"],"names":["React","useCallback","PropTypes","Button","useDispatch","useSelector","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FollowButton","post","dispatch","me","followLoading","unfollowLoading","state","user","isFollowing","Followings","find","v","id","User","onClickButton","type","data","propTypes","object","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,WAAf,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,MAAR,QAAqB,MAArB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,cAAR,EAAwBC,gBAAxB,QAA+C,kBAA/C;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAChC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAACO,IAAAA,EAAD;AAAKC,IAAAA,aAAL;AAAoBC,IAAAA;AAApB,MAAuCR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAxD,CAFgC,CAIhC;;AACA,QAAMC,WAAW,GAAGL,EAAH,aAAGA,EAAH,uBAAGA,EAAE,CAAEM,UAAJ,CAAeC,IAAf,CAAqBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASX,IAAI,CAACY,IAAL,CAAUD,EAA9C,CAApB;AAEA,QAAME,aAAa,GAAGrB,WAAW,CAAC,MAAM;AACvC,QAAIe,WAAJ,EAAiB;AAChBN,MAAAA,QAAQ,CAAC;AACRa,QAAAA,IAAI,EAAEhB,gBADE;AAERiB,QAAAA,IAAI,EAAEf,IAAI,CAACY,IAAL,CAAUD;AAAI;;AAFZ,OAAD,CAAR;AAIA,KALD,MAKO;AACNV,MAAAA,QAAQ,CAAC;AACRa,QAAAA,IAAI,EAAEjB,cADE;AAERkB,QAAAA,IAAI,EAAEf,IAAI,CAACY,IAAL,CAAUD;AAFR,OAAD,CAAR;AAIA;AACD,GAZgC,EAY9B,CAACJ,WAAD,CAZ8B,CAAjC;;AAcA,MAAIP,IAAI,CAACY,IAAL,CAAUD,EAAV,KAAiBT,EAAE,CAACS,EAAxB,EAA4B;AAAE;AAC7B,WAAO,IAAP;AACA;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAER,aAAa,IAAIC,eAAlC;AAAmD,IAAA,OAAO,EAAES,aAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEN,WAAW,GAAG,MAAH,GAAY,KADzB,MADF;AAKA,CA9BD;;AA+BAR,YAAY,CAACiB,SAAb,GAAyB;AACxBhB,EAAAA,IAAI,EAAEP,SAAS,CAACwB,MAAV,CAAiBC;AADC,CAAzB;AAGA,eAAenB,YAAf","sourcesContent":["import React, {useCallback} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {Button} from 'antd'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {FOLLOW_REQUEST, UNFOLLOW_REQUEST} from \"../reducers/user\";\r\n\r\nconst FollowButton = ({post}) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst {me, followLoading, unfollowLoading} = useSelector((state) => state.user)\r\n\r\n\t// v.id 가 포스트 작성자의 id 라면\r\n\tconst isFollowing = me?.Followings.find((v) => v.id === post.User.id)\r\n\r\n\tconst onClickButton = useCallback(() => {\r\n\t\tif (isFollowing) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UNFOLLOW_REQUEST,\r\n\t\t\t\tdata: post.User.id, /*팔로우할때 사용자의 정보를 보내주는곳*/\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: FOLLOW_REQUEST,\r\n\t\t\t\tdata: post.User.id,\r\n\t\t\t})\r\n\t\t}\r\n\t}, [isFollowing])\r\n\r\n\tif (post.User.id === me.id) { // 포스트 작성자의 아이디와 내 아이디가 같다면\r\n\t\treturn null\r\n\t}\r\n\r\n\treturn (\r\n\t\t\t<Button loading={followLoading || unfollowLoading} onClick={onClickButton}>\r\n\t\t\t\t{isFollowing ? '언팔로우' : '팔로우'} {/*팔로우상태라면 true 상태면 언팔로우, false 라면 팔로우*/}\r\n\t\t\t</Button>\r\n\t)\r\n}\r\nFollowButton.propTypes = {\r\n\tpost: PropTypes.object.isRequired,\r\n}\r\nexport default FollowButton"]},"metadata":{},"sourceType":"module"}