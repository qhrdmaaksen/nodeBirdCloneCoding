{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//import { store } from 'next/dist/build/output/store'\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post'; // const initialState = {\n// \tuser: {},\n// \tpost: {},\n// }\n// 비동기 액션 생성기\n// 액션 생성기\n\n/*const changeNickname = (data) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE_NICKNAME',\r\n\t\tdata,\r\n\t}\r\n}\r\nchangeNickname('vitamin777')*/\n\n/*{\r\n\t\ttype: 'CHANGE_NICKNAME',\r\n\t\tdata: 'vitamin777',\r\n}*/\n\n/*store.dispatch(changeNickname('vitamin7777777'))*/\n// 리듀서 : 이전상태와 액션을 통해 다음 상태를 만들어내는 함수\n\nvar rootReducer = combineReducers({\n  // user 이니셜스테이트, post 이니셜스테이트 컴바인 리듀서가 알아서 한방에 묶어줌\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AACA,IAAMC,WAAW,GAAGH,eAAe,CAAC;AAClC;AACAI,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKR,OAAL;AACES,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACF;AACE,eAAOL,KAAP;AALJ;AAOD,GAViC;AAWlCJ,EAAAA,IAAI,EAAJA,IAXkC;AAYlCC,EAAAA,IAAI,EAAJA;AAZkC,CAAD,CAAnC;AAeA,eAAeC,WAAf","sourcesContent":["//import { store } from 'next/dist/build/output/store'\r\nimport { HYDRATE } from 'next-redux-wrapper'\r\nimport { combineReducers } from 'redux'\r\nimport user from './user'\r\nimport post from './post'\r\n\r\n// const initialState = {\r\n// \tuser: {},\r\n// \tpost: {},\r\n// }\r\n\r\n// 비동기 액션 생성기\r\n\r\n// 액션 생성기\r\n/*const changeNickname = (data) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE_NICKNAME',\r\n\t\tdata,\r\n\t}\r\n}\r\nchangeNickname('vitamin777')*/\r\n/*{\r\n\t\ttype: 'CHANGE_NICKNAME',\r\n\t\tdata: 'vitamin777',\r\n}*/\r\n\r\n/*store.dispatch(changeNickname('vitamin7777777'))*/\r\n\r\n// 리듀서 : 이전상태와 액션을 통해 다음 상태를 만들어내는 함수\r\nconst rootReducer = combineReducers({\r\n  // user 이니셜스테이트, post 이니셜스테이트 컴바인 리듀서가 알아서 한방에 묶어줌\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log('HYDRATE', action)\r\n        return { ...state, ...action.payload }\r\n      default:\r\n        return state\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n})\r\n\r\nexport default rootReducer\r\n"]},"metadata":{},"sourceType":"module"}