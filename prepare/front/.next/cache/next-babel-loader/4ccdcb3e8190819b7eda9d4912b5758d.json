{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../components/AppLayout';\nimport NicknameEditForm from '../components/NicknameEditForm';\nimport FollowList from '../components/FollowList';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport useSWR, { useSWRPages } from 'swr';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Router from \"next/router\";\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from \"../store/configureStore\"; //import FollowerList from '../components/FollowerList'\n// fetcher 를 다른걸로 바꾸면 graphql 도 쓸수있다\n\nconst fetcher = url => axios.get(url, {\n  withCredentials: true\n}).then(result => result.data);\n\nconst Profile = () => {\n  /* front\n  const dispatch = useDispatch();\n  const followingList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}] front early\n  const followerList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}]*/\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: followersLimit,\n    1: setFollowersLimit\n  } = useState(3);\n  const {\n    0: followingsLimit,\n    1: setFollowingsLimit\n  } = useState(3);\n  /*useEffect(() => {\n  \tdispatch({\n  \t\ttype: LOAD_FOLLOWERS_REQUEST,\n  \t});\n  \tdispatch({\n  \t\ttype: LOAD_FOLLOWINGS_REQUEST,\n  \t});\n  }, []);*/\n  //followers 불러오기\n  // data, error 가 둘다 있다면 성공했거나, 실패했거나, 둘다 없다면 로딩중\n\n  const {\n    data: followersData,\n    error: followerError\n  } = useSWR(`http://localhost:3065/user/followers?limit=${followersLimit}`, fetcher); //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n  //followings 불러오기\n\n  const {\n    data: followingsData,\n    error: followingError\n  } = useSWR(`http://localhost:3065/user/followings?limit=${followingsLimit}`, fetcher); //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n\n  useEffect(() => {\n    if (!(me && me.id)) {\n      // 프로필 페이지에서 로그아웃했을 경우 main 화면으로\n      Router.push('/');\n    }\n  }, [me && me.id]); // callback 함수는 최소한 return 위쪽에 적자\n  // 버튼을 눌러주면 limit 가 기존 limit 보다 3 씩 늘어난다\n\n  const loadMoreFollowings = useCallback(() => {\n    setFollowingsLimit(prev => prev + 3);\n  }, []);\n  const loadMoreFollowers = useCallback(() => {\n    setFollowersLimit(prev => prev + 3);\n  }, []);\n\n  if (!me) {\n    // 내가 없으면 못들어가게\n    return '내 정보 로딩중...';\n  }\n\n  if (followerError || followingError) {\n    console.error(followerError || followingError);\n    return '팔로잉/팔로워 로딩 중 에러가 발생했습니다.';\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"\\uB0B4 \\uD504\\uB85C\\uD544 | NodeBird\")), __jsx(AppLayout, null, __jsx(NicknameEditForm, null), __jsx(FollowList, {\n    header: \"\\uD314\\uB85C\\uC719 \\uBAA9\\uB85D\",\n    data: followingsData,\n    onClickMore: loadMoreFollowings,\n    loading: !followingsData && !followingError\n  }), __jsx(FollowList, {\n    header: \"\\uD314\\uB85C\\uC6CC \\uBAA9\\uB85D\",\n    data: followersData,\n    onClickMore: loadMoreFollowers,\n    loading: !followersData && !followerError\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log('Profile getServerSideProps Start');\n  console.log(context.req.headers);\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  console.log('Profile getServerSideProps END');\n  await context.store.sagaTask.toPromise();\n});\nexport default Profile;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/pages/profile.js"],"names":["React","useCallback","useEffect","useState","Head","AppLayout","NicknameEditForm","FollowList","axios","END","useSWR","useSWRPages","useDispatch","useSelector","Router","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWINGS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","fetcher","url","get","withCredentials","then","result","data","Profile","me","state","user","followersLimit","setFollowersLimit","followingsLimit","setFollowingsLimit","followersData","error","followerError","followingsData","followingError","id","push","loadMoreFollowings","prev","loadMoreFollowers","console","getServerSideProps","context","log","req","headers","cookie","defaults","Cookie","store","dispatch","type","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react'\nimport Head from 'next/head'\nimport AppLayout from '../components/AppLayout'\nimport NicknameEditForm from '../components/NicknameEditForm'\nimport FollowList from '../components/FollowList'\nimport axios from 'axios'\nimport {END} from 'redux-saga'\nimport useSWR, {useSWRPages} from 'swr'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Router from \"next/router\";\nimport {LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, LOAD_MY_INFO_REQUEST} from '../reducers/user'\nimport wrapper from \"../store/configureStore\";\n//import FollowerList from '../components/FollowerList'\n\n// fetcher 를 다른걸로 바꾸면 graphql 도 쓸수있다\nconst fetcher = (url) => axios.get(url, {withCredentials: true}).then((result) => result.data)\n\nconst Profile = () => {\n\t/* front\n\tconst dispatch = useDispatch();\n\tconst followingList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}] front early\n\tconst followerList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}]*/\n\tconst {me} = useSelector((state) => state.user)\n\tconst [followersLimit, setFollowersLimit] = useState(3)\n\tconst [followingsLimit, setFollowingsLimit] = useState(3)\n\n\t/*useEffect(() => {\n\t\tdispatch({\n\t\t\ttype: LOAD_FOLLOWERS_REQUEST,\n\t\t});\n\t\tdispatch({\n\t\t\ttype: LOAD_FOLLOWINGS_REQUEST,\n\t\t});\n\t}, []);*/\n\t//followers 불러오기\n\n\t// data, error 가 둘다 있다면 성공했거나, 실패했거나, 둘다 없다면 로딩중\n\tconst {\n\t\tdata: followersData,\n\t\terror: followerError\n\t} = useSWR(`http://localhost:3065/user/followers?limit=${followersLimit}`, fetcher) //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n\t//followings 불러오기\n\tconst {\n\t\tdata: followingsData,\n\t\terror: followingError\n\t} = useSWR(`http://localhost:3065/user/followings?limit=${followingsLimit}`, fetcher) //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n\n\tuseEffect(() => {\n\t\tif (!(me && me.id)) { // 프로필 페이지에서 로그아웃했을 경우 main 화면으로\n\t\t\tRouter.push('/')\n\t\t}\n\t}, [me && me.id])\n\n\t// callback 함수는 최소한 return 위쪽에 적자\n\t// 버튼을 눌러주면 limit 가 기존 limit 보다 3 씩 늘어난다\n\tconst loadMoreFollowings = useCallback(\n\t\t\t() => {\n\t\t\t\tsetFollowingsLimit((prev) => prev + 3);\n\t\t\t},\n\t\t\t[],\n\t);\n\n\tconst loadMoreFollowers = useCallback(\n\t\t\t() => {\n\t\t\t\tsetFollowersLimit((prev) => prev + 3)\n\t\t\t},\n\t\t\t[],\n\t);\n\n\n\tif (!me) { // 내가 없으면 못들어가게\n\t\treturn '내 정보 로딩중...';\n\t}\n\n\tif (followerError || followingError) {\n\t\tconsole.error(followerError || followingError)\n\t\treturn '팔로잉/팔로워 로딩 중 에러가 발생했습니다.'\n\t}\n\n\treturn (\n\t\t\t<>\n\t\t\t\t<Head>\n\t\t\t\t\t<title>내 프로필 | NodeBird</title>\n\t\t\t\t</Head>\n\t\t\t\t<AppLayout>\n\t\t\t\t\t<NicknameEditForm/>\n\t\t\t\t\t{/*swr 에서는 data 도 없고 error 도 없을때가 loading 중*/}\n\t\t\t\t\t<FollowList header=\"팔로윙 목록\"\n\t\t\t\t\t\t\t\t\t\t\tdata={followingsData}\n\t\t\t\t\t\t\t\t\t\t\tonClickMore={loadMoreFollowings}\n\t\t\t\t\t\t\t\t\t\t\tloading={!followingsData && !followingError}/>\n\t\t\t\t\t<FollowList header=\"팔로워 목록\"\n\t\t\t\t\t\t\t\t\t\t\tdata={followersData}\n\t\t\t\t\t\t\t\t\t\t\tonClickMore={loadMoreFollowers}\n\t\t\t\t\t\t\t\t\t\t\tloading={!followersData && !followerError}/>\n\t\t\t\t</AppLayout>\n\t\t\t</>\n\t)\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n\tconsole.log('Profile getServerSideProps Start')\n\tconsole.log(context.req.headers)\n\tconst cookie = context.req ? context.req.headers.cookie : '';\n\taxios.defaults.headers.Cookie = '';\n\tif (context.req && cookie) {\n\t\taxios.defaults.headers.Cookie = cookie;\n\t}\n\tcontext.store.dispatch({\n\t\ttype: LOAD_MY_INFO_REQUEST,\n\t})\n\tcontext.store.dispatch(END)\n\tconsole.log('Profile getServerSideProps END')\n\tawait context.store.sagaTask.toPromise()\n})\n\nexport default Profile\n\n"]},"metadata":{},"sourceType":"module"}