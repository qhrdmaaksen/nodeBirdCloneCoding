{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension'; //import thunkMiddleware from 'redux-thunk'\n\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // const loggerMiddleware = ({ dispatch, getState}) => (next) => (action) => {\n//   console.log(action) // 미들웨어를 활용해 리덕스 데브툴즈 처럼 액션 로그 찍히게 하기\n//   return next(action)\n// }\n\nconst configureStore = context => {\n  console.log('configureStore context :: ', context);\n  const sagaMiddleware = createSagaMiddleware(); // saga 설정 방법\n\n  const middlewares = [sagaMiddleware];\n  const enhancer = true ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, // 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\n{\n  debug: false\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","context","console","log","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,SAAQC,eAAR,EAAyBC,OAAzB,EAAkCC,WAAlC,QAAoD,OAApD;AACA,SAAQC,mBAAR,QAAkC,0BAAlC,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAGA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,OAA1C;AACA,QAAMG,cAAc,GAAGP,oBAAoB,EAA3C,CAFmC,CAEW;;AAC9C,QAAMQ,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GACZ,OACIZ,OAAO,CAACD,eAAe,CAAC,GAAGY,WAAJ,CAAhB,CADX,GAEIT,mBAAmB,CAACH,eAAe,CAAC,GAAGY,WAAJ,CAAhB,CAHzB;AAIA,QAAME,KAAK,GAAGZ,WAAW,CAACG,OAAD,EAAUQ,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBV,QAAnB,CAAjB;AACA,SAAOQ,KAAP;AACA,CAXD;;AAYA,MAAMG,OAAO,GAAGlB,aAAa,CAC3BQ,cAD2B,EAE3B;AACA;AAACW,EAAAA,KAAK;AAAN,CAH2B,CAA7B;AAMA,eAAeD,OAAf","sourcesContent":["import {createWrapper} from 'next-redux-wrapper'\r\nimport {applyMiddleware, compose, createStore} from 'redux'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n//import thunkMiddleware from 'redux-thunk'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport reducer from '../reducers'\r\nimport rootSaga from '../sagas'\r\n\r\n\r\n// const loggerMiddleware = ({ dispatch, getState}) => (next) => (action) => {\r\n//   console.log(action) // 미들웨어를 활용해 리덕스 데브툴즈 처럼 액션 로그 찍히게 하기\r\n//   return next(action)\r\n// }\r\n\r\nconst configureStore = (context) => {\r\n\tconsole.log('configureStore context :: ', context)\r\n\tconst sagaMiddleware = createSagaMiddleware() // saga 설정 방법\r\n\tconst middlewares = [sagaMiddleware]\r\n\tconst enhancer =\r\n\t\t\tprocess.env.NODE_ENV === 'production'\r\n\t\t\t\t\t? compose(applyMiddleware(...middlewares))\r\n\t\t\t\t\t: composeWithDevTools(applyMiddleware(...middlewares))\r\n\tconst store = createStore(reducer, enhancer)\r\n\tstore.sagaTask = sagaMiddleware.run(rootSaga)\r\n\treturn store\r\n}\r\nconst wrapper = createWrapper(\r\n\t\tconfigureStore,\r\n\t\t// 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\r\n\t\t{debug: process.env.NODE_ENV === 'development'},\r\n)\r\n\r\nexport default wrapper\r\n"]},"metadata":{},"sourceType":"module"}