{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nvar configureStore = function configureStore() {\n  var middlewares = [];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.dispatch({\n    // 디스패치하는 순간 타입과 데이터가 리듀서로 보내진다.\n    type: 'CHANGE_NICKNAME',\n    data: 'vitamin777'\n  });\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, // 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\n{\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","reducer","composeWithDevTools","configureStore","middlewares","enhancer","store","dispatch","type","data","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GACZ,QACIN,OAAO,CAACD,eAAe,MAAf,SAAmBM,WAAnB,CAAD,CADX,GAEIF,mBAAmB,CAACJ,eAAe,MAAf,SAAmBM,WAAnB,CAAD,CAHzB;AAIA,MAAME,KAAK,GAAGN,WAAW,CAACC,OAAD,EAAUI,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,CAAe;AACb;AACAC,IAAAA,IAAI,EAAE,iBAFO;AAGbC,IAAAA,IAAI,EAAE;AAHO,GAAf;AAKA,SAAOH,KAAP;AACD,CAbD;;AAeA,IAAMI,OAAO,GAAGb,aAAa,CAC3BM,cAD2B,EAE3B;AACA;AAAEQ,EAAAA,KAAK;AAAP,CAH2B,CAA7B;AAMA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper'\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport reducer from '../reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst configureStore = () => {\n  const middlewares = []\n  const enhancer =\n    process.env.NODE_ENV === 'production'\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares))\n  const store = createStore(reducer, enhancer)\n  store.dispatch({\n    // 디스패치하는 순간 타입과 데이터가 리듀서로 보내진다.\n    type: 'CHANGE_NICKNAME',\n    data: 'vitamin777',\n  })\n  return store\n}\n\nconst wrapper = createWrapper(\n  configureStore,\n  // 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\n  { debug: process.env.NODE_ENV === 'development' },\n)\n\nexport default wrapper\n"]},"metadata":{},"sourceType":"module"}