{"ast":null,"code":"import { all, fork, take, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  // gererator 아님\n  return axios.post('/api/login', data); // 실제 서버에 로그인 요청을 보냄\n} // 테스트 코드\n\n\nconst l = logIn({\n  type: 'LOG_IN_REQUEST',\n  data: {\n    id: 'rlaalsdn8@naver.com'\n  }\n});\nl.next();\nl.next(); /////////////////\n\nfunction* logIn(action) {\n  // login action request 가 action 에 전달\n  try {\n    // 요청 실패 대비\n    const result = yield call(logInAPI, action.data); // 서버에서 받은 결과 값을 받음\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data // (성공 결과 담김)\n\n    });\n  } catch (err) {\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // 요청 실패 대비\n    const result = yield call(logOutAPI); // 서버에서 받은 결과 값을 받음\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data // (성공 결과 담김)\n\n    });\n  } catch (err) {\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction* addPost(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(addPostAPI, action.data); // 2 데이터를 꺼내서\n\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 로그인 액션이 실행될때까지 기다리겠다는 뜻\n  yield take('LOG_IN_REQUEST', logIn); //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchLogOut() {\n  // 로그인 액션이 실행될때까지 기다리겠다는 뜻\n  yield take('LOG_OUT_REQUEST', logOut); //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([// ALL 배열안에 한방에 실행해줌\n  fork(watchLogIn), // fork 는 (함수)실행\n  fork(watchLogOut), // call 이랑은 다르다.\n  fork(watchAddPost)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/index.js"],"names":["all","fork","take","call","put","axios","logInAPI","data","post","l","logIn","type","id","next","action","result","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"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","sourcesContent":["import {all, fork, take, call, put} from 'redux-saga/effects';\r\nimport axios from 'axios'\r\n\r\n\r\nfunction logInAPI(data) { // gererator 아님\r\n\treturn axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄\r\n}\r\n// 테스트 코드\r\nconst l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\r\n\t\tl.next();\r\n\t\tl.next();\r\n/////////////////\r\nfunction* logIn(action) { // login action request 가 action 에 전달\r\n\ttry { // 요청 실패 대비\r\n\t\tconst result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: 'LOG_IN_SUCCESS',\r\n\t\t\tdata: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: 'LOG_IN_FAILURE',\r\n\t\t\tdata: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction logOutAPI() {\r\n\treturn axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n\ttry { // 요청 실패 대비\r\n\t\tconst result = yield call(logOutAPI) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: 'LOG_OUT_SUCCESS',\r\n\t\t\tdata: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: 'LOG_OUT_FAILURE',\r\n\t\t\tdata: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield put({\r\n\t\t\ttype: 'ADD_POST_SUCCESS',\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: 'ADD_POST_FAILURE',\r\n\t\t\tdata: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield take('LOG_IN_REQUEST', logIn) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchLogOut() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield take('LOG_OUT_REQUEST', logOut) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield take('ADD_POST_REQUEST', addPost)\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([ // ALL 배열안에 한방에 실행해줌\r\n\t\tfork(watchLogIn), // fork 는 (함수)실행\r\n\t\tfork(watchLogOut),\t// call 이랑은 다르다.\r\n\t\tfork(watchAddPost),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}