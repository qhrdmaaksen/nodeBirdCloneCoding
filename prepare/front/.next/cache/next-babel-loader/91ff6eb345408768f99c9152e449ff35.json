{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; // Next 에서는 이 구문이 필요가 없다.\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../component/AppLayout';\nimport PostForm from '../component/PostForm';\nimport PostCard from \"../component/PostCard\";\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError;\n\n  useEffect(function () {\n    // retweet 실패 시 alert 출력\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  /* CSR\r\n  useEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n  \tdispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n  \t\ttype: LOAD_MY_INFO_REQUEST,\r\n  \t});\r\n  \tdispatch({\r\n  \t\ttype: LOAD_POSTS_REQUEST,\r\n  \t});\r\n  }, []);*/\n  // 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\n\n  /*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n  \t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\n\n  useEffect(function () {\n    function onScroll() {\n      // (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 마지막 게시글의 id\n\n          dispatch({\n            // 다 내리면 그때 새로운 것 로딩\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }\n  }, me && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }\n  }), \" \", mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    });\n  }));\n}; //  Home 보다 먼저 실행이 된다 ( browser 가 아닌 front server 쪽에서 실행) (SSR)\n// context 는 요청/응답과 SSR에 관련된 정보가 들어있는 객체이고요\n\n\n_s(Home, \"2+CEvDgBFJ2LqhxKLRak5mBfU1Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","retweetError","alert","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CAAuC;;AACvC,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAGA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,kBAAR,QAAiC,kBAAjC;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAClB,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AACA,qBAAaC,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAxB;AAAA,MAAOC,EAAP,gBAAOA,EAAP;;AACA,sBAAkET,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAA7E;AAAA,MAAOC,SAAP,iBAAOA,SAAP;AAAA,MAAkBC,YAAlB,iBAAkBA,YAAlB;AAAA,MAAgCC,gBAAhC,iBAAgCA,gBAAhC;AAAA,MAAkDC,YAAlD,iBAAkDA,YAAlD;;AAGAhB,EAAAA,SAAS,CAAC,YAAM;AAAE;AACjB,QAAIgB,YAAJ,EAAkB;AACjBC,MAAAA,KAAK,CAACD,YAAD,CAAL;AACA;AACD,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT;AAMA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;;AACA;AACD;;AACChB,EAAAA,SAAS,CAAC,YAAM;AACf,aAASkB,QAAT,GAAoB;AACnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AACA,UAAIL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACzG,YAAIZ,YAAY,IAAI,CAACC,gBAArB,EAAuC;AAAA;;AAAE;AACxC,cAAMY,MAAM,iBAAGd,SAAS,CAACA,SAAS,CAACe,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD,CADsC,CACc;;AACpDrB,UAAAA,QAAQ,CAAC;AAAE;AACVsB,YAAAA,IAAI,EAAExB,kBADE;AAERqB,YAAAA,MAAM,EAANA;AAFQ,WAAD,CAAR;AAIA;AACD;AACD;;AAEDN,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCb,QAAlC;AACA,WAAO,YAAM;AACZG,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC;AACA,KAFD;AAGA,GAnBQ,EAmBN,CAACJ,YAAD,EAAeC,gBAAf,EAAiCF,SAAjC,CAnBM,CAAT;AAqBA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGEF,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,OAIEE,SAAS,CAACoB,GAAV,CAAc,UAACrB,IAAD;AAAA,WACb,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACiB,EAApB;AAAwB,MAAA,IAAI,EAAEjB,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CAJF,CADF;AAWA,CAzDD,C,CA2DA;AACA;;;GA5DML,I;UACYN,W,EACJC,W,EACqDA,W;;;KAH7DK,I;;AAiFN,eAAeA,IAAf","sourcesContent":["import React, {useEffect} from 'react' // Next 에서는 이 구문이 필요가 없다.\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {END} from 'redux-saga'\r\nimport axios from 'axios'\r\nimport AppLayout from '../component/AppLayout'\r\nimport PostForm from '../component/PostForm'\r\nimport PostCard from \"../component/PostCard\";\r\nimport {LOAD_POSTS_REQUEST} from '../reducers/post'\r\nimport {LOAD_MY_INFO_REQUEST} from '../reducers/user'\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst Home = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst {me} = useSelector((state) => state.user)\r\n\tconst {mainPosts, hasMorePosts, loadPostsLoading, retweetError} = useSelector((state) => state.post)\r\n\r\n\r\n\tuseEffect(() => { // retweet 실패 시 alert 출력\r\n\t\tif (retweetError) {\r\n\t\t\talert(retweetError)\r\n\t\t}\r\n\t}, [retweetError])\r\n\r\n\t/* CSR\r\n\tuseEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n\t\tdispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n\t\t\ttype: LOAD_MY_INFO_REQUEST,\r\n\t\t});\r\n\t\tdispatch({\r\n\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t});\r\n\t}, []);*/\r\n\r\n\t// 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\r\n\t/*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n\t\t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\r\n\tuseEffect(() => {\r\n\t\tfunction onScroll() {\r\n\t\t\t// (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\r\n\t\t\tconsole.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n\t\t\tif (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n\t\t\t\tif (hasMorePosts && !loadPostsLoading) { // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\r\n\t\t\t\t\tconst lastId = mainPosts[mainPosts.length - 1]?.id; // 마지막 게시글의 id\r\n\t\t\t\t\tdispatch({ // 다 내리면 그때 새로운 것 로딩\r\n\t\t\t\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t\t\t\t\tlastId,\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('scroll', onScroll)\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('scroll', onScroll)\r\n\t\t};\r\n\t}, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n\treturn (\r\n\t\t\t<AppLayout>\r\n\t\t\t\t{/*AppLayout 을 사용한다, 만약 다른 레이아웃을 사용하고싶다면 따로 component 에 만들어서 이와같이 감싸면된다.*/}\r\n\t\t\t\t{/*뭔가 묶일 수 있는 단위가있을 것 같으면 먼저 컴포넌트 이름을 정해주자*/}\r\n\t\t\t\t{me && <PostForm/>} {/*모두 참 인경우 마지막 피 연산자를 반환*/}\r\n\t\t\t\t{mainPosts.map((post) => (\r\n\t\t\t\t\t\t<PostCard key={post.id} post={post}/>\r\n\t\t\t\t))}\r\n\t\t\t\t{/*이와같이 AppLayout 으로 감싼 이부분은 AppLayout 의 children 이된다.*/}\r\n\t\t\t</AppLayout>\r\n\t)\r\n}\r\n\r\n//  Home 보다 먼저 실행이 된다 ( browser 가 아닌 front server 쪽에서 실행) (SSR)\r\n// context 는 요청/응답과 SSR에 관련된 정보가 들어있는 객체이고요\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n\t// server 쪽에서 실행되면 context.req 가 존재함, 서버쪽 쿠키 전달\r\n\tconst cookie = context.req ? context.req.headers.cookie : '';\r\n\taxios.defaults.headers.Cookie = ''; // 쿠키를 사용하지 않고 요청을 보낼때는 비워줌\r\n\t// cookie 공유 문제를 해결 장치\r\n\tif (context.req && cookie) { // 서버일때와 cookie 가 있을때\r\n\t\taxios.defaults.headers.Cookie = cookie;\r\n\t}\r\n\tcontext.store.dispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n\t\ttype: LOAD_MY_INFO_REQUEST,\r\n\t});\r\n\tcontext.store.dispatch({\r\n\t\ttype: LOAD_POSTS_REQUEST,\r\n\t});\r\n\t// request 가 success 로 바뀌기까지 기다려주기 위한 장치\r\n\tcontext.store.dispatch(END)\r\n\tawait context.store.sagaTask.toPromise()\r\n\tconsole.log('context :: ', context)\r\n})\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}