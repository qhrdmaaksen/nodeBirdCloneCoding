{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\hashtag\\\\[tag].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n// hashtag/[tag].js\nimport { useRouter } from \"next/router\";\nimport { LOAD_HASHTAG_POSTS_REQUEST, LOAD_POSTS_REQUEST } from '../../reducers/post';\nimport { getStaticProps } from \"../about\";\nimport AppLayout from '../../component/AppLayout';\nimport PostCard from \"../../component/PostCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Head from \"next/head\";\nimport { useEffect } from \"react\";\n\nvar Hashtag = function Hashtag() {\n  _s();\n\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var tag = router.query.tag; // loadPostsLoading 은 loadHashtagPostsLoading 이지만 reducer 에서 같이 쓰기로 했기에 loadPostsLoading\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePosts = _useSelector.hasMorePosts,\n      loadPostsLoading = _useSelector.loadPostsLoading; // 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\n\n  /*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n  \t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\n\n\n  useEffect(function () {\n    var onScroll = function onScroll() {\n      // (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\n          dispatch({\n            // 다 내리면 그때 새로운 것 로딩\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            // 마지막 게시글의 id\n            data: tag\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, tag, loadPostsLoading]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }\n  }, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    });\n  }));\n};\n/*getServerSideProps&getStaticProps 안의 context 에서는 context.params.id&context.query.id 하면\r\nuseRouter 에 똑같이 접근 할 수 있다*/\n\n\n_s(Hashtag, \"C+PI+x+ePCkWhwbFQvqkYBKQelo=\", false, function () {\n  return [useDispatch, useRouter, useSelector];\n});\n\n_c = Hashtag;\nexport var __N_SSP = true;\nexport default Hashtag;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hashtag\");","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/pages/hashtag/[tag].js"],"names":["useRouter","LOAD_HASHTAG_POSTS_REQUEST","LOAD_POSTS_REQUEST","getStaticProps","AppLayout","PostCard","useDispatch","useSelector","Head","useEffect","Hashtag","dispatch","router","tag","query","state","post","mainPosts","hasMorePosts","loadPostsLoading","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","data","addEventListener","removeEventListener","map","c"],"mappings":";;;;;;AAAA;AAEA,SAAQA,SAAR,QAAwB,aAAxB;AAKA,SAAQC,0BAAR,EAAoCC,kBAApC,QAA6D,qBAA7D;AACA,SAAQC,cAAR,QAA6B,UAA7B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,SAAR,QAAwB,OAAxB;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AACrB,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,MAAMM,MAAM,GAAGZ,SAAS,EAAxB;AACA,MAAOa,GAAP,GAAcD,MAAM,CAACE,KAArB,CAAOD,GAAP,CAHqB,CAIrB;;AACA,qBAAqDN,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAhE;AAAA,MAAOC,SAAP,gBAAOA,SAAP;AAAA,MAAkBC,YAAlB,gBAAkBA,YAAlB;AAAA,MAAgCC,gBAAhC,gBAAgCA,gBAAhC,CALqB,CAOrB;;AACA;AACD;;;AACCV,EAAAA,SAAS,CAAC,YAAM;AACf,QAAMW,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AACA,UAAIL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACzG,YAAIV,YAAY,IAAI,CAACC,gBAArB,EAAuC;AAAE;AACxCR,UAAAA,QAAQ,CAAC;AAAE;AACVkB,YAAAA,IAAI,EAAE5B,0BADE;AAER6B,YAAAA,MAAM,EAAEb,SAAS,CAACA,SAAS,CAACc,MAAV,GAAmB,CAApB,CAAT,IAAkCd,SAAS,CAACA,SAAS,CAACc,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAFlE;AAEsE;AAC9EC,YAAAA,IAAI,EAAEpB;AAHE,WAAD,CAAR;AAKA;AACD;AACD,KAZD;;AAaAU,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCd,QAAlC;AACA,WAAO,YAAM;AACZG,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCf,QAArC;AACA,KAFD;AAGA,GAlBQ,EAkBN,CAACH,SAAS,CAACc,MAAX,EAAmBb,YAAnB,EAAiCL,GAAjC,EAAsCM,gBAAtC,CAlBM,CAAT;AAoBA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEF,SAAS,CAACmB,GAAV,CAAc,UAACC,CAAD;AAAA,WACb,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACL,EAAjB;AAAqB,MAAA,IAAI,EAAEK,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CADF,CADF;AAOA,CArCD;AAuCA;AACA;;;GAxCM3B,O;UACYJ,W,EACFN,S,EAGsCO,W;;;KALhDG,O;;AA6DN,eAAeA,OAAf","sourcesContent":["// hashtag/[tag].js\r\n\r\nimport {useRouter} from \"next/router\";\r\nimport wrapper from \"../../store/configureStore\";\r\nimport axios from 'axios'\r\nimport {END} from 'redux-saga'\r\nimport {LOAD_MY_INFO_REQUEST} from \"../../reducers/user\";\r\nimport {LOAD_HASHTAG_POSTS_REQUEST, LOAD_POSTS_REQUEST} from '../../reducers/post'\r\nimport {getStaticProps} from \"../about\";\r\nimport AppLayout from '../../component/AppLayout'\r\nimport PostCard from \"../../component/PostCard\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Head from \"next/head\";\r\nimport {useEffect} from \"react\";\r\n\r\n\r\nconst Hashtag = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst router = useRouter()\r\n\tconst {tag} = router.query\r\n\t// loadPostsLoading 은 loadHashtagPostsLoading 이지만 reducer 에서 같이 쓰기로 했기에 loadPostsLoading\r\n\tconst {mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post)\r\n\r\n\t// 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\r\n\t/*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n\t\t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\r\n\tuseEffect(() => {\r\n\t\tconst onScroll = () => {\r\n\t\t\t// (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\r\n\t\t\tconsole.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n\t\t\tif (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n\t\t\t\tif (hasMorePosts && !loadPostsLoading) { // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\r\n\t\t\t\t\tdispatch({ // 다 내리면 그때 새로운 것 로딩\r\n\t\t\t\t\t\ttype: LOAD_HASHTAG_POSTS_REQUEST,\r\n\t\t\t\t\t\tlastId: mainPosts[mainPosts.length - 1]&& mainPosts[mainPosts.length - 1].id, // 마지막 게시글의 id\r\n\t\t\t\t\t\tdata: tag,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\twindow.addEventListener('scroll', onScroll);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('scroll', onScroll);\r\n\t\t};\r\n\t}, [mainPosts.length, hasMorePosts, tag, loadPostsLoading]);\r\n\r\n\treturn (\r\n\t\t\t<AppLayout>\r\n\t\t\t\t{mainPosts.map((c) => (\r\n\t\t\t\t\t\t<PostCard key={c.id} post={c} />\r\n\t\t\t\t))}\r\n\t\t\t</AppLayout>\r\n\t);\r\n};\r\n\r\n/*getServerSideProps&getStaticProps 안의 context 에서는 context.params.id&context.query.id 하면\r\nuseRouter 에 똑같이 접근 할 수 있다*/\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n\tconsole.log(context)\r\n\tconst cookie = context.req ? context.req.headers.cookie : '';\r\n\tconsole.log('dynamic routing Post getServerSideProps Start ::')\r\n\taxios.defaults.headers.Cookie = ''\r\n\tif (context.req && cookie) {\r\n\t\taxios.defaults.headers.Cookie = cookie\r\n\t}\r\n\tcontext.store.dispatch({ // 내 정보 요청\r\n\t\ttype: LOAD_MY_INFO_REQUEST,\r\n\t})\r\n\tcontext.store.dispatch({ // 단일 게시글 요청\r\n\t\ttype: LOAD_HASHTAG_POSTS_REQUEST,\r\n\t\tdata: context.params.tag, //\r\n\t})\r\n\tcontext.store.dispatch(END)\r\n\tawait context.store.sagaTask.toPromise()\r\n\treturn { props : {}}\r\n})\r\n\r\nexport default Hashtag"]},"metadata":{},"sourceType":"module"}