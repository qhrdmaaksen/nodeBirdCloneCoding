{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nexport const initialState = {\n  loadMyInfoLoading: false,\n  // 유저 정보 보기 시도중일땐 로딩중 띄울거임\n  loadMyInfoDone: false,\n  // 유저 정보 보기 됨\n  loadMyInfoError: null,\n  // 유저 정보 보기중일때 에러 없앰\n  followLoading: false,\n  // 팔로우 시도중일땐 로딩중 띄울거임\n  followDone: false,\n  // 팔로우 됨\n  followError: null,\n  // 팔로우중일때 에러 없앰\n  unfollowLoading: false,\n  // 언팔로우 시도중일땐 로딩중 띄울거임\n  unfollowDone: false,\n  // 언팔로우 됨\n  unfollowError: null,\n  // 팔로우중일때 에러 없앰\n  logInLoading: false,\n  // 로그인 시도중일땐 로딩중 띄울거임\n  logInDone: false,\n  // 로그인 됨\n  logInError: null,\n  // 로딩중일때 에러 없앰\n  logOutLoading: false,\n  // 로그아웃 시도중\n  logOutDone: false,\n  // 로그아웃 완료\n  logOutError: null,\n  signUpLoading: false,\n  // 회원가입 로딩중\n  signUpDone: false,\n  // 회원 가입 완료\n  signUpError: null,\n  changeNicknameLoading: false,\n  // 닉네임 변경 로딩중\n  changeNicknameDone: false,\n  // 닉네임 변경 완료\n  changeNicknameError: null,\n  me: null,\n  signUpData: {},\n  // 회원 가입 데이터\n  loginData: {}\n}; // 로그인 액션 생성기 thunk\n// export const loginAction = (data) => { // 함수를 리턴하는 비동기 액션 크리에이터가 추가\n// \treturn (dispatch, getState) => {\n// \t\tconst state = getState()\n// \t\tdispatch(loginRequestAction())\n// \t\taxios.post('/api/login')\n// \t\t\t\t.then((res) => {\n// \t\t\t\t\tdispatch(loginSuccessAction(res.data))\n// \t\t\t\t})\n// \t\t\t\t.catch((err) => {\n// \t\t\t\t\tdispatch(loginFailureAction(err))\n// \t\t\t\t})\n// \t}\n// }\n// actions\n\nexport const LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST';\nexport const LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS';\nexport const LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport const CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport const CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE';\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'; // 유저 리듀서의 상태를 바꿀수있는 액션 생성\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\n\nconst dummyUser = data => _objectSpread(_objectSpread({}, data), {}, {\n  nickname: '비타민',\n  id: 1,\n  Posts: [{\n    id: 1\n  }],\n  Followings: [{\n    nickname: '외노'\n  }, {\n    nickname: '음메'\n  }, {\n    nickname: '썽'\n  }, {\n    nickname: '오댕'\n  }, {\n    nickname: '만뽀'\n  }],\n  Followers: [{\n    nickname: '까매'\n  }, {\n    nickname: '만두'\n  }, {\n    nickname: '보챙'\n  }, {\n    nickname: '뒷가'\n  }, {\n    nickname: '야덩'\n  }]\n});\n\nexport const loginRequestAction = data => {\n  return {\n    type: LOG_IN_REQUEST,\n    data\n  };\n}; // 로그아웃 액션 생성기 thunk\n// export const logoutAction = (data) => {\n// \treturn (dispatch) => {\n// \t\taxios.post('/api/logout')\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(logoutSuccessAction())\n// \t\t\t\t})\n// \t\t\t\t.catch(() => {\n// \t\t\t\t\tdispatch(logoutFailureAction())\n// \t\t\t\t})\n// \t}\n// }\n\nexport const logoutRequestAction = () => ({\n  type: LOG_OUT_REQUEST\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_MY_INFO_REQUEST:\n      console.log('reducer myInfo execute'); // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n\n      draft.loadMyInfoLoading = true;\n      draft.loadMyInfoError = null; // 로딩 중일때는 에러 없앰\n\n      draft.loadMyInfoDone = false;\n      break;\n\n    case LOAD_MY_INFO_SUCCESS:\n      draft.loadMyInfoLoading = false;\n      draft.loadMyInfoDone = true; //draft.me = dummyUser(action.data)\n\n      draft.me.Followings.push({\n        id: action.data\n      });\n      break;\n\n    case LOAD_MY_INFO_FAILURE:\n      console.error('loadMyInfoFail : ' + action.error);\n      draft.loadMyInfoLoading = false;\n      draft.loadMyInfoError = action.error;\n      break;\n\n    case FOLLOW_REQUEST:\n      console.log('reducer follow'); // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n\n      draft.followLoading = true;\n      draft.followError = null; // 로딩 중일때는 에러 없앰\n\n      draft.followDone = false;\n      break;\n\n    case FOLLOW_SUCCESS:\n      draft.followLoading = false;\n      draft.followDone = true; //draft.me = dummyUser(action.data)\n\n      draft.me.Followings.push({\n        id: action.data\n      });\n      break;\n\n    case FOLLOW_FAILURE:\n      console.error('followFail : ' + action.error);\n      draft.followLoading = false;\n      draft.followError = action.error;\n      break;\n\n    case UNFOLLOW_REQUEST:\n      console.log('reducer follow'); // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n\n      draft.unfollowLoading = true;\n      draft.unfollowError = null; // 로딩 중일때는 에러 없앰\n\n      draft.unfollowDone = false;\n      break;\n\n    case UNFOLLOW_SUCCESS:\n      draft.unfollowLoading = false;\n      draft.unfollowDone = true; //draft.me = dummyUser(action.data)\n      // 언팔로우 한 사람만 빠지게\n\n      draft.me.Followings = draft.me.Followings.filter(v => v.id !== action.data);\n      break;\n\n    case UNFOLLOW_FAILURE:\n      console.error('unfollowFail : ' + action.error);\n      draft.unfollowLoading = false;\n      draft.unfollowError = action.error;\n      break;\n\n    case LOG_IN_REQUEST:\n      console.log('reducer login');\n      draft.logInLoading = true;\n      draft.logInError = null;\n      draft.logInDone = false;\n      break;\n\n    case LOG_IN_SUCCESS:\n      draft.logInLoading = false;\n      draft.logInDone = true; //draft.me = dummyUser(action.data) front\n\n      draft.me = action.data; // back\n\n      break;\n\n    case LOG_IN_FAILURE:\n      console.error('loginFail : ' + action.error);\n      draft.logInLoading = false;\n      draft.logInError = action.error;\n      break;\n\n    case LOG_OUT_REQUEST:\n      draft.logOutLoading = true;\n      draft.logOutDone = false;\n      draft.logOutError = null;\n      break;\n\n    case LOG_OUT_SUCCESS:\n      draft.logOutLoading = false;\n      draft.logOutDone = true;\n      draft.me = null;\n      break;\n\n    case LOG_OUT_FAILURE:\n      console.error('logoutFail : ' + action.error);\n      draft.logOutLoading = false;\n      draft.logOutError = action.error;\n      break;\n\n    case SIGN_UP_REQUEST:\n      draft.signUpLoading = true;\n      draft.signUpDone = false;\n      draft.signUpError = null;\n      break;\n\n    case SIGN_UP_SUCCESS:\n      draft.signUpLoading = false;\n      draft.signUpDone = true;\n      break;\n\n    case SIGN_UP_FAILURE:\n      console.error('signUpFail : ' + action.error);\n      draft.signUpLoading = false;\n      draft.signUpError = action.error;\n      break;\n\n    case CHANGE_NICKNAME_REQUEST:\n      draft.changeNicknameLoading = true;\n      draft.changeNicknameDone = false;\n      draft.changeNicknameError = null;\n      break;\n\n    case CHANGE_NICKNAME_SUCCESS:\n      draft.changeNicknameLoading = false;\n      draft.changeNicknameDone = true;\n      break;\n\n    case CHANGE_NICKNAME_FAILURE:\n      console.error('changeNickFail : ' + action.error);\n      draft.changeNicknameLoading = false;\n      draft.changeNicknameError = action.error;\n      break;\n\n    case ADD_POST_TO_ME:\n      // 게시글을 쓰면 게시글 아이디가 여기로 들어와서 하나가 추가된다\n      draft.me.Posts.unshift({\n        id: action.data\n      });\n      break;\n    // return {\n    // \t...state,\n    // \tme: {\n    // \t\t...state.me,\n    // \t\tPosts: [{id: action.data}, ...state.me.Posts],\n    // \t}\n    // }\n\n    case REMOVE_POST_OF_ME:\n      draft.me.Posts = draft.me.Posts.filter(v => v.id !== action.data);\n      break;\n    // return { // 불변성을 지키며 게시글을 지워야한다.\n    // \t...state,\n    // \tme: {\n    // \t\t...state.me,\n    // \t\tPosts: state.me.Posts.filter((v) => v.id !== action.data)\n    // \t}\n    // }\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/user.js"],"names":["produce","initialState","loadMyInfoLoading","loadMyInfoDone","loadMyInfoError","followLoading","followDone","followError","unfollowLoading","unfollowDone","unfollowError","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","changeNicknameLoading","changeNicknameDone","changeNicknameError","me","signUpData","loginData","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","dummyUser","data","nickname","id","Posts","Followings","Followers","loginRequestAction","type","logoutRequestAction","reducer","state","action","draft","console","log","push","error","filter","v","unshift"],"mappings":"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","sourcesContent":["import produce from 'immer'\r\n\r\nexport const initialState = {\r\n\tloadMyInfoLoading: false, // 유저 정보 보기 시도중일땐 로딩중 띄울거임\r\n\tloadMyInfoDone: false, // 유저 정보 보기 됨\r\n\tloadMyInfoError: null, // 유저 정보 보기중일때 에러 없앰\r\n\tfollowLoading: false, // 팔로우 시도중일땐 로딩중 띄울거임\r\n\tfollowDone: false, // 팔로우 됨\r\n\tfollowError: null, // 팔로우중일때 에러 없앰\r\n\tunfollowLoading: false, // 언팔로우 시도중일땐 로딩중 띄울거임\r\n\tunfollowDone: false, // 언팔로우 됨\r\n\tunfollowError: null, // 팔로우중일때 에러 없앰\r\n\tlogInLoading: false, // 로그인 시도중일땐 로딩중 띄울거임\r\n\tlogInDone: false, // 로그인 됨\r\n\tlogInError: null, // 로딩중일때 에러 없앰\r\n\tlogOutLoading: false, // 로그아웃 시도중\r\n\tlogOutDone: false, // 로그아웃 완료\r\n\tlogOutError: null,\r\n\tsignUpLoading: false, // 회원가입 로딩중\r\n\tsignUpDone: false, // 회원 가입 완료\r\n\tsignUpError: null,\r\n\tchangeNicknameLoading: false, // 닉네임 변경 로딩중\r\n\tchangeNicknameDone: false, // 닉네임 변경 완료\r\n\tchangeNicknameError: null,\r\n\tme: null,\r\n\tsignUpData: {}, // 회원 가입 데이터\r\n\tloginData: {},\r\n}\r\n\r\n// 로그인 액션 생성기 thunk\r\n// export const loginAction = (data) => { // 함수를 리턴하는 비동기 액션 크리에이터가 추가\r\n// \treturn (dispatch, getState) => {\r\n// \t\tconst state = getState()\r\n// \t\tdispatch(loginRequestAction())\r\n// \t\taxios.post('/api/login')\r\n// \t\t\t\t.then((res) => {\r\n// \t\t\t\t\tdispatch(loginSuccessAction(res.data))\r\n// \t\t\t\t})\r\n// \t\t\t\t.catch((err) => {\r\n// \t\t\t\t\tdispatch(loginFailureAction(err))\r\n// \t\t\t\t})\r\n// \t}\r\n// }\r\n\r\n// actions\r\nexport const LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST'\r\nexport const LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS'\r\nexport const LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE'\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST'\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'\r\n\r\nexport const CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST'\r\nexport const CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS'\r\nexport const CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE'\r\n\r\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST'\r\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS'\r\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE'\r\n\r\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST'\r\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS'\r\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'\r\n\r\n// 유저 리듀서의 상태를 바꿀수있는 액션 생성\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME'\r\n\r\nconst dummyUser = (data) => ({\r\n\t...data,\r\n\tnickname: '비타민',\r\n\tid: 1,\r\n\tPosts: [{id: 1}],\r\n\tFollowings: [{nickname: '외노'}, {nickname: '음메'}, {nickname: '썽'}, {nickname: '오댕'}, {nickname: '만뽀'}],\r\n\tFollowers: [{nickname: '까매'}, {nickname: '만두'}, {nickname: '보챙'}, {nickname: '뒷가'}, {nickname: '야덩'}],\r\n})\r\n\r\nexport const loginRequestAction = (data) => {\r\n\treturn {\r\n\t\ttype: LOG_IN_REQUEST,\r\n\t\tdata,\r\n\t}\r\n}\r\n// 로그아웃 액션 생성기 thunk\r\n// export const logoutAction = (data) => {\r\n// \treturn (dispatch) => {\r\n// \t\taxios.post('/api/logout')\r\n// \t\t\t\t.then(() => {\r\n// \t\t\t\t\tdispatch(logoutSuccessAction())\r\n// \t\t\t\t})\r\n// \t\t\t\t.catch(() => {\r\n// \t\t\t\t\tdispatch(logoutFailureAction())\r\n// \t\t\t\t})\r\n// \t}\r\n// }\r\nexport const logoutRequestAction = () => ({\r\n\t\ttype: LOG_OUT_REQUEST,\r\n})\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n\tswitch (action.type) {\r\n\t\tcase LOAD_MY_INFO_REQUEST:\r\n\t\t\tconsole.log('reducer myInfo execute')\r\n\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\r\n\t\t\tdraft.loadMyInfoLoading = true\r\n\t\t\tdraft.loadMyInfoError = null // 로딩 중일때는 에러 없앰\r\n\t\t\tdraft.loadMyInfoDone = false\r\n\t\t\tbreak;\r\n\t\tcase LOAD_MY_INFO_SUCCESS:\r\n\t\t\tdraft.loadMyInfoLoading = false\r\n\t\t\tdraft.loadMyInfoDone = true\r\n\t\t\t//draft.me = dummyUser(action.data)\r\n\t\t\tdraft.me.Followings.push({id: action.data})\r\n\t\t\tbreak;\r\n\t\tcase LOAD_MY_INFO_FAILURE:\r\n\t\t\tconsole.error('loadMyInfoFail : ' + action.error)\r\n\t\t\tdraft.loadMyInfoLoading = false\r\n\t\t\tdraft.loadMyInfoError = action.error\r\n\t\t\tbreak;\r\n\t\tcase FOLLOW_REQUEST:\r\n\t\t\tconsole.log('reducer follow')\r\n\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\r\n\t\t\tdraft.followLoading = true\r\n\t\t\tdraft.followError = null // 로딩 중일때는 에러 없앰\r\n\t\t\tdraft.followDone = false\r\n\t\t\tbreak;\r\n\t\tcase FOLLOW_SUCCESS:\r\n\t\t\tdraft.followLoading = false\r\n\t\t\tdraft.followDone = true\r\n\t\t\t//draft.me = dummyUser(action.data)\r\n\t\t\tdraft.me.Followings.push({id: action.data})\r\n\t\t\tbreak;\r\n\t\tcase FOLLOW_FAILURE:\r\n\t\t\tconsole.error('followFail : ' + action.error)\r\n\t\t\tdraft.followLoading = false\r\n\t\t\tdraft.followError = action.error\r\n\t\t\tbreak;\r\n\t\tcase UNFOLLOW_REQUEST:\r\n\t\t\tconsole.log('reducer follow')\r\n\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\r\n\t\t\tdraft.unfollowLoading = true\r\n\t\t\tdraft.unfollowError = null // 로딩 중일때는 에러 없앰\r\n\t\t\tdraft.unfollowDone = false\r\n\t\t\tbreak;\r\n\t\tcase UNFOLLOW_SUCCESS:\r\n\t\t\tdraft.unfollowLoading = false\r\n\t\t\tdraft.unfollowDone = true\r\n\t\t\t//draft.me = dummyUser(action.data)\r\n\t\t\t// 언팔로우 한 사람만 빠지게\r\n\t\t\tdraft.me.Followings = draft.me.Followings.filter((v) => v.id !== action.data)\r\n\t\t\tbreak;\r\n\t\tcase UNFOLLOW_FAILURE:\r\n\t\t\tconsole.error('unfollowFail : ' + action.error)\r\n\t\t\tdraft.unfollowLoading = false\r\n\t\t\tdraft.unfollowError = action.error\r\n\t\t\tbreak;\r\n\t\tcase LOG_IN_REQUEST:\r\n\t\t\tconsole.log('reducer login')\r\n\t\t\tdraft.logInLoading = true\r\n\t\t\tdraft.logInError = null\r\n\t\t\tdraft.logInDone = false\r\n\t\t\tbreak;\r\n\t\tcase LOG_IN_SUCCESS:\r\n\t\t\tdraft.logInLoading = false\r\n\t\t\tdraft.logInDone = true\r\n\t\t\t//draft.me = dummyUser(action.data) front\r\n\t\t\tdraft.me = action.data // back\r\n\t\t\tbreak;\r\n\t\tcase LOG_IN_FAILURE:\r\n\t\t\tconsole.error('loginFail : ' + action.error)\r\n\t\t\tdraft.logInLoading = false\r\n\t\t\tdraft.logInError = action.error\r\n\t\t\tbreak;\r\n\t\tcase LOG_OUT_REQUEST:\r\n\t\t\tdraft.logOutLoading = true\r\n\t\t\tdraft.logOutDone = false\r\n\t\t\tdraft.logOutError = null\r\n\t\t\tbreak;\r\n\t\tcase LOG_OUT_SUCCESS:\r\n\t\t\tdraft.logOutLoading = false\r\n\t\t\tdraft.logOutDone = true\r\n\t\t\tdraft.me = null\r\n\t\t\tbreak;\r\n\t\tcase LOG_OUT_FAILURE:\r\n\t\t\tconsole.error('logoutFail : ' + action.error)\r\n\t\t\tdraft.logOutLoading = false\r\n\t\t\tdraft.logOutError = action.error\r\n\t\t\tbreak\r\n\t\tcase SIGN_UP_REQUEST:\r\n\t\t\tdraft.signUpLoading = true\r\n\t\t\tdraft.signUpDone = false\r\n\t\t\tdraft.signUpError = null\r\n\t\t\tbreak;\r\n\t\tcase SIGN_UP_SUCCESS:\r\n\t\t\tdraft.signUpLoading = false\r\n\t\t\tdraft.signUpDone = true\r\n\t\t\tbreak\r\n\t\tcase SIGN_UP_FAILURE:\r\n\t\t\tconsole.error('signUpFail : ' + action.error)\r\n\t\t\tdraft.signUpLoading = false\r\n\t\t\tdraft.signUpError = action.error\r\n\t\t\tbreak\r\n\t\tcase CHANGE_NICKNAME_REQUEST:\r\n\t\t\tdraft.changeNicknameLoading = true\r\n\t\t\tdraft.changeNicknameDone = false\r\n\t\t\tdraft.changeNicknameError = null\r\n\t\t\tbreak\r\n\t\tcase CHANGE_NICKNAME_SUCCESS:\r\n\t\t\tdraft.changeNicknameLoading = false\r\n\t\t\tdraft.changeNicknameDone = true\r\n\t\t\tbreak;\r\n\t\tcase CHANGE_NICKNAME_FAILURE:\r\n\t\t\tconsole.error('changeNickFail : ' + action.error)\r\n\t\t\tdraft.changeNicknameLoading = false\r\n\t\t\tdraft.changeNicknameError = action.error\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_TO_ME: // 게시글을 쓰면 게시글 아이디가 여기로 들어와서 하나가 추가된다\r\n\t\t\tdraft.me.Posts.unshift({id: action.data})\r\n\t\t\tbreak\r\n\t\t\t// return {\r\n\t\t\t// \t...state,\r\n\t\t\t// \tme: {\r\n\t\t\t// \t\t...state.me,\r\n\t\t\t// \t\tPosts: [{id: action.data}, ...state.me.Posts],\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\tcase REMOVE_POST_OF_ME:\r\n\t\t\tdraft.me.Posts = draft.me.Posts.filter((v) => v.id !== action.data)\r\n\t\t\tbreak;\r\n\t\t\t// return { // 불변성을 지키며 게시글을 지워야한다.\r\n\t\t\t// \t...state,\r\n\t\t\t// \tme: {\r\n\t\t\t// \t\t...state.me,\r\n\t\t\t// \t\tPosts: state.me.Posts.filter((v) => v.id !== action.data)\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n})\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}