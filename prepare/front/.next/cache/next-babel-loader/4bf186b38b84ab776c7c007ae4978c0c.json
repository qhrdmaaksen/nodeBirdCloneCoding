{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnLikePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, //generateDummyPost, front\nLOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; //import shortId from \"shortid\"; front\n\nfunction loadPostsAPI(data) {\n  // 3 전달되면\n  //return axios.get('/api/posts', data) // 4 데이터가 간다 front\n  return axios.get('/posts', data); // 4 데이터가 간다\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('Sagas:: loadPosts 실행중', action.data);\n          _context.next = 4;\n          return call(loadPostsAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          // 2 데이터를 꺼내서\n          //yield delay(1000) front\n          console.log('loadPosts 완료:: ', result);\n          _context.next = 8;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            // data: generateDummyPost(10), // data 10 개 front\n            data: result.data\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('loadPosts : ', _context.t0);\n          _context.next = 15;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  //return axios.post('/api/post', data) // 4 데이터가 간다 front\n  // data content 가 req.body.content 로 백엔드에 변환\n  return axios.post('/post', {\n    content: data\n  }); // 4 데이터가 간다\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          // 2 데이터를 꺼내서\n          //yield delay(1000) front\n          //const id = shortId.generate() // front 의 더미 아디\n          console.log('addPost 실행중::', result);\n          _context2.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n\n            /*data: { // front dummy\r\n            \tid,\r\n            \tcontent: action.data,\r\n            }*/\n            data: result.data // back, 실제로 게시글이 들어있음\n\n          });\n\n        case 7:\n          console.log('addPost 완료::', result);\n          _context2.next = 10;\n          return put({\n            type: ADD_POST_TO_ME,\n            // data: id, // front dummy\n            data: result.data.id // back\n\n          });\n\n        case 10:\n          _context2.next = 17;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error('addPost error:: ', _context2.t0);\n          _context2.next = 17;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 12]]);\n}\n\nfunction removePostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data // 어떤 게시물을 지웠는지 id 가있을것\n\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('removePost : ', _context3.t0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  //주소는 백엔드와 프론트의 약속일뿐 정해진건없다\n  //return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // 4 데이터가 간다 // POST /post/1/comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          // 2 데이터를 꺼내서 //back\n          //yield delay(1000) front\n          console.log('addComment 실행중 ::', action.data);\n          _context4.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            //data: action.data // front\n            data: result.data\n          });\n\n        case 7:\n          console.log('addComment 완료::', result);\n          _context4.next = 15;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error('addComment error:: ', _context4.t0);\n          _context4.next = 15;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 10]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchUnLikePost() {\n  return _regeneratorRuntime.wrap(function watchUnLikePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([fork(watchLikePost), fork(watchUnLikePost), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["loadPosts","addPost","removePost","addComment","watchLikePost","watchUnLikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","call","delay","fork","put","takeLatest","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","action","console","log","result","type","error","response","addPostAPI","post","content","id","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import {all, call, delay, fork, put, takeLatest, throttle} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n\t//generateDummyPost, front\r\n\tLOAD_POSTS_FAILURE,\r\n\tLOAD_POSTS_REQUEST,\r\n\tLOAD_POSTS_SUCCESS,\r\n\tREMOVE_POST_FAILURE,\r\n\tREMOVE_POST_REQUEST,\r\n\tREMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport {\r\n\tADD_POST_TO_ME,\r\n\tREMOVE_POST_OF_ME,\r\n} from \"../reducers/user\";\r\n\r\n//import shortId from \"shortid\"; front\r\n\r\n\r\nfunction loadPostsAPI(data) { // 3 전달되면\r\n\t//return axios.get('/api/posts', data) // 4 데이터가 간다 front\r\n\treturn axios.get('/posts', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* loadPosts(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconsole.log('Sagas:: loadPosts 실행중', action.data)\r\n\t\tconst result = yield call(loadPostsAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('loadPosts 완료:: ', result)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_SUCCESS,\r\n\t\t\t// data: generateDummyPost(10), // data 10 개 front\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('loadPosts : ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\t//return axios.post('/api/post', data) // 4 데이터가 간다 front\r\n\t// data content 가 req.body.content 로 백엔드에 변환\r\n\treturn axios.post('/post', {content: data}) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\t//const id = shortId.generate() // front 의 더미 아디\r\n\t\tconsole.log('addPost 실행중::', result)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\t/*data: { // front dummy\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: action.data,\r\n\t\t\t}*/\r\n\t\t\tdata: result.data, // back, 실제로 게시글이 들어있음\r\n\t\t})\r\n\t\tconsole.log('addPost 완료::', result)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\t// data: id, // front dummy\r\n\t\t\tdata: result.data.id // back\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addPost error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction removePostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* removePost(action) { // 1 액션에서\r\n\ttry { // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\r\n\t\t//const result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_SUCCESS,\r\n\t\t\tdata: action.data, // 어떤 게시물을 지웠는지 id 가있을것\r\n\t\t})\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_OF_ME,\r\n\t\t\tdata: action.data,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('removePost : ', err)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\t//주소는 백엔드와 프론트의 약속일뿐 정해진건없다\r\n\t//return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\r\n\treturn axios.post(`/post/${data.postId}/comment`, data) // 4 데이터가 간다 // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서 //back\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('addComment 실행중 ::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\t//data: action.data // front\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('addComment 완료::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('addComment error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLikePost() {\r\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nfunction* watchUnLikePost() {\r\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchLikePost),\r\n\t\tfork(watchUnLikePost),\r\n\t\tfork(watchLoadPosts),\r\n\t\tfork(watchAddPost),\r\n\t\tfork(watchRemovePost),\r\n\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}