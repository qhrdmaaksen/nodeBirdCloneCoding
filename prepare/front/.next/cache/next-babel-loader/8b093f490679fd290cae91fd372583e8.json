{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react'; // Next 에서는 이 구문이 필요가 없다.\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../component/AppLayout';\nimport PostForm from '../component/PostForm';\nimport PostCard from \"../component/PostCard\";\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError;\n\n  useEffect(function () {\n    // retweet 실패 시 alert 출력\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  /* CSR\r\n  useEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n  \tdispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n  \t\ttype: LOAD_MY_INFO_REQUEST,\r\n  \t});\r\n  \tdispatch({\r\n  \t\ttype: LOAD_POSTS_REQUEST,\r\n  \t});\r\n  }, []);*/\n  // 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\n\n  /*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n  \t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\n\n  useEffect(function () {\n    function onScroll() {\n      // (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 마지막 게시글의 id\n\n          dispatch({\n            // 다 내리면 그때 새로운 것 로딩\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, null, me && __jsx(PostForm, null), \" \", mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post\n    });\n  }));\n}; //  Home 보다 먼저 실행이 된다 ( browser 가 아닌 front server 쪽에서 실행) (SSR)\n// context 는 요청/응답과 SSR에 관련된 정보가 들어있는 객체이고요\n\n/*(브라우저) 쿠키 프론트서버로 전달 ->  (프론트서버) 전달받은 쿠키 저장해서\r\n백엔드 서버로 요청 -> 백엔드서버 쿠키에 따른 데이터 응답 -> 프론트서버\r\n데이터와 컴포넌트 조합 -> 브라우저*/\n\n\nexport var __N_SSP = true;\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}