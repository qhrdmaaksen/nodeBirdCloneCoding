{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, take, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  // gererator 아님\n  return axios.post('/api/login', data); // 실제 서버에 로그인 요청을 보냄\n} // 테스트 코드\n\n\nvar l = logIn({\n  type: 'LOG_IN_REQUEST',\n  data: {\n    id: 'rlaalsdn8@naver.com'\n  }\n});\nl.next();\nl.next(); /////////////////\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data // (성공 결과 담김)\n\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            // put 은 dispatch 라고 생각하자\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data // (실패 결과 담김)\n\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data // (성공 결과 담김)\n\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            // put 은 dispatch 라고 생각하자\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data // (실패 결과 담김)\n\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return take('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return take('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([// ALL 배열안에 한방에 실행해줌\n          fork(watchLogIn), // fork 는 (함수)실행\n          fork(watchLogOut), // call 이랑은 다르다.\n          fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/index.js"],"names":["logIn","logOut","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","take","call","put","axios","logInAPI","data","post","l","type","id","next","action","result","response","logOutAPI","addPostAPI"],"mappings":"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","sourcesContent":["import {all, fork, take, call, put} from 'redux-saga/effects';\r\nimport axios from 'axios'\r\n\r\n\r\nfunction logInAPI(data) { // gererator 아님\r\n\treturn axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄\r\n}\r\n// 테스트 코드\r\nconst l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\r\n\t\tl.next();\r\n\t\tl.next();\r\n/////////////////\r\nfunction* logIn(action) { // login action request 가 action 에 전달\r\n\ttry { // 요청 실패 대비\r\n\t\tconst result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: 'LOG_IN_SUCCESS',\r\n\t\t\tdata: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: 'LOG_IN_FAILURE',\r\n\t\t\tdata: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction logOutAPI() {\r\n\treturn axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n\ttry { // 요청 실패 대비\r\n\t\tconst result = yield call(logOutAPI) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: 'LOG_OUT_SUCCESS',\r\n\t\t\tdata: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: 'LOG_OUT_FAILURE',\r\n\t\t\tdata: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield put({\r\n\t\t\ttype: 'ADD_POST_SUCCESS',\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: 'ADD_POST_FAILURE',\r\n\t\t\tdata: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield take('LOG_IN_REQUEST', logIn) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchLogOut() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield take('LOG_OUT_REQUEST', logOut) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield take('ADD_POST_REQUEST', addPost)\r\n}\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([ // ALL 배열안에 한방에 실행해줌\r\n\t\tfork(watchLogIn), // fork 는 (함수)실행\r\n\t\tfork(watchLogOut),\t// call 이랑은 다르다.\r\n\t\tfork(watchAddPost),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}