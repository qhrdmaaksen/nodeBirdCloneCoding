{"ast":null,"code":"var __jsx = React.createElement;\nimport { Form, Input, Button } from 'antd';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\nimport useInput from \"../hooks/useInput\";\n\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput('');\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      // 게시글이 없다면 게시글 작성 alert\n      return alert('게시글을 작성하세요.');\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p); // req.body.content\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images info :: ', e.target.files); // 이미지에 대한 정보가 담겨있음\n\n    const imageFormData = new FormData(); // form data 를 multipart 형식으로 서버로 보냄\n\n    [].forEach.call(e.target.files, f => {\n      // 배열에 forEach 를 빌려 쓰는 것\n      imageFormData.append('image', f); // image 키랑 f 값\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }, []);\n  return (// post Form\n    __jsx(Form, {\n      style: {\n        margin: '10px 0 20px'\n      },\n      encType: \"multipart/form-data\",\n      onFinish: onSubmit\n    }, __jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n    }), __jsx(\"div\", null, __jsx(\"input\", {\n      type: \"file\",\n      name: \"image\",\n      multiple: true,\n      hidden: true,\n      ref: imageInput,\n      onChange: onChangeImages\n    }), __jsx(Button, {\n      onClick: onClickImageUpload\n    }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n      type: \"primary\",\n      style: {\n        float: 'right'\n      },\n      htmlType: \"submit\"\n    }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", null, imagePaths.map((v, i) => {\n      return (// 이미지 등록을 했을 시, 이미지 경로가 저장되며, 반복문으로 표시해줌\n        __jsx(\"div\", {\n          key: v,\n          style: {\n            display: 'inline-block'\n          }\n        }, __jsx(\"img\", {\n          src: `http://localhost:3065/${v}`,\n          style: {\n            width: '200px'\n          },\n          alt: v\n        }), __jsx(\"div\", null, __jsx(Button, {\n          onClick: onRemoveImage(i)\n        }, \"\\uC81C\\uAC70\")))\n      );\n    })))\n  );\n};\n\nexport default PostForm;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/components/PostForm.js"],"names":["Form","Input","Button","React","useCallback","useEffect","useRef","useState","useSelector","useDispatch","addPost","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","ADD_POST_REQUEST","useInput","PostForm","imagePaths","addPostDone","state","post","dispatch","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","margin","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import {Form, Input, Button} from 'antd'\r\nimport React, {useCallback, useEffect, useRef, useState} from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST} from '../reducers/post'\r\nimport useInput from \"../hooks/useInput\";\r\n\r\nconst PostForm = () => {\r\n\tconst {imagePaths, addPostDone} = useSelector((state) => state.post)\r\n\tconst dispatch = useDispatch()\r\n\tconst [text, onChangeText, setText] = useInput('')\r\n\r\n\tuseEffect(() => {\r\n\t\tif (addPostDone) {\r\n\t\t\tsetText('')\r\n\t\t}\r\n\t}, [addPostDone])\r\n\r\n\tconst onSubmit = useCallback(() => {\r\n\t\tif (!text || !text.trim()) { // 게시글이 없다면 게시글 작성 alert\r\n\t\t\treturn alert('게시글을 작성하세요.')\r\n\t\t}\r\n\t\tconst formData = new FormData();\r\n\t\timagePaths.forEach((p)=>{\r\n\t\t\tformData.append('image', p) // req.body.content\r\n\t\t})\r\n\t\tformData.append('content', text)\r\n\t\treturn dispatch({\r\n\t\t\ttype: ADD_POST_REQUEST,\r\n\t\t\tdata: formData,\r\n\t\t})\r\n\t}, [text, imagePaths])\r\n\r\n\tconst imageInput = useRef()\r\n\tconst onClickImageUpload = useCallback(() => {\r\n\t\timageInput.current.click();\r\n\t}, [imageInput.current])\r\n\r\n\tconst onChangeImages = useCallback(\r\n\t\t\t(e) => {\r\n\t\t\t\tconsole.log('images info :: ', e.target.files) // 이미지에 대한 정보가 담겨있음\r\n\t\t\t\tconst imageFormData = new FormData(); // form data 를 multipart 형식으로 서버로 보냄\r\n\t\t\t\t[].forEach.call(e.target.files, (f) => { // 배열에 forEach 를 빌려 쓰는 것\r\n\t\t\t\t\timageFormData.append('image', f) // image 키랑 f 값\r\n\t\t\t\t})\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPLOAD_IMAGES_REQUEST,\r\n\t\t\t\t\tdata: imageFormData,\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t[],\r\n\t);\r\n\r\n\tconst onRemoveImage = useCallback((index)=>()=>{\r\n\t\tdispatch({\r\n\t\t\ttype: REMOVE_IMAGE,\r\n\t\t\tdata: index,\r\n\t\t})\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t\t// post Form\r\n\t\t\t<Form style={{margin: '10px 0 20px'}} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n\t\t\t\t<Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\"/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type=\"file\" name=\"image\" multiple hidden ref={imageInput}\r\n\t\t\t\t\t\t\t\t onChange={onChangeImages}/>\r\n\t\t\t\t\t<Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n\t\t\t\t\t<Button type=\"primary\" style={{float: 'right'}} htmlType=\"submit\">\r\n\t\t\t\t\t\t짹짹\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{imagePaths.map((v, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t// 이미지 등록을 했을 시, 이미지 경로가 저장되며, 반복문으로 표시해줌\r\n\t\t\t\t\t\t\t\t<div key={v} style={{display: 'inline-block'}}>\r\n\t\t\t\t\t\t\t\t\t<img src={`http://localhost:3065/${v}`} style={{width: '200px'}} alt={v}/>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={onRemoveImage(i)}>제거</Button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</Form>\r\n\t)\r\n}\r\n\r\nexport default PostForm\r\n"]},"metadata":{},"sourceType":"module"}