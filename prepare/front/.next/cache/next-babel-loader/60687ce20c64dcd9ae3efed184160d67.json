{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(singUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  // gererator 아님\n  return axios.post('/api/login', data); // 실제 서버에 로그인 요청을 보냄\n} // 테스트 코드\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\n// \t\tl.next();\n// \t\tl.next();\n/////////////////\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // 요청 실패 대비\n          console.log('saga login');\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data //data: result.data // (성공 결과 담김)\n\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            // put 은 dispatch 라고 생각하자\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data // (실패 결과 담김)\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS //data: result.data // (성공 결과 담김)\n\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            // put 은 dispatch 라고 생각하자\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data // (실패 결과 담김)\n\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signUpAPI() {\n  return axios.signup('/api/signup');\n}\n\nfunction singUp() {\n  return _regeneratorRuntime.wrap(function singUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS // data: result.data\n\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/user.js"],"names":["logIn","logOut","singUp","watchLogIn","watchLogOut","watchSignUp","userSaga","all","delay","fork","put","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","data","post","action","console","log","type","error","response","logOutAPI","signUpAPI","signup","signUp"],"mappings":"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","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tLOG_IN_FAILURE,\r\n\tLOG_IN_REQUEST,\r\n\tLOG_IN_SUCCESS,\r\n\tLOG_OUT_FAILURE,\r\n\tLOG_OUT_REQUEST,\r\n\tLOG_OUT_SUCCESS,\r\n\tSIGN_UP_FAILURE,\r\n\tSIGN_UP_REQUEST,\r\n\tSIGN_UP_SUCCESS,\r\n} from \"../reducers/user\";\r\n\r\n\r\nfunction logInAPI(data) { // gererator 아님\r\n\treturn axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄\r\n}\r\n\r\n// 테스트 코드\r\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\r\n// \t\tl.next();\r\n// \t\tl.next();\r\n/////////////////\r\nfunction* logIn(action) { // login action request 가 action 에 전달\r\n\ttry { // 요청 실패 대비\r\n\t\tconsole.log('saga login')\r\n\t\tyield delay(1000)\r\n\t\t//const result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS,\r\n\t\t\tdata: action.data,\r\n\t\t\t//data: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error(err)\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: LOG_IN_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction logOutAPI() {\r\n\treturn axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n\ttry { // 요청 실패 대비\r\n\t\tyield delay(1000)\r\n\t\t//const result = yield call(logOutAPI) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: LOG_OUT_SUCCESS,\r\n\t\t\t//data: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error(err)\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: LOG_OUT_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction signUpAPI() {\r\n\treturn axios.signup('/api/signup')\r\n}\r\n\r\nfunction* singUp() {\r\n\ttry {\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_SUCCESS,\r\n\t\t\t// data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error(err)\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(LOG_IN_REQUEST, logIn) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchLogOut() {\t// 로그아웃 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(LOG_OUT_REQUEST, logOut) //LOG_OUT_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchSignUp() {\t// 회원가입 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(SIGN_UP_REQUEST, signUp) // SIGN_UP_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchLogOut),\r\n\t\tfork(watchSignUp),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}