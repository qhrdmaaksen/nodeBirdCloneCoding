{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Avatar, Button, Card, Comment, List, Popover } from \"antd\";\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined, HeartTwoTone } from \"@ant-design/icons\";\nimport Link from 'next/link';\nimport moment from 'moment';\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nmoment.locale('ko'); // 한글로 바꾼다\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); //state.user.me && state.user.me.id\n  //\tconst [liked, setLiked] = useState(false) front\n\n  const onLike = useCallback(() => {\n    // 좋아요 클릭\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id // 게시글 아이디\n\n    });\n  }, [id]);\n  const onUnLike = useCallback(() => {\n    // 좋아요 해제 클릭\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id // 게시글 아이디\n\n    });\n  }, [id]);\n  /* front\r\n  const onToggleLike = useCallback(() => {\r\n  \tsetLiked((prev) => !prev)\r\n  }, [])*/\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      // 로그인이 안되어있다면 바로바로 막아주는게 좋다\n      return alert('로그인이 필요합니다!');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id); // 게시글 좋아요 누른 사람중에 내가 있는지\n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }) // 이미지가 한개 이상있을때 포스트 이미지스\n    ,\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), // 리트윗 버튼\n    liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike\n    }) // 하트 버튼\n    : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike\n    }), // 하트 버튼\n    __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment\n    }), // 댓글 버튼\n    __jsx(Popover, {\n      key: \"more\",\n      content: // 더 보기 버튼\n      __jsx(Button.Group, null, id && post.User.id === id ?\n      /*내가 쓴 글이면 수정 삭제 가능*/\n      __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"), \" \")\n    }, __jsx(EllipsisOutlined, null))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null,\n    extra: id && __jsx(FollowButton, {\n      post: post\n    }) // 우측 추가공간,로그인했을경우만보이게\n\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(\"div\", {\n    style: {\n      float: 'right'\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    }) // 특수한 기능을 처리하는 것을 만들기 위해선 따로 컴포넌트로 빼주는게 보기 깔끔하다\n\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      float: 'right'\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar:\n    /*avatar 누르면 그사람이 쓴 글 볼 수있게*/\n    __jsx(Link, {\n      href: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) // 특수한 기능을 처리하는 것을 만들기 위해선 따로 컴포넌트로 빼주는게 보기 깔끔하다\n\n  }))), commentFormOpened && __jsx(\"div\", null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar:\n      /*댓글의 avatar 를 눌러도 그 사람이 쓴 글 볼 수있게*/\n      __jsx(Link, {\n        href: `/user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}