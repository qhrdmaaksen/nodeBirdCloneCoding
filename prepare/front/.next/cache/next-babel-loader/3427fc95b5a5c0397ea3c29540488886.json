{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport { END } from 'redux-saga';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport AppLayout from '../../components/AppLayout';\n\nconst User = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    id\n  } = router.query; // 특정 사용자 아이디 받기\n\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const {\n    userInfo\n  } = useSelector(state => state.user); // 특정 사용자에대한 게시글만 가져오기\n\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            data: id\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\n  return __jsx(AppLayout, null, userInfo && __jsx(Head, null, __jsx(\"title\", null, userInfo.nickname, \" \\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://nodebird.com/favicon.ico\"\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `https://nodebird.com/user/${id}`\n  })), userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  console.log('getState', context.store.getState().post.mainPosts);\n  return {\n    props: {}\n  };\n});\nexport default User;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/pages/user/[id].js"],"names":["React","useEffect","useDispatch","useSelector","Avatar","Card","END","Head","useRouter","axios","LOAD_USER_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","LOAD_USER_REQUEST","PostCard","wrapper","AppLayout","User","dispatch","router","id","query","mainPosts","hasMorePosts","loadPostsLoading","state","post","userInfo","user","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","type","lastId","length","data","addEventListener","removeEventListener","nickname","Posts","Followings","Followers","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","params","sagaTask","toPromise","console","log","getState","props"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Avatar, Card } from 'antd';\r\nimport { END } from 'redux-saga';\r\nimport Head from 'next/head';\r\nimport { useRouter } from 'next/router';\r\n\r\nimport axios from 'axios';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\r\nimport PostCard from '../../components/PostCard';\r\nimport wrapper from '../../store/configureStore';\r\nimport AppLayout from '../../components/AppLayout';\r\n\r\nconst User = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst router = useRouter();\r\n\tconst { id } = router.query; // 특정 사용자 아이디 받기\r\n\tconst { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n\tconst { userInfo } = useSelector((state) => state.user);\r\n\r\n\t// 특정 사용자에대한 게시글만 가져오기\r\n\tuseEffect(() => {\r\n\t\tconst onScroll = () => {\r\n\t\t\tif (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n\t\t\t\tif (hasMorePosts && !loadPostsLoading) {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: LOAD_USER_POSTS_REQUEST,\r\n\t\t\t\t\t\tlastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\r\n\t\t\t\t\t\tdata: id,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\twindow.addEventListener('scroll', onScroll);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('scroll', onScroll);\r\n\t\t};\r\n\t}, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\r\n\r\n\treturn (\r\n\t\t\t<AppLayout>\r\n\t\t\t\t{userInfo && (\r\n\t\t\t\t\t\t<Head>\r\n\t\t\t\t\t\t\t<title>\r\n\t\t\t\t\t\t\t\t{userInfo.nickname}\t님의 글\r\n\t\t\t\t\t\t\t</title>\r\n\t\t\t\t\t\t\t<meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\r\n\t\t\t\t\t\t\t<meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\r\n\t\t\t\t\t\t\t<meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\r\n\t\t\t\t\t\t\t<meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\r\n\t\t\t\t\t\t\t<meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\r\n\t\t\t\t\t\t</Head>\r\n\t\t\t\t)}\r\n\t\t\t\t{userInfo\r\n\t\t\t\t\t\t? (\r\n\t\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\t\t\tactions={[\r\n\t\t\t\t\t\t\t\t\t\t\t<div key=\"twit\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t짹짹<br />\r\n\t\t\t\t\t\t\t\t\t\t\t\t{userInfo.Posts}\r\n\t\t\t\t\t\t\t\t\t\t\t</div>,\r\n\t\t\t\t\t\t\t\t\t\t\t<div key=\"following\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t팔로잉<br />\r\n\t\t\t\t\t\t\t\t\t\t\t\t{userInfo.Followings}\r\n\t\t\t\t\t\t\t\t\t\t\t</div>,\r\n\t\t\t\t\t\t\t\t\t\t\t<div key=\"follower\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t팔로워<br />\r\n\t\t\t\t\t\t\t\t\t\t\t\t{userInfo.Followers}\r\n\t\t\t\t\t\t\t\t\t\t\t</div>,\r\n\t\t\t\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Card.Meta\r\n\t\t\t\t\t\t\t\t\t\t\tavatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n\t\t\t\t\t\t\t\t\t\t\ttitle={userInfo.nickname}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t: null}\r\n\t\t\t\t{mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n\t\t\t</AppLayout>\r\n\t);\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n\tconst cookie = context.req ? context.req.headers.cookie : '';\r\n\taxios.defaults.headers.Cookie = '';\r\n\tif (context.req && cookie) {\r\n\t\taxios.defaults.headers.Cookie = cookie;\r\n\t}\r\n\tcontext.store.dispatch({\r\n\t\ttype: LOAD_USER_POSTS_REQUEST,\r\n\t\tdata: context.params.id,\r\n\t});\r\n\tcontext.store.dispatch({\r\n\t\ttype: LOAD_MY_INFO_REQUEST,\r\n\t});\r\n\tcontext.store.dispatch({\r\n\t\ttype: LOAD_USER_REQUEST,\r\n\t\tdata: context.params.id,\r\n\t});\r\n\tcontext.store.dispatch(END);\r\n\tawait context.store.sagaTask.toPromise();\r\n\tconsole.log('getState', context.store.getState().post.mainPosts);\r\n\treturn { props: {} };\r\n});\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}