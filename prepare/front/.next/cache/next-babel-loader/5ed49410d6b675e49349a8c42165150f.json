{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../component/AppLayout';\nimport NicknameEditForm from '../component/NicknameEditForm';\nimport FollowList from '../component/FollowList';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport useSWR, { useSWRPages } from 'swr';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Router from \"next/router\";\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from \"../store/configureStore\"; //import FollowerList from '../component/FollowerList'\n// fetcher 를 다른걸로 바꾸면 graphql 도 쓸수있다\n\nconst fetcher = url => axios.get(url, {\n  withCredentials: true\n}).then(result => result.data);\n\nconst Profile = () => {\n  /* front\n  const dispatch = useDispatch();\n  const followingList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}] front early\n  const followerList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}]*/\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: followersLimit,\n    1: setFollowersLimit\n  } = useState(3);\n  const {\n    0: followingsLimit,\n    1: setFollowingsLimit\n  } = useState(3);\n  /*useEffect(() => {\n  \tdispatch({\n  \t\ttype: LOAD_FOLLOWERS_REQUEST,\n  \t});\n  \tdispatch({\n  \t\ttype: LOAD_FOLLOWINGS_REQUEST,\n  \t});\n  }, []);*/\n  //followers 불러오기\n  // data, error 가 둘다 있다면 성공했거나, 실패했거나, 둘다 없다면 로딩중\n\n  const {\n    data: followersData,\n    error: followerError\n  } = useSWR(`http://localhost:3065/user/followers?limit=${followersLimit}`, fetcher); //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n  //followings 불러오기\n\n  const {\n    data: followingsData,\n    error: followingError\n  } = useSWR(`http://localhost:3065/user/followings?limit=${followingsLimit}`, fetcher); //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n\n  useEffect(() => {\n    if (!(me && me.id)) {\n      // 프로필 페이지에서 로그아웃했을 경우 main 화면으로\n      Router.push('/');\n    }\n  }, [me && me.id]); // callback 함수는 최소한 return 위쪽에 적자\n  // 버튼을 눌러주면 limit 가 기존 limit 보다 3 씩 늘어난다\n\n  const loadMoreFollowings = useCallback(() => {\n    setFollowingsLimit(prev => prev + 3);\n  }, []);\n  const loadMoreFollowers = useCallback(() => {\n    setFollowersLimit(prev => prev + 3);\n  }, []);\n\n  if (!me) {\n    // 내가 없으면 못들어가게\n    return '내 정보 로딩중...';\n  }\n\n  if (followerError || followingError) {\n    console.error(followerError || followingError);\n    return '팔로잉/팔로워 로딩 중 에러가 발생했습니다.';\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"\\uB0B4 \\uD504\\uB85C\\uD544 | NodeBird\")), __jsx(AppLayout, null, __jsx(NicknameEditForm, null), __jsx(FollowList, {\n    header: \"\\uD314\\uB85C\\uC719 \\uBAA9\\uB85D\",\n    data: followingsData,\n    onClickMore: loadMoreFollowings,\n    loading: !followingsData && !followingError\n  }), __jsx(FollowList, {\n    header: \"\\uD314\\uB85C\\uC6CC \\uBAA9\\uB85D\",\n    data: followersData,\n    onClickMore: loadMoreFollowers,\n    loading: !followersData && !followerError\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log('Profile getServerSideProps Start');\n  console.log(context.req.headers);\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  console.log('Profile getServerSideProps END');\n  await context.store.sagaTask.toPromise();\n});\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}