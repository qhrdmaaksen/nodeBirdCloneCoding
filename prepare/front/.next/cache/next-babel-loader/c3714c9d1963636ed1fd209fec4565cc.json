{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, //generateDummyPost, front\nLOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; //import shortId from \"shortid\"; front\n\nfunction loadPostsAPI(data) {\n  // 3 전달되면\n  //return axios.get('/api/posts', data) // 4 데이터가 간다 front\n  return axios.get('/posts', data); // 4 데이터가 간다\n}\n\nfunction* loadPosts(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(loadPostsAPI, action.data); // 2 데이터를 꺼내서\n    //yield delay(1000) front\n\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      // data: generateDummyPost(10), // data 10 개 front\n      data: result.data\n    });\n  } catch (error) {\n    console.error('loadPosts : ' + error);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  //return axios.post('/api/post', data) // 4 데이터가 간다 front\n  // data content 가 req.body.content 로 백엔드에 변환\n  return axios.post('/post', {\n    content: data\n  }); // 4 데이터가 간다\n}\n\nfunction* addPost(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(addPostAPI, action.data); // 2 데이터를 꺼내서\n    //yield delay(1000) front\n    //const id = shortId.generate() // front 의 더미 아디\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n\n      /*data: { // front dummy\r\n      \tid,\r\n      \tcontent: action.data,\r\n      }*/\n      data: result.data // back, 실제로 게시글이 들어있음\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      // data: id, // front dummy\n      data: result.data.id // back\n\n    });\n  } catch (error) {\n    console.error('addPost : ' + error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction* removePost(action) {\n  // 1 액션에서\n  try {\n    // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\n    //const result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // 어떤 게시물을 지웠는지 id 가있을것\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    console.error('removePost : ' + error);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  //주소는 백엔드와 프론트의 약속일뿐 정해진건없다\n  //return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\n  return axios.post(`/post/${data.postId}/comment`, data); // 4 데이터가 간다 // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(addCommentAPI, action.data); // 2 데이터를 꺼내서 //back\n    //yield delay(1000) front\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      //data: action.data // front\n      data: result.data\n    });\n  } catch (error) {\n    console.error('addComment : ' + error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["all","call","delay","fork","put","takeLatest","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","error","console","response","addPostAPI","post","content","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, call, delay, fork, put, takeLatest, throttle} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n\t//generateDummyPost, front\r\n\tLOAD_POSTS_FAILURE,\r\n\tLOAD_POSTS_REQUEST,\r\n\tLOAD_POSTS_SUCCESS,\r\n\tREMOVE_POST_FAILURE,\r\n\tREMOVE_POST_REQUEST,\r\n\tREMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport {\r\n\tADD_POST_TO_ME,\r\n\tREMOVE_POST_OF_ME,\r\n} from \"../reducers/user\";\r\n//import shortId from \"shortid\"; front\r\n\r\n\r\nfunction loadPostsAPI(data) { // 3 전달되면\r\n\t//return axios.get('/api/posts', data) // 4 데이터가 간다 front\r\n\treturn axios.get('/posts', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* loadPosts(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(loadPostsAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_SUCCESS,\r\n\t\t\t// data: generateDummyPost(10), // data 10 개 front\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tconsole.error('loadPosts : ' + error)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_FAILURE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\t//return axios.post('/api/post', data) // 4 데이터가 간다 front\r\n\t// data content 가 req.body.content 로 백엔드에 변환\r\n\treturn axios.post('/post', {content: data}) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\t//const id = shortId.generate() // front 의 더미 아디\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\t/*data: { // front dummy\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: action.data,\r\n\t\t\t}*/\r\n\t\t\tdata: result.data, // back, 실제로 게시글이 들어있음\r\n\t\t})\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\t// data: id, // front dummy\r\n\t\t\tdata: result.data.id // back\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tconsole.error('addPost : ' + error)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction removePostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* removePost(action) { // 1 액션에서\r\n\ttry { // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\r\n\t\t//const result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_SUCCESS,\r\n\t\t\tdata: action.data, // 어떤 게시물을 지웠는지 id 가있을것\r\n\t\t})\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_OF_ME,\r\n\t\t\tdata: action.data,\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tconsole.error('removePost : ' + error)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_FAILURE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\t//주소는 백엔드와 프론트의 약속일뿐 정해진건없다\r\n\t//return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\r\n\treturn axios.post(`/post/${data.postId}/comment`, data) // 4 데이터가 간다 // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서 //back\r\n\t\t//yield delay(1000) front\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\t//data: action.data // front\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t} catch (error) {\r\n\t\tconsole.error('addComment : ' + error)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchLoadPosts),\r\n\t\tfork(watchAddPost),\r\n\t\tfork(watchRemovePost),\r\n\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}