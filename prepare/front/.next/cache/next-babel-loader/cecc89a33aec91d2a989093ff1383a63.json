{"ast":null,"code":"var _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; // Next 에서는 이 구문이 필요가 없다.\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../component/AppLayout';\nimport PostForm from '../component/PostForm';\nimport PostCard from \"../component/PostCard\";\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []); // 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\n\n  useEffect(() => {\n    function onScroll() {}\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }\n  }), \" \", mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","type","onScroll","window","addEventListener","removeEventListener","me","state","user","mainPosts","post","map","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CAAuC;;AACvC,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,kBAAR,QAAiC,kBAAjC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAClB,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACAD,EAAAA,SAAS,CAAC,MAAM;AAAE;AACjBQ,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEH;AADE,KAAD,CAAR;AAGA,GAJQ,EAIN,EAJM,CAAT,CAFkB,CAQlB;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACf,aAASU,QAAT,GAAqB,CAEpB;;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,QAAlC;AACD,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,QAArC;AACD,KAFD;AAGA,GARQ,EAQN,EARM,CAAT;AAWA,QAAM;AAACI,IAAAA;AAAD,MAAOZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAxB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAcf,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACG,IAAlB,CAA/B;AACA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGEJ,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,OAIEG,SAAS,CAACE,GAAV,CAAeD,IAAD,IACb,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,IAAI,CAACE,EAApB;AAAwB,IAAA,IAAI,EAAEF,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAJF,CADF;AAWA,CAjCD;;AAmCA,eAAeX,IAAf","sourcesContent":["import React, {useEffect} from 'react' // Next 에서는 이 구문이 필요가 없다.\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport AppLayout from '../component/AppLayout'\r\nimport PostForm from '../component/PostForm'\r\nimport PostCard from \"../component/PostCard\";\r\nimport {LOAD_POSTS_REQUEST} from '../reducers/post'\r\n\r\nconst Home = () => {\r\n\tconst dispatch = useDispatch()\r\n\tuseEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n\t\tdispatch({\r\n\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t})\r\n\t}, []);\r\n\r\n\t// 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\r\n\tuseEffect(() => {\r\n\t\tfunction onScroll () {\r\n\t\t\t\r\n\t\t}\r\n\t\t\twindow.addEventListener('scroll', onScroll)\r\n\t\treturn () => {\r\n\t\t\t\twindow.removeEventListener('scroll', onScroll)\r\n\t\t};\r\n\t}, []);\r\n\t\r\n\t\r\n\tconst {me} = useSelector((state) => state.user)\r\n\tconst {mainPosts} = useSelector((state) => state.post)\r\n\treturn (\r\n\t\t\t<AppLayout>\r\n\t\t\t\t{/*AppLayout 을 사용한다, 만약 다른 레이아웃을 사용하고싶다면 따로 component에 만들어서 이와같이 감싸면된다.*/}\r\n\t\t\t\t{/*뭔가 묶일 수 있는 단위가있을 것 같으면 먼저 컴포넌트 이름을 정해주자*/}\r\n\t\t\t\t{me && <PostForm/>} {/*모두 참 인경우 마지막 피 연산자를 반환*/}\r\n\t\t\t\t{mainPosts.map((post) => (\r\n\t\t\t\t\t\t<PostCard key={post.id} post={post}/>\r\n\t\t\t\t))}\r\n\t\t\t\t{/*이와같이 AppLayout 으로 감싼 이부분은 AppLayout 의 children 이된다.*/}\r\n\t\t\t</AppLayout>\r\n\t)\r\n}\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}