{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\component\\\\CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from 'react';\nimport { Button, Form, Input } from \"antd\";\nimport useInput from \"../hooks/useInput\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    console.log('post.id : ' + post.id + ', commentText : ' + commentText + ', userId : ' + id);\n    dispatch({\n      // 변수를 사용해서 create, 재사용 될거라면 나중에 함수로 빼는게 좋으며, 컴포넌트에서만 쓰일거면 액션 객체하나로 넣는다\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        userId: id,\n        postId: post.id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }\n  }, __jsx(Form.Item, {\n    style: {\n      position: \"relative\",\n      margin: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    rows: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 6\n    }\n  }), __jsx(Button, {\n    style: {\n      position: 'absolute',\n      right: 0,\n      bottom: -40,\n      zIndex: 1\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 6\n    }\n  }, \"\\uC090\\uC57D\")));\n};\n\n_s(CommentForm, \"grB1dgAAYOQQBljO+x9f/MnLEVg=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propType = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/component/CommentForm.js"],"names":["React","useCallback","useEffect","Button","Form","Input","useInput","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","onSubmitComment","console","log","type","data","content","userId","postId","position","margin","right","bottom","zIndex","propType","object","isRequired"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect} from 'react'\r\nimport {Button, Form, Input} from \"antd\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport PropTypes from \"prop-types\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ADD_COMMENT_REQUEST} from \"../reducers/post\";\r\n\r\nconst CommentForm = ({post}) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst id = useSelector((state) => state.user.me?.id)\r\n\tconst {addCommentDone, addCommentLoading} = useSelector((state) => state.post)\r\n\tconst [commentText, onChangeCommentText, setCommentText] = useInput('')\r\n\r\n\tuseEffect(() => {\r\n\t\tif (addCommentDone) {\r\n\t\t\tsetCommentText('')\r\n\t\t}\r\n\t}, [addCommentDone])\r\n\r\n\tconst onSubmitComment = useCallback(() => {\r\n\t\tconsole.log('post.id : ' + post.id + ', commentText : ' + commentText + ', userId : ' + id)\r\n\t\tdispatch({ // 변수를 사용해서 create, 재사용 될거라면 나중에 함수로 빼는게 좋으며, 컴포넌트에서만 쓰일거면 액션 객체하나로 넣는다\r\n\t\t\ttype: ADD_COMMENT_REQUEST,\r\n\t\t\tdata: {content: commentText, userId: id, postId: post.id},\r\n\t\t})\r\n\t}, [commentText, id])\r\n\r\n\treturn (\r\n\t\t\t<Form onFinish={onSubmitComment}>\r\n\t\t\t\t<Form.Item style={{position: \"relative\", margin: 0}}>\r\n\t\t\t\t\t<Input.TextArea value={commentText} onChange={onChangeCommentText} rows={4}/>\r\n\t\t\t\t\t<Button style={{position: 'absolute', right: 0, bottom: -40, zIndex: 1}}\r\n\t\t\t\t\t\t\t\t\ttype=\"primary\" htmlType=\"submit\" loading={addCommentLoading}\r\n\t\t\t\t\t>삐약\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t</Form>\r\n\t)\r\n}\r\nCommentForm.propType = {\r\n\tpost: PropTypes.object.isRequired,\r\n}\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}