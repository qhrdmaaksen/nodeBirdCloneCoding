{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [{\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: '비타민'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '개정판이 나왔네요!?'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '정말정말 신기하당!'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 경로들이 저장됨\n  addPostLoading: false,\n  // 게시물 등록중 로딩\n  addPostDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addPostError: null,\n  removePostLoading: false,\n  // 게시물 삭제중 로딩\n  removePostDone: false,\n  // 게시물 삭제가 완료되었을때 true 변환\n  removePostError: null,\n  addCommentLoading: false,\n  // 댓글 등록중 로딩\n  addCommentDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addCommentError: null\n};\ninitialState.mainPosts.concat(Array(20).fill().map(function (v, i) {\n  return {};\n})); //게시글 작성하는 액션\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\n\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n}; // dynamic action create\n\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '비타민'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '비타민'\n    }\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.data;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        }); // 지울땐 보통 filter 가 편하다\n\n        draft.PostLoading = false;\n        draft.PostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          //action.data.content, postId, userId\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          }); // 게시글 리스트중에 post 찾기\n\n          post.Comments.unshift(dummyComment(action.data.content)); // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","generate","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","v","i","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","filter","PostLoading","PostDone","error","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid'\r\nimport produce from 'immer'\r\nimport faker from 'faker'\r\n\r\nexport const initialState = {\r\n\tmainPosts: [\r\n\t\t{\r\n\t\t\tid: shortId.generate(),\r\n\t\t\tUser: {\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tnickname: '비타민',\r\n\t\t\t},\r\n\t\t\tcontent: '첫 번째 게시글 #해시태그 #익스프레스',\r\n\t\t\tImages: [{\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tsrc: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n\t\t\t}, {\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tsrc: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n\t\t\t}, {\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tsrc: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n\t\t\t}],\r\n\t\t\tComments: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\tUser: {\r\n\t\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\t\tnickname: 'nero',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcontent: '개정판이 나왔네요!?',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\tUser: {\r\n\t\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\t\tnickname: 'hero',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcontent: '정말정말 신기하당!',\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t],\r\n\timagePaths: [], // 이미지 경로들이 저장됨\r\n\taddPostLoading: false, // 게시물 등록중 로딩\r\n\taddPostDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddPostError: null,\r\n\tremovePostLoading: false, // 게시물 삭제중 로딩\r\n\tremovePostDone: false, // 게시물 삭제가 완료되었을때 true 변환\r\n\tremovePostError: null,\r\n\taddCommentLoading: false, // 댓글 등록중 로딩\r\n\taddCommentDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddCommentError: null,\r\n}\r\ninitialState.mainPosts.concat(\r\n\t\tArray(20).fill().map((v, i) => ({\r\n\t\t\t\r\n\t\t}))\r\n)\r\n\r\n//게시글 작성하는 액션\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n\ttype: ADD_POST_REQUEST,\r\n\tdata,\r\n})\r\n\r\n// dynamic action create\r\nexport const addComment = (data) => ({\r\n\ttype: ADD_COMMENT_REQUEST,\r\n\tdata,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n\tid: data.id,\r\n\tcontent: data.content,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t},\r\n\tImages: [],\r\n\tComments: [],\r\n})\r\n\r\nconst dummyComment = (data) => ({\r\n\tid: shortId.generate(),\r\n\tcontent: data,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t}\r\n})\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n\t// immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\r\n\tswitch (action.type) {\r\n\t\tcase ADD_POST_REQUEST:\r\n\t\t\tdraft.addPostLoading = true;\r\n\t\t\tdraft.addPostDone = false;\r\n\t\t\tdraft.addPostError = null;\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_SUCCESS:\r\n\t\t\tdraft.mainPosts.unshift(dummyPost(action.data))\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostDone = true\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_FAILURE:\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostError = action.data\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_REQUEST:\r\n\t\t\tdraft.removePostLoading = true\r\n\t\t\tdraft.removePostDone = false\r\n\t\t\tdraft.removePostError = null\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_SUCCESS:\r\n\t\t\tdraft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data) // 지울땐 보통 filter 가 편하다\r\n\t\t\tdraft.PostLoading = false\r\n\t\t\tdraft.PostDone = true\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_FAILURE:\r\n\t\t\tdraft.removePostLoading = false\r\n\t\t\tdraft.removePostError = action.error\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_REQUEST:\r\n\t\t\tdraft.addCommentLoading = true\r\n\t\t\tdraft.addCommentDone = false\r\n\t\t\tdraft.addCommentError = null\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_SUCCESS: {\r\n\t\t\t//action.data.content, postId, userId\r\n\t\t\tconst post = draft.mainPosts.find((v) => v.id === action.data.postId) // 게시글 리스트중에 post 찾기\r\n\t\t\tpost.Comments.unshift(dummyComment(action.data.content)) // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentDone = true\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase ADD_COMMENT_FAILURE:\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentError = action.error\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n})\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}