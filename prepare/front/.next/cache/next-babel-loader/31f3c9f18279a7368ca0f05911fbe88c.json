{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, //generateDummyPost, front\nLOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; //import shortId from \"shortid\"; front\n// restAPI\n\nfunction loadPostsAPI(lastId) {\n  // 3 전달되면\n  //return axios.get('/api/posts', data) // 4 데이터가 간다 front\n  // 보통 get 방식은 데이터를 못 넣기때문에 쿼리스트링으로 넣어줘야한다 (주소)\n  return axios.get(\"/posts?lastId=\".concat(lastId)); // 4 데이터가 간다 ,\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('Sagas:: loadPosts 실행중', action.data);\n          _context.next = 4;\n          return call(loadPostsAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          // 2 데이터를 꺼내서\n          //yield delay(1000) front\n          console.log('loadPosts 완료:: ', result);\n          _context.next = 8;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            // data: generateDummyPost(10), // data 10 개 front\n            data: result.data\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('loadPosts error: ', _context.t0);\n          _context.next = 15;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction likePostAPI(data) {\n  // 3 전달되면\n  return axios.patch(\"/post/\".concat(data, \"/like\")); // 4 데이터가 간다, like & unlike 는 patch ( 게시글에 일부분 수정이기때문 )\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          // 2 데이터를 꺼내서\n          console.log('likePost 실행중::', result);\n          _context2.next = 7;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data // back, postId, userId 들어있음\n\n          });\n\n        case 7:\n          console.log('likePost 완료::', result);\n          _context2.next = 15;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error('likePost error:: ', _context2.t0);\n          _context2.next = 15;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction unlikePostAPI(data) {\n  // 3 전달되면\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\")); // 4 데이터가 간다\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          // 2 데이터를 꺼내서\n          console.log('unlikePost 실행중::', result);\n          _context3.next = 7;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data // back, postId,userId 들어있음\n\n          });\n\n        case 7:\n          console.log('UNLIKEPost 완료::', result);\n          _context3.next = 15;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('UNLIKEPost error:: ', _context3.t0);\n          _context3.next = 15;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  //return axios.post('/api/post', data) // 4 데이터가 간다 front\n  // data content 가 req.body.content 로 백엔드에 변환\n  //return axios.post('/post', {content: data}) // 4 데이터가 간다,\n  // form data 는 {content: data} 와 같이 감싸면 안된다, 바로 data 로 넣어줘야함\n  return axios.post('/post', data); // 4 데이터가 간다\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          // 2 데이터를 꺼내서\n          //yield delay(1000) front\n          //const id = shortId.generate() // front 의 더미 아디\n          console.log('addPost 실행중::', result);\n          _context4.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n\n            /*data: { // front dummy\r\n            \tid,\r\n            \tcontent: action.data,\r\n            }*/\n            data: result.data // back, 실제로 게시글이 들어있음\n\n          });\n\n        case 7:\n          console.log('addPost 완료::', result);\n          _context4.next = 10;\n          return put({\n            type: ADD_POST_TO_ME,\n            // data: id, // front dummy\n            data: result.data.id // back\n\n          });\n\n        case 10:\n          _context4.next = 17;\n          break;\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error('addPost error:: ', _context4.t0);\n          _context4.next = 17;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 12]]);\n}\n\nfunction removePostAPI(data) {\n  // 3 전달되면\n  //return axios.post('/api/post', data) // 4 데이터가 간다 front\n  return axios[\"delete\"](\"/post/\".concat(data)); // 4 데이터가 간다 back //delete 의 data 는 post.id (PostCard.js)에서 확인 가능\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          // 2 데이터를 꺼내서\n          //yield delay(1000) front\n          console.log('removePost 실행:: ', action.data);\n          _context5.next = 7;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data // 어떤 게시물을 지웠는지 id 가있을것,\n\n          });\n\n        case 7:\n          console.log('removePost 완료:: ', result);\n          _context5.next = 10;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            //data: action.data, front\n            data: action.data // action 이 들어왔을때 데이터\n\n          });\n\n        case 10:\n          _context5.next = 17;\n          break;\n\n        case 12:\n          _context5.prev = 12;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error('removePost error: ', _context5.t0);\n          _context5.next = 17;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 12]]);\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  //주소는 백엔드와 프론트의 약속일뿐 정해진건없다\n  //return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // 4 데이터가 간다 // POST /post/1/comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          // 2 데이터를 꺼내서 //back\n          //yield delay(1000) front\n          console.log('addComment 실행중 ::', action.data);\n          _context6.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            //data: action.data // front\n            data: result.data\n          });\n\n        case 7:\n          console.log('addComment 완료::', result);\n          _context6.next = 15;\n          break;\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error('addComment error:: ', _context6.t0);\n          _context6.next = 15;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 10]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // form data 를 {name:data} 형식으로 감싸면 json 되기때문에 사용하면 안됨\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          console.log('saga uploadImages 실행:: ', action.data);\n          _context7.next = 7;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          console.log('saga uploadImages 성공:: ', result);\n          _context7.next = 15;\n          break;\n\n        case 10:\n          _context7.prev = 10;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error('saga uploadImages error:: ', _context7.t0);\n          _context7.next = 15;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 10]]);\n}\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          console.log('saga retweet 실행::', action.data);\n          _context8.next = 7;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          console.log('saga retweet 성공::', result);\n          _context8.next = 15;\n          break;\n\n        case 10:\n          _context8.prev = 10;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error('saga retweet 실패 :: ', _context8.t0);\n          _context8.next = 15;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 10]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["loadPosts","likePost","unlikePost","addPost","removePost","addComment","uploadImages","retweet","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","call","delay","fork","put","takeLatest","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","lastId","get","action","console","log","data","result","type","error","response","likePostAPI","patch","unlikePostAPI","addPostAPI","post","id","removePostAPI","addCommentAPI","postId","uploadImagesAPI","retweetAPI"],"mappings":"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","sourcesContent":["import {all, call, delay, fork, put, takeLatest, throttle} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n\tLIKE_POST_FAILURE,\r\n\tLIKE_POST_REQUEST,\r\n\tLIKE_POST_SUCCESS,\r\n\t//generateDummyPost, front\r\n\tLOAD_POSTS_FAILURE,\r\n\tLOAD_POSTS_REQUEST,\r\n\tLOAD_POSTS_SUCCESS,\r\n\tREMOVE_POST_FAILURE,\r\n\tREMOVE_POST_REQUEST,\r\n\tREMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS,\r\n\tUNLIKE_POST_FAILURE,\r\n\tUNLIKE_POST_REQUEST,\r\n\tUNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n\tUPLOAD_IMAGES_REQUEST,\r\n\tUPLOAD_IMAGES_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport {\r\n\tADD_POST_TO_ME,\r\n\tREMOVE_POST_OF_ME,\r\n} from \"../reducers/user\";\r\n\r\n//import shortId from \"shortid\"; front\r\n\r\n// restAPI\r\nfunction loadPostsAPI(lastId) { // 3 전달되면\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//return axios.get('/api/posts', data) // 4 데이터가 간다 front\r\n\t// 보통 get 방식은 데이터를 못 넣기때문에 쿼리스트링으로 넣어줘야한다 (주소)\r\n\treturn axios.get(`/posts?lastId=${lastId}`) // 4 데이터가 간다 ,\r\n}\r\n\r\nfunction* loadPosts(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconsole.log('Sagas:: loadPosts 실행중', action.data)\r\n\t\tconst result = yield call(loadPostsAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('loadPosts 완료:: ', result)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_SUCCESS,\r\n\t\t\t// data: generateDummyPost(10), // data 10 개 front\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('loadPosts error: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction likePostAPI(data) { // 3 전달되면\r\n\treturn axios.patch(`/post/${data}/like`) // 4 데이터가 간다, like & unlike 는 patch ( 게시글에 일부분 수정이기때문 )\r\n}\r\n\r\nfunction* likePost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(likePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tconsole.log('likePost 실행중::', result)\r\n\t\tyield put({\r\n\t\t\ttype: LIKE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // back, postId, userId 들어있음\r\n\t\t})\r\n\t\tconsole.log('likePost 완료::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('likePost error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LIKE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction unlikePostAPI(data) { // 3 전달되면\r\n\treturn axios.delete(`/post/${data}/like`) // 4 데이터가 간다\r\n}\r\n\r\nfunction* unlikePost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(unlikePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tconsole.log('unlikePost 실행중::', result)\r\n\t\tyield put({\r\n\t\t\ttype: UNLIKE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // back, postId,userId 들어있음\r\n\t\t})\r\n\t\tconsole.log('UNLIKEPost 완료::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('UNLIKEPost error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: UNLIKE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//return axios.post('/api/post', data) // 4 데이터가 간다 front\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// data content 가 req.body.content 로 백엔드에 변환\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//return axios.post('/post', {content: data}) // 4 데이터가 간다,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// form data 는 {content: data} 와 같이 감싸면 안된다, 바로 data 로 넣어줘야함\r\n\treturn axios.post('/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\t//const id = shortId.generate() // front 의 더미 아디\r\n\t\tconsole.log('addPost 실행중::', result)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\t/*data: { // front dummy\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: action.data,\r\n\t\t\t}*/\r\n\t\t\tdata: result.data, // back, 실제로 게시글이 들어있음\r\n\t\t})\r\n\t\tconsole.log('addPost 완료::', result)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\t// data: id, // front dummy\r\n\t\t\tdata: result.data.id // back\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addPost error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction removePostAPI(data) { // 3 전달되면\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //return axios.post('/api/post', data) // 4 데이터가 간다 front\r\n\treturn axios.delete(`/post/${data}`) // 4 데이터가 간다 back //delete 의 data 는 post.id (PostCard.js)에서 확인 가능\r\n}\r\n\r\nfunction* removePost(action) { // 1 액션에서\r\n\ttry { // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\r\n\t\tconst result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('removePost 실행:: ', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // 어떤 게시물을 지웠는지 id 가있을것,\r\n\t\t})\r\n\t\tconsole.log('removePost 완료:: ', result)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_OF_ME,\r\n\t\t\t//data: action.data, front\r\n\t\t\tdata: action.data,  // action 이 들어왔을때 데이터\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('removePost error: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //주소는 백엔드와 프론트의 약속일뿐 정해진건없다\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\r\n\treturn axios.post(`/post/${data.postId}/comment`, data) // 4 데이터가 간다 // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서 //back\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('addComment 실행중 ::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\t//data: action.data // front\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('addComment 완료::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('addComment error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n\treturn axios.post('/post/images', data) // form data 를 {name:data} 형식으로 감싸면 json 되기때문에 사용하면 안됨\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n\ttry {\r\n\t\tconst result = yield call(uploadImagesAPI, action.data)\r\n\t\tconsole.log('saga uploadImages 실행:: ', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: UPLOAD_IMAGES_SUCCESS,\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t\tconsole.log('saga uploadImages 성공:: ', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga uploadImages error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: UPLOAD_IMAGES_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\nfunction retweetAPI(data){\r\n\treturn axios.post(`/post/${data}/retweet`)\r\n}\r\nfunction* retweet(action) {\r\n\ttry {\r\n\t\tconst result = yield call(retweetAPI,action.data)\r\n\t\tconsole.log('saga retweet 실행::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: RETWEET_SUCCESS,\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('saga retweet 성공::', result)\r\n\t}catch (err) {\r\n\t\tconsole.error('saga retweet 실패 :: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: RETWEET_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchRetweet() {\r\n\tyield takeLatest(RETWEET_REQUEST, retweet)\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n\tyield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages)\r\n}\r\n\r\nfunction* watchLikePost() {\r\n\tyield takeLatest(LIKE_POST_REQUEST, likePost)\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n\tyield takeLatest(UNLIKE_POST_REQUEST, unlikePost)\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchRetweet),\r\n\t\tfork(watchUploadImages),\r\n\t\tfork(watchLikePost),\r\n\t\tfork(watchUnlikePost),\r\n\t\tfork(watchLoadPosts),\r\n\t\tfork(watchAddPost),\r\n\t\tfork(watchRemovePost),\r\n\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}