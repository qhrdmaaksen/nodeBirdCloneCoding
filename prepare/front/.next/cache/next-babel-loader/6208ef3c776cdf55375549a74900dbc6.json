{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action); // 미들웨어를 활용해 리덕스 데브툴즈 처럼 액션 로그 찍히게 하기\n\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var middlewares = [thunkMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.dispatch({\n    // 디스패치하는 순간 타입과 데이터가 리듀서로 보내진다.\n    type: 'CHANGE_NICKNAME',\n    data: 'vitamin777'\n  });\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, // 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\n{\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","reducer","composeWithDevTools","thunkMiddleware","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","middlewares","enhancer","store","type","data","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA2B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACxEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EADwE,CACpD;;AACpB,aAAOD,IAAI,CAACC,MAAD,CAAX;AACD,KAHmD;AAAA,GAA3B;AAAA,CAAzB;;AAKA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,WAAW,GAAG,CAACT,eAAD,EAAkBC,gBAAlB,CAApB;AACA,MAAMS,QAAQ,GACZ,QACId,OAAO,CAACD,eAAe,MAAf,SAAmBc,WAAnB,CAAD,CADX,GAEIV,mBAAmB,CAACJ,eAAe,MAAf,SAAmBc,WAAnB,CAAD,CAHzB;AAIA,MAAME,KAAK,GAAGd,WAAW,CAACC,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACT,QAAN,CAAe;AACb;AACAU,IAAAA,IAAI,EAAE,iBAFO;AAGbC,IAAAA,IAAI,EAAE;AAHO,GAAf;AAKA,SAAOF,KAAP;AACD,CAbD;;AAeA,IAAMG,OAAO,GAAGpB,aAAa,CAC3Bc,cAD2B,EAE3B;AACA;AAAEO,EAAAA,KAAK;AAAP,CAH2B,CAA7B;AAMA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper'\r\nimport { applyMiddleware, compose, createStore } from 'redux'\r\nimport reducer from '../reducers'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n\r\nconst loggerMiddleware = ({ dispatch, getState}) => (next) => (action) => {\r\n  console.log(action) // 미들웨어를 활용해 리덕스 데브툴즈 처럼 액션 로그 찍히게 하기\r\n  return next(action)\r\n}\r\n\r\nconst configureStore = () => {\r\n  const middlewares = [thunkMiddleware, loggerMiddleware]\r\n  const enhancer =\r\n    process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares))\r\n  const store = createStore(reducer, enhancer)\r\n  store.dispatch({\r\n    // 디스패치하는 순간 타입과 데이터가 리듀서로 보내진다.\r\n    type: 'CHANGE_NICKNAME',\r\n    data: 'vitamin777',\r\n  })\r\n  return store\r\n}\r\n\r\nconst wrapper = createWrapper(\r\n  configureStore,\r\n  // 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\r\n  { debug: process.env.NODE_ENV === 'development' },\r\n)\r\n\r\nexport default wrapper\r\n"]},"metadata":{},"sourceType":"module"}