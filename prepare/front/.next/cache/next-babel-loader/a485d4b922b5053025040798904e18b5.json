{"ast":null,"code":"//import shortId from 'shortid' front\nimport produce from 'immer'; //import faker from 'faker' front\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 경로들이 저장됨\n  hasMorePosts: true,\n  // 더 많은 게시물 가져오기\n  loadPostsLoading: false,\n  // 화면 로드중 로딩\n  loadPostsDone: false,\n  // 화면 로드 완료되었을때 true 변환\n  loadPostsError: null,\n  addPostLoading: false,\n  // 게시물 등록중 로딩\n  addPostDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addPostError: null,\n  removePostLoading: false,\n  // 게시물 삭제중 로딩\n  removePostDone: false,\n  // 게시물 삭제가 완료되었을때 true 변환\n  removePostError: null,\n  addCommentLoading: false,\n  // 댓글 등록중 로딩\n  addCommentDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addCommentError: null\n}; // 이부분을 사용해서 무한 스크롤링을 만들것 front\n\n/*export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n\tid: shortId.generate(),\r\n\tUser: {\r\n\t\tid: shortId.generate(),\r\n\t\tnickname: faker.name.findName(),\r\n\t},\r\n\tcontent: faker.lorem.paragraph(),\r\n\tImages: [{\r\n\t\tsrc: faker.image.image(),\r\n\t}],\r\n\tComments: [{\r\n\t\tUser: {\r\n\t\t\tid: shortId.generate(),\r\n\t\t\tnickname: faker.name.findName(),\r\n\t\t},\r\n\t\tcontent: faker.lorem.sentence(),\r\n\t}],\r\n}))*/\n//게시글 작성하는 액션\n\nexport const LOAD_POSTS_REQUEST = ' LOAD_POSTS_REQUEST'; // 화면을 로딩하면 바로 LOAD_POSTS_REQUEST 를 호출해줄것\n\nexport const LOAD_POSTS_SUCCESS = ' LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = ' LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\n\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n}); // dynamic action create\n\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n/* front dummy\r\nconst dummyPost = (data) => ({\r\n\tid: data.id,\r\n\tcontent: data.content,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t},\r\n\tImages: [],\r\n\tComments: [],\r\n})\r\n*/\n\n/* front dummy\r\nconst dummyComment = (data) => ({\r\n\tid: shortId.generate(),\r\n\tcontent: data,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t}\r\n})*/\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  // immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true; // action.data 에 dummy data 가 들어있을것이며, 기존데이터와 합쳐주는것\n      // concat 을 할땐 항상 앞에 대입을 해줘야한다 그래야 합쳐짐\n\n      draft.mainPosts = action.data.concat(draft.mainPosts); // 게시물을 50 개까지만 가져오겠다\n\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts.unshift(dummyPost(action.data)) // front dummy\n      draft.mainPosts.unshift(action.data); // back 실제 데이터\n\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data); // 지울땐 보통 filter 가 편하다\n\n      draft.PostLoading = false;\n      draft.PostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        //action.data.content, postId, userId\n        //const post = draft.mainPosts.find((v) => v.id === action.data.postId) // 게시글 리스트중에 post 찾기 front\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId); // 게시글 리스트중에 post 찾기 bak\n        //post.Comments.unshift(dummyComment(action.data.content)) // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌 FRONT\n\n        post.Comments.unshift(action.data.content); // 찾은 post 에 실제 데이터 back\n\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","id","PostLoading","PostDone","post","find","PostId","Comments","content"],"mappings":"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","sourcesContent":["//import shortId from 'shortid' front\r\nimport produce from 'immer'\r\n//import faker from 'faker' front\r\n\r\nexport const initialState = {\r\n\tmainPosts: [],\r\n\timagePaths: [], // 이미지 경로들이 저장됨\r\n\thasMorePosts: true, // 더 많은 게시물 가져오기\r\n\tloadPostsLoading: false, // 화면 로드중 로딩\r\n\tloadPostsDone: false, // 화면 로드 완료되었을때 true 변환\r\n\tloadPostsError: null,\r\n\taddPostLoading: false, // 게시물 등록중 로딩\r\n\taddPostDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddPostError: null,\r\n\tremovePostLoading: false, // 게시물 삭제중 로딩\r\n\tremovePostDone: false, // 게시물 삭제가 완료되었을때 true 변환\r\n\tremovePostError: null,\r\n\taddCommentLoading: false, // 댓글 등록중 로딩\r\n\taddCommentDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddCommentError: null,\r\n}\r\n// 이부분을 사용해서 무한 스크롤링을 만들것 front\r\n/*export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n\tid: shortId.generate(),\r\n\tUser: {\r\n\t\tid: shortId.generate(),\r\n\t\tnickname: faker.name.findName(),\r\n\t},\r\n\tcontent: faker.lorem.paragraph(),\r\n\tImages: [{\r\n\t\tsrc: faker.image.image(),\r\n\t}],\r\n\tComments: [{\r\n\t\tUser: {\r\n\t\t\tid: shortId.generate(),\r\n\t\t\tnickname: faker.name.findName(),\r\n\t\t},\r\n\t\tcontent: faker.lorem.sentence(),\r\n\t}],\r\n}))*/\r\n\r\n//게시글 작성하는 액션\r\nexport const  LOAD_POSTS_REQUEST = ' LOAD_POSTS_REQUEST'; // 화면을 로딩하면 바로 LOAD_POSTS_REQUEST 를 호출해줄것\r\nexport const  LOAD_POSTS_SUCCESS = ' LOAD_POSTS_SUCCESS';\r\nexport const  LOAD_POSTS_FAILURE = ' LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n\ttype: ADD_POST_REQUEST,\r\n\tdata,\r\n})\r\n\r\n// dynamic action create\r\nexport const addComment = (data) => ({\r\n\ttype: ADD_COMMENT_REQUEST,\r\n\tdata,\r\n})\r\n\r\n/* front dummy\r\nconst dummyPost = (data) => ({\r\n\tid: data.id,\r\n\tcontent: data.content,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t},\r\n\tImages: [],\r\n\tComments: [],\r\n})\r\n*/\r\n\r\n/* front dummy\r\nconst dummyComment = (data) => ({\r\n\tid: shortId.generate(),\r\n\tcontent: data,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t}\r\n})*/\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n\t// immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\r\n\tswitch (action.type) {\r\n\t\tcase LOAD_POSTS_REQUEST:\r\n\t\t\tdraft.loadPostsLoading = true;\r\n\t\t\tdraft.loadPostsDone = false;\r\n\t\t\tdraft.loadPostsError = null;\r\n\t\t\tbreak;\r\n\t\tcase LOAD_POSTS_SUCCESS:\r\n\t\t\tdraft.loadPostsLoading = false\r\n\t\t\tdraft.loadPostsDone = true\r\n\t\t\t// action.data 에 dummy data 가 들어있을것이며, 기존데이터와 합쳐주는것\r\n\t\t\t// concat 을 할땐 항상 앞에 대입을 해줘야한다 그래야 합쳐짐\r\n\t\t\tdraft.mainPosts = action.data.concat(draft.mainPosts)\r\n\t\t\t// 게시물을 50 개까지만 가져오겠다\r\n\t\t\tdraft.hasMorePosts = draft.mainPosts.length < 50\r\n\t\t\tbreak;\r\n\t\tcase LOAD_POSTS_FAILURE:\r\n\t\t\tdraft.loadPostsLoading = false\r\n\t\t\tdraft.loadPostsError = action.error\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_REQUEST:\r\n\t\t\tdraft.addPostLoading = true;\r\n\t\t\tdraft.addPostDone = false;\r\n\t\t\tdraft.addPostError = null;\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_SUCCESS:\r\n\t\t\t// draft.mainPosts.unshift(dummyPost(action.data)) // front dummy\r\n\t\t\tdraft.mainPosts.unshift(action.data) // back 실제 데이터\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostDone = true\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_FAILURE:\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostError = action.error\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_REQUEST:\r\n\t\t\tdraft.removePostLoading = true\r\n\t\t\tdraft.removePostDone = false\r\n\t\t\tdraft.removePostError = null\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_SUCCESS:\r\n\t\t\tdraft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data) // 지울땐 보통 filter 가 편하다\r\n\t\t\tdraft.PostLoading = false\r\n\t\t\tdraft.PostDone = true\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_FAILURE:\r\n\t\t\tdraft.removePostLoading = false\r\n\t\t\tdraft.removePostError = action.error\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_REQUEST:\r\n\t\t\tdraft.addCommentLoading = true\r\n\t\t\tdraft.addCommentDone = false\r\n\t\t\tdraft.addCommentError = null\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_SUCCESS: {\r\n\t\t\t//action.data.content, postId, userId\r\n\t\t\t//const post = draft.mainPosts.find((v) => v.id === action.data.postId) // 게시글 리스트중에 post 찾기 front\r\n\t\t\tconst post = draft.mainPosts.find((v) => v.id === action.data.PostId) // 게시글 리스트중에 post 찾기 bak\r\n\t\t\t//post.Comments.unshift(dummyComment(action.data.content)) // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌 FRONT\r\n\t\t\tpost.Comments.unshift(action.data.content) // 찾은 post 에 실제 데이터 back\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentDone = true\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase ADD_COMMENT_FAILURE:\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentError = action.error\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n})\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}