{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction* addPost(action) {\n  // 1 액션에서\n  try {\n    //const result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\n    yield delay(1000);\n    yield put({\n      type: 'ADD_POST_SUCCESS' //data: result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","axios","addPostAPI","data","post","addPost","action","type","err","response","watchAddPost","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAE;AAC3B,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP,CADyB,CACY;AACrC;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AAAE;AAC3B,MAAI;AACH;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACTQ,MAAAA,IAAI,EAAE,kBADG,CAET;;AAFS,KAAD,CAAT;AAIA,GAPD,CAOE,OAAOC,GAAP,EAAY;AACb,UAAMT,GAAG,CAAC;AACTQ,MAAAA,IAAI,EAAE,kBADG;AAETJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFV,KAAD,CAAT;AAIA;AACD;;AAED,UAAUO,YAAV,GAAyB;AACxB,QAAMV,UAAU,CAAC,kBAAD,EAAqBK,OAArB,CAAhB;AACA;;AAED,eAAe,UAAUM,QAAV,GAAqB;AACnC,QAAMf,GAAG,CAAC,CACTE,IAAI,CAACY,YAAD,CADK,CAAD,CAAT;AAGA","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: 'ADD_POST_SUCCESS',\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: 'ADD_POST_FAILURE',\r\n\t\t\tdata: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest('ADD_POST_REQUEST', addPost)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchAddPost),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}