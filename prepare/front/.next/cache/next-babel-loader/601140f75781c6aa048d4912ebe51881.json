{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, //generateDummyPost, front\nLOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; //import shortId from \"shortid\"; front\n// restAPI\n\nfunction loadPostsAPI(lastId) {\n  // 3 전달되면\n  //return axios.get('/api/posts', data) // 4 데이터가 간다 front\n  // 보통 get 방식은 데이터를 못 넣기때문에 쿼리스트링으로 넣어줘야한다 (주소), etc : limit=10&offset=10\n  return axios.get(`/posts?lastId=${lastId}`); // 4 데이터가 간다 ,\n}\n\nfunction* loadPosts(action) {\n  // 1 액션에서\n  try {\n    console.log('Sagas:: loadPosts 실행중', action.data);\n    const result = yield call(loadPostsAPI, action.data); // 2 데이터를 꺼내서\n    //yield delay(1000) front\n\n    console.log('loadPosts 완료:: ', result);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      // data: generateDummyPost(10), // data 10 개 front\n      data: result.data\n    });\n  } catch (err) {\n    console.error('loadPosts error: ', err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  // 3 전달되면\n  return axios.patch(`/post/${data}/like`); // 4 데이터가 간다, like & unlike 는 patch ( 게시글에 일부분 수정이기때문 )\n}\n\nfunction* likePost(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(likePostAPI, action.data); // 2 데이터를 꺼내서\n\n    console.log('likePost 실행중::', result);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data // back, postId, userId 들어있음\n\n    });\n    console.log('likePost 완료::', result);\n  } catch (err) {\n    console.error('likePost error:: ', err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  // 3 전달되면\n  return axios.delete(`/post/${data}/like`); // 4 데이터가 간다\n}\n\nfunction* unlikePost(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(unlikePostAPI, action.data); // 2 데이터를 꺼내서\n\n    console.log('unlikePost 실행중::', result);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // back, postId,userId 들어있음\n\n    });\n    console.log('UNLIKEPost 완료::', result);\n  } catch (err) {\n    console.error('UNLIKEPost error:: ', err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  //return axios.post('/api/post', data) // 4 데이터가 간다 front\n  // data content 가 req.body.content 로 백엔드에 변환\n  //return axios.post('/post', {content: data}) // 4 데이터가 간다,\n  // form data 는 {content: data} 와 같이 감싸면 안된다, 바로 data 로 넣어줘야함\n  return axios.post('/post', data); // 4 데이터가 간다\n}\n\nfunction* addPost(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(addPostAPI, action.data); // 2 데이터를 꺼내서\n    //yield delay(1000) front\n    //const id = shortId.generate() // front 의 더미 아디\n\n    console.log('addPost 실행중::', result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n\n      /*data: { // front dummy\r\n      \tid,\r\n      \tcontent: action.data,\r\n      }*/\n      data: result.data // back, 실제로 게시글이 들어있음\n\n    });\n    console.log('addPost 완료::', result);\n    yield put({\n      type: ADD_POST_TO_ME,\n      // data: id, // front dummy\n      data: result.data.id // back\n\n    });\n  } catch (err) {\n    console.error('addPost error:: ', err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // 3 전달되면\n  //return axios.post('/api/post', data) // 4 데이터가 간다 front\n  return axios.delete(`/post/${data}`); // 4 데이터가 간다 back //delete 의 data 는 post.id (PostCard.js)에서 확인 가능\n}\n\nfunction* removePost(action) {\n  // 1 액션에서\n  try {\n    // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\n    const result = yield call(removePostAPI, action.data); // 2 데이터를 꺼내서\n    //yield delay(1000) front\n\n    console.log('removePost 실행:: ', action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data // 어떤 게시물을 지웠는지 id 가있을것,\n\n    });\n    console.log('removePost 완료:: ', result);\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      //data: action.data, front\n      data: action.data // action 이 들어왔을때 데이터\n\n    });\n  } catch (err) {\n    console.error('removePost error: ', err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  //주소는 백엔드와 프론트의 약속일뿐 정해진건없다\n  //return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\n  return axios.post(`/post/${data.postId}/comment`, data); // 4 데이터가 간다 // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(addCommentAPI, action.data); // 2 데이터를 꺼내서 //back\n    //yield delay(1000) front\n\n    console.log('addComment 실행중 ::', action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      //data: action.data // front\n      data: result.data\n    });\n    console.log('addComment 완료::', result);\n  } catch (err) {\n    console.error('addComment error:: ', err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // form data 를 {name:data} 형식으로 감싸면 json 되기때문에 사용하면 안됨\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    console.log('saga uploadImages 실행:: ', action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n    console.log('saga uploadImages 성공:: ', result);\n  } catch (err) {\n    console.error('saga uploadImages error:: ', err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    console.log('saga retweet 실행::', action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n    console.log('saga retweet 성공::', result);\n  } catch (err) {\n    console.error('saga retweet 실패 :: ', err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["all","call","delay","fork","put","takeLatest","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","lastId","get","loadPosts","action","console","log","data","result","type","err","error","response","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","addPostAPI","post","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","uploadImagesAPI","uploadImages","retweetAPI","retweet","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, call, delay, fork, put, takeLatest, throttle} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n\tLIKE_POST_FAILURE,\r\n\tLIKE_POST_REQUEST,\r\n\tLIKE_POST_SUCCESS,\r\n\t//generateDummyPost, front\r\n\tLOAD_POSTS_FAILURE,\r\n\tLOAD_POSTS_REQUEST,\r\n\tLOAD_POSTS_SUCCESS,\r\n\tREMOVE_POST_FAILURE,\r\n\tREMOVE_POST_REQUEST,\r\n\tREMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS,\r\n\tUNLIKE_POST_FAILURE,\r\n\tUNLIKE_POST_REQUEST,\r\n\tUNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n\tUPLOAD_IMAGES_REQUEST,\r\n\tUPLOAD_IMAGES_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport {\r\n\tADD_POST_TO_ME,\r\n\tREMOVE_POST_OF_ME,\r\n} from \"../reducers/user\";\r\n\r\n//import shortId from \"shortid\"; front\r\n\r\n// restAPI\r\nfunction loadPostsAPI(lastId) { // 3 전달되면\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//return axios.get('/api/posts', data) // 4 데이터가 간다 front\r\n\t// 보통 get 방식은 데이터를 못 넣기때문에 쿼리스트링으로 넣어줘야한다 (주소), etc : limit=10&offset=10\r\n\treturn axios.get(`/posts?lastId=${lastId}`) // 4 데이터가 간다 ,\r\n}\r\n\r\nfunction* loadPosts(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconsole.log('Sagas:: loadPosts 실행중', action.data)\r\n\t\tconst result = yield call(loadPostsAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('loadPosts 완료:: ', result)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_SUCCESS,\r\n\t\t\t// data: generateDummyPost(10), // data 10 개 front\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('loadPosts error: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction likePostAPI(data) { // 3 전달되면\r\n\treturn axios.patch(`/post/${data}/like`) // 4 데이터가 간다, like & unlike 는 patch ( 게시글에 일부분 수정이기때문 )\r\n}\r\n\r\nfunction* likePost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(likePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tconsole.log('likePost 실행중::', result)\r\n\t\tyield put({\r\n\t\t\ttype: LIKE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // back, postId, userId 들어있음\r\n\t\t})\r\n\t\tconsole.log('likePost 완료::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('likePost error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LIKE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction unlikePostAPI(data) { // 3 전달되면\r\n\treturn axios.delete(`/post/${data}/like`) // 4 데이터가 간다\r\n}\r\n\r\nfunction* unlikePost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(unlikePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tconsole.log('unlikePost 실행중::', result)\r\n\t\tyield put({\r\n\t\t\ttype: UNLIKE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // back, postId,userId 들어있음\r\n\t\t})\r\n\t\tconsole.log('UNLIKEPost 완료::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('UNLIKEPost error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: UNLIKE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//return axios.post('/api/post', data) // 4 데이터가 간다 front\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// data content 가 req.body.content 로 백엔드에 변환\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//return axios.post('/post', {content: data}) // 4 데이터가 간다,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// form data 는 {content: data} 와 같이 감싸면 안된다, 바로 data 로 넣어줘야함\r\n\treturn axios.post('/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\t//const id = shortId.generate() // front 의 더미 아디\r\n\t\tconsole.log('addPost 실행중::', result)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\t/*data: { // front dummy\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: action.data,\r\n\t\t\t}*/\r\n\t\t\tdata: result.data, // back, 실제로 게시글이 들어있음\r\n\t\t})\r\n\t\tconsole.log('addPost 완료::', result)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\t// data: id, // front dummy\r\n\t\t\tdata: result.data.id // back\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addPost error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction removePostAPI(data) { // 3 전달되면\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //return axios.post('/api/post', data) // 4 데이터가 간다 front\r\n\treturn axios.delete(`/post/${data}`) // 4 데이터가 간다 back //delete 의 data 는 post.id (PostCard.js)에서 확인 가능\r\n}\r\n\r\nfunction* removePost(action) { // 1 액션에서\r\n\ttry { // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\r\n\t\tconst result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('removePost 실행:: ', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // 어떤 게시물을 지웠는지 id 가있을것,\r\n\t\t})\r\n\t\tconsole.log('removePost 완료:: ', result)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_OF_ME,\r\n\t\t\t//data: action.data, front\r\n\t\t\tdata: action.data,  // action 이 들어왔을때 데이터\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('removePost error: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //주소는 백엔드와 프론트의 약속일뿐 정해진건없다\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\r\n\treturn axios.post(`/post/${data.postId}/comment`, data) // 4 데이터가 간다 // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서 //back\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('addComment 실행중 ::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\t//data: action.data // front\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('addComment 완료::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('addComment error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n\treturn axios.post('/post/images', data) // form data 를 {name:data} 형식으로 감싸면 json 되기때문에 사용하면 안됨\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n\ttry {\r\n\t\tconst result = yield call(uploadImagesAPI, action.data)\r\n\t\tconsole.log('saga uploadImages 실행:: ', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: UPLOAD_IMAGES_SUCCESS,\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t\tconsole.log('saga uploadImages 성공:: ', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga uploadImages error:: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: UPLOAD_IMAGES_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\nfunction retweetAPI(data){\r\n\treturn axios.post(`/post/${data}/retweet`)\r\n}\r\nfunction* retweet(action) {\r\n\ttry {\r\n\t\tconst result = yield call(retweetAPI,action.data)\r\n\t\tconsole.log('saga retweet 실행::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: RETWEET_SUCCESS,\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('saga retweet 성공::', result)\r\n\t}catch (err) {\r\n\t\tconsole.error('saga retweet 실패 :: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: RETWEET_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchRetweet() {\r\n\tyield takeLatest(RETWEET_REQUEST, retweet)\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n\tyield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages)\r\n}\r\n\r\nfunction* watchLikePost() {\r\n\tyield takeLatest(LIKE_POST_REQUEST, likePost)\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n\tyield takeLatest(UNLIKE_POST_REQUEST, unlikePost)\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchRetweet),\r\n\t\tfork(watchUploadImages),\r\n\t\tfork(watchLikePost),\r\n\t\tfork(watchUnlikePost),\r\n\t\tfork(watchLoadPosts),\r\n\t\tfork(watchAddPost),\r\n\t\tfork(watchRemovePost),\r\n\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}