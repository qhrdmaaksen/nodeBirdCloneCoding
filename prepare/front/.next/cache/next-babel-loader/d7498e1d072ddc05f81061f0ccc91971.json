{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//import { store } from 'next/dist/build/output/store'\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post';\nvar initialState = {\n  user: {},\n  post: {\n    mainPosts: []\n  }\n}; // 비동기 액션 생성기\n// 액션 생성기\n\n/*const changeNickname = (data) => {\n\treturn {\n\t\ttype: 'CHANGE_NICKNAME',\n\t\tdata,\n\t}\n}\nchangeNickname('vitamin777')*/\n\n/*{\n\t\ttype: 'CHANGE_NICKNAME',\n\t\tdata: 'vitamin777',\n}*/\n\n/*store.dispatch(changeNickname('vitamin7777777'))*/\n// 이전상태와 액션을 통해 다음 상태를 만들어내는 함수\n\nvar rootReducer = combineReducers({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type // 예전 상태에서 액션에따라 데이터를 바꿔 다음 상태를 리턴\n    ) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return _objectSpread({}, state);\n    }\n  }\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","mainPosts","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA;AACA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,SAAQC,eAAR,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,YAAY,GAAG;AACpBF,EAAAA,IAAI,EAAE,EADc;AAEpBC,EAAAA,IAAI,EAAE;AACLE,IAAAA,SAAS,EAAE;AADN;AAFc,CAArB,C,CAOA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AACA,IAAMC,WAAW,GAAGL,eAAe,CAAC;AACnCM,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC9B,YACEA,MAAM,CAACC,IADT,CACc;AADd;AAGC,WAAKV,OAAL;AACCW,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CACID,KADJ,GAEIC,MAAM,CAACI,OAFX;;AAID;AACC,iCACIL,KADJ;AAVF;AAcA;AAhBkC,CAAD,CAAnC;AAmBA,eAAeF,WAAf","sourcesContent":["//import { store } from 'next/dist/build/output/store'\nimport {HYDRATE} from \"next-redux-wrapper\";\nimport {combineReducers} from 'redux'\nimport user from './user'\nimport post from './post'\n\nconst initialState = {\n\tuser: {},\n\tpost: {\n\t\tmainPosts: [],\n\t},\n}\n\n// 비동기 액션 생성기\n\n// 액션 생성기\n/*const changeNickname = (data) => {\n\treturn {\n\t\ttype: 'CHANGE_NICKNAME',\n\t\tdata,\n\t}\n}\nchangeNickname('vitamin777')*/\n/*{\n\t\ttype: 'CHANGE_NICKNAME',\n\t\tdata: 'vitamin777',\n}*/\n\n/*store.dispatch(changeNickname('vitamin7777777'))*/\n\n// 이전상태와 액션을 통해 다음 상태를 만들어내는 함수\nconst rootReducer = combineReducers({\n\tindex: (state = {}, action) => {\n\t\tswitch (\n\t\t\t\taction.type // 예전 상태에서 액션에따라 데이터를 바꿔 다음 상태를 리턴\n\t\t\t\t) {\n\t\t\tcase HYDRATE:\n\t\t\t\tconsole.log('HYDRATE', action)\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...action.payload,\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t}\n\t\t}\n\t}\n})\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}