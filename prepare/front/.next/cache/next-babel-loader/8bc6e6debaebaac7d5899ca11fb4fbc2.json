{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction* addPost(action) {\n  // 1 액션에서\n  try {\n    //const result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data //data: result.data\n\n    });\n  } catch (err) {\n    console.error('addPost : ' + err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  return axios.post(`/api/post/${data.postId}/comment`, data); // 4 데이터가 간다\n}\n\nfunction* addComment(action) {\n  // 1 액션에서\n  try {\n    //const result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data //data: result.data\n\n    });\n  } catch (err) {\n    console.error('addComment : ' + err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","addPostAPI","data","post","addPost","action","type","err","console","error","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACCC,mBADD,EAECC,mBAFD,EAGCC,mBAHD,EAICC,gBAJD,EAKCC,gBALD,EAMCC,gBAND,QAOO,kBAPP;;AASA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAE;AAC3B,SAAOR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP,CADyB,CACY;AACrC;;AACD,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AAAE;AAC3B,MAAI;AACH;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAEN,gBADG;AAETE,MAAAA,IAAI,EAAEG,MAAM,CAACH,IAFJ,CAGT;;AAHS,KAAD,CAAT;AAKA,GARD,CAQE,OAAOK,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,KAAR,CAAc,eAAeF,GAA7B;AACA,UAAMf,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAER,gBADG;AAETW,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaR;AAFX,KAAD,CAAT;AAIA;AACD;;AACD,SAASS,aAAT,CAAuBT,IAAvB,EAA6B;AAAE;AAC9B,SAAOR,KAAK,CAACS,IAAN,CAAY,aAAYD,IAAI,CAACU,MAAO,UAApC,EAA+CV,IAA/C,CAAP,CAD4B,CACgC;AAC5D;;AACD,UAAUW,UAAV,CAAqBR,MAArB,EAA6B;AAAE;AAC9B,MAAI;AACH;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAET,mBADG;AAETK,MAAAA,IAAI,EAAEG,MAAM,CAACH,IAFJ,CAGT;;AAHS,KAAD,CAAT;AAKA,GARD,CAQE,OAAOK,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,KAAR,CAAc,kBAAkBF,GAAhC;AACA,UAAMf,GAAG,CAAC;AACTc,MAAAA,IAAI,EAAEX,mBADG;AAETc,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaR;AAFX,KAAD,CAAT;AAIA;AACD;;AACD,UAAUY,YAAV,GAAyB;AACxB,QAAMrB,UAAU,CAACM,gBAAD,EAAmBK,OAAnB,CAAhB;AAEA;;AACD,UAAUW,eAAV,GAA4B;AAC3B,QAAMtB,UAAU,CAACG,mBAAD,EAAsBiB,UAAtB,CAAhB;AACA;;AAED,eAAe,UAAUG,QAAV,GAAqB;AACnC,QAAM3B,GAAG,CAAC,CACTE,IAAI,CAACuB,YAAD,CADK,EAERvB,IAAI,CAACwB,eAAD,CAFI,CAAD,CAAT;AAIA","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addPost : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\treturn axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다\r\n}\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addComment : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n\r\n}\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchAddPost),\r\n\t\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}