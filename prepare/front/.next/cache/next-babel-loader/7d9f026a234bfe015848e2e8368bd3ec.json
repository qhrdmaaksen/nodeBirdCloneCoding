{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension'; //import thunkMiddleware from 'redux-thunk'\n\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // const loggerMiddleware = ({ dispatch, getState}) => (next) => (action) => {\n//   console.log(action) // 미들웨어를 활용해 리덕스 데브툴즈 처럼 액션 로그 찍히게 하기\n//   return next(action)\n// }\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware(); // saga 설정 방법\n\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, // 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\n{\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAGA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGJ,oBAAoB,EAA3C,CAD2B,CACmB;;AAC9C,QAAMK,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GACZ,QACIT,OAAO,CAACD,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CADX,GAEIN,mBAAmB,CAACH,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CAHzB;AAIA,QAAME,KAAK,GAAGT,WAAW,CAACG,OAAD,EAAUK,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACD,CAVD;;AAYA,MAAMG,OAAO,GAAGf,aAAa,CAC3BQ,cAD2B,EAE3B;AACA;AAAEQ,EAAAA,KAAK;AAAP,CAH2B,CAA7B;AAMA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper'\r\nimport { applyMiddleware, compose, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n//import thunkMiddleware from 'redux-thunk'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport reducer from '../reducers'\r\nimport rootSaga from '../sagas'\r\n\r\n\r\n// const loggerMiddleware = ({ dispatch, getState}) => (next) => (action) => {\r\n//   console.log(action) // 미들웨어를 활용해 리덕스 데브툴즈 처럼 액션 로그 찍히게 하기\r\n//   return next(action)\r\n// }\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware() // saga 설정 방법\r\n  const middlewares = [sagaMiddleware]\r\n  const enhancer =\r\n    process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares))\r\n  const store = createStore(reducer, enhancer)\r\n  store.sagaTask = sagaMiddleware.run(rootSaga)\r\n  return store\r\n}\r\n\r\nconst wrapper = createWrapper(\r\n  configureStore,\r\n  // 옵션객체 디버그가 트루이면 리덕스에관해서 자세한 설명이나오기때문에 개발할땐 true 로 놓자\r\n  { debug: process.env.NODE_ENV === 'development' },\r\n)\r\n\r\nexport default wrapper\r\n"]},"metadata":{},"sourceType":"module"}