{"ast":null,"code":"//import shortId from 'shortid' front\nimport produce from 'immer'; //import faker from 'faker' front\n\nexport var initialState = {\n  mainPosts: [],\n  // 게시물 여러개\n  singlePost: null,\n  // 게시물 하나만\n  imagePaths: [],\n  // 이미지 경로들이 저장됨\n  hasMorePosts: true,\n  // 더 많은 게시물 가져오기\n  likePostLoading: false,\n  // 라이크 로드중 로딩\n  likePostDone: false,\n  // 라이크 완료했을때 true 변환\n  likePostError: null,\n  retweetLoading: false,\n  // 리트윗 로드중 로딩\n  retweetDone: false,\n  // 리트윗 완료중 로딩\n  retweetError: null,\n  unlikePostLoading: false,\n  // 언라이크 로드 중 로딩\n  unlikePostDone: false,\n  // 언라이크 완료했을때 true 변환\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  // 이미지 로드 중 로딩\n  uploadImagesDone: false,\n  // 이미지 로드 완료했을때 true 변환\n  uploadImagesError: null,\n  loadUserPostsLoading: false,\n  // 특정 사용자 게시글 로드중 로딩\n  loadUserPostsDone: false,\n  // 특정 사용자 게시글 로드 완료시 true 변환\n  loadUserPostsError: null,\n  loadPostsLoading: false,\n  // 화면 로드중 로딩\n  loadPostsDone: false,\n  // 화면 로드 완료되었을때 true 변환\n  loadPostsError: null,\n  loadPostLoading: false,\n  // 게시글 로드중 로딩\n  loadPostDone: false,\n  // 게시글 로드 완료되었을때 true 변환\n  loadPostError: null,\n  addPostLoading: false,\n  // 게시물 등록중 로딩\n  addPostDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addPostError: null,\n  removePostLoading: false,\n  // 게시물 삭제중 로딩\n  removePostDone: false,\n  // 게시물 삭제가 완료되었을때 true 변환\n  removePostError: null,\n  addCommentLoading: false,\n  // 댓글 등록중 로딩\n  addCommentDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addCommentError: null\n}; // 이부분을 사용해서 무한 스크롤링을 만들것 front\n\n/*export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n\tid: shortId.generate(),\r\n\tUser: {\r\n\t\tid: shortId.generate(),\r\n\t\tnickname: faker.name.findName(),\r\n\t},\r\n\tcontent: faker.lorem.paragraph(),\r\n\tImages: [{\r\n\t\tsrc: faker.image.image(),\r\n\t}],\r\n\tComments: [{\r\n\t\tUser: {\r\n\t\t\tid: shortId.generate(),\r\n\t\t\tnickname: faker.name.findName(),\r\n\t\t},\r\n\t\tcontent: faker.lorem.sentence(),\r\n\t}],\r\n}))*/\n//게시글 액션\n\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST'; // 특정 사용자의 게시글을 로딩하면 바로 LOAD_POSTS_REQUEST 를 호출해줄것\n\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var LOAD_POSTS_REQUEST = ' LOAD_POSTS_REQUEST'; // 화면을 로딩하면 바로 LOAD_POSTS_REQUEST 를 호출해줄것\n\nexport var LOAD_POSTS_SUCCESS = ' LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = ' LOAD_POSTS_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST'; // 게시물을 로딩하면 바로 LOAD_POST_REQUEST 를 호출해줄것\n\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\n\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE'; // 동기 옵션은 하나만 만들어도 된다\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n}; // dynamic action create\n\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n/* front dummy\r\nconst dummyPost = (data) => ({\r\n\tid: data.id,\r\n\tcontent: data.content,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t},\r\n\tImages: [],\r\n\tComments: [],\r\n})\r\n*/\n\n/* front dummy\r\nconst dummyComment = (data) => ({\r\n\tid: shortId.generate(),\r\n\tcontent: data,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t}\r\n})*/\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\n    switch (action.type) {\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          //action.data.content, postId, userId\n          //const post = draft.mainPosts.find((v) => v.id === action.data.postId) // 게시글 리스트중에 post 찾기 front\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          }); // 게시글 리스트중에 post 찾기 bak\n          //post.Comments.unshift(dummyComment(action.data.content)) // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌 FRONT\n\n          post.Comments.unshift(action.data); // 찾은 post 에 실제 데이터 back\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        console.log('reducer LIKE_POST_REQUEST 요청::');\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          // mainPosts 에서 id 가 액션데이터포스트아이디를 찾아서\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          }); // 게시글 좋아요 누른 사람들에게 사용자 아이디를 넣어준다\n\n\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          console.log('reducer LIKE_POST_SUCCESS 성공::');\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        console.error('reducer LIKE_POST_FAILURE 실패:::', action.error);\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true; // action.data 에 dummy data 가 들어있을것이며, 기존데이터와 합쳐주는것\n        // concat 을 할땐 항상 앞에 대입을 해줘야한다 그래야 합쳐짐\n        //draft.mainPosts = action.data.concat(draft.mainPosts) front\n\n        draft.mainPosts = draft.mainPosts.concat(action.data); // 게시물을 50 개까지만 가져오겠다\n        //draft.hasMorePosts = draft.mainPosts.length < 50 front\n\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        // draft.mainPosts.unshift(dummyPost(action.data)) // front dummy\n        draft.mainPosts.unshift(action.data); // back 실제 데이터\n\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.imagePaths = []; // add post 성공 시, 사용자 게시글 작성에 이미지 초기화\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        console.log('reducer LOAD_POST_REQUEST 요청:: ');\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.singlePost = action.data; // 하나의 게시물만 로드\n\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        console.log('reducer LOAD_POST_SUCCESS 성공:: ');\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        console.error('reducer LOAD_POST_FAILURE 실패:: ', action.error);\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        console.log('reducer REMOVE_IMAGE 성공');\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        console.log('reducer RETWEET_REQUEST 요청::');\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data); // 리트윗된 게시글 메인포스트에 추가\n\n          console.log('reducer RETWEET_SUCCESS 성공::');\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        console.error('reducer RETWEET_FAILURE 실패::', action.data);\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        console.log('reducer UNLIKE_POST_REQUEST 요청::');\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Likers = _post2.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          console.log('reducer UNLIKE_POST_SUCCESS 성공::');\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        console.error('reducer UNLIKE_POST_FAILURE 실패:::', action.error);\n        break;\n\n      case LOAD_USER_POSTS_REQUEST:\n        draft.loadUserPostsLoading = true;\n        draft.loadUserPostsDone = false;\n        draft.loadUserPostsError = null;\n        console.log('reducer LOAD_USER_POSTS_REQUEST 요청::');\n        break;\n\n      case LOAD_USER_POSTS_SUCCESS:\n        draft.loadUserPostsLoading = false;\n        draft.loadUserPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        console.log('reducer LOAD_USER_POSTS_SUCCESS 성공::');\n        break;\n\n      case LOAD_USER_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        console.error('reducer LOAD_USER_POSTS_FAILURE 실패:: ', action.error);\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        console.log('reducer UPLOAD_IMAGES_REQUEST 요청::');\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        console.log('reducer UPLOAD_IMAGES_SUCCESS 성공::');\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        console.error('reducer UPLOAD_IMAGES_FAILURE 실패:::', action.error);\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        }); // 지울땐 보통 filter 가 편하다\n\n        draft.PostLoading = false;\n        draft.PostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","singlePost","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","retweetLoading","retweetDone","retweetError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","loadUserPostsLoading","loadUserPostsDone","loadUserPostsError","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","post","find","v","id","PostId","Comments","unshift","error","console","log","Likers","push","UserId","concat","length","filter","i","PostLoading","PostDone"],"mappings":"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","sourcesContent":["//import shortId from 'shortid' front\r\nimport produce from 'immer'\r\n//import faker from 'faker' front\r\n\r\nexport const initialState = {\r\n\tmainPosts: [], // 게시물 여러개\r\n\tsinglePost: null, // 게시물 하나만\r\n\timagePaths: [], // 이미지 경로들이 저장됨\r\n\thasMorePosts: true, // 더 많은 게시물 가져오기\r\n\tlikePostLoading: false, // 라이크 로드중 로딩\r\n\tlikePostDone: false, // 라이크 완료했을때 true 변환\r\n\tlikePostError: null,\r\n\tretweetLoading: false, // 리트윗 로드중 로딩\r\n\tretweetDone: false, // 리트윗 완료중 로딩\r\n\tretweetError: null,\r\n\tunlikePostLoading: false, // 언라이크 로드 중 로딩\r\n\tunlikePostDone: false, // 언라이크 완료했을때 true 변환\r\n\tunlikePostError: null,\r\n\tuploadImagesLoading: false, // 이미지 로드 중 로딩\r\n\tuploadImagesDone: false, // 이미지 로드 완료했을때 true 변환\r\n\tuploadImagesError: null,\r\n\tloadUserPostsLoading: false, // 특정 사용자 게시글 로드중 로딩\r\n\tloadUserPostsDone: false, // 특정 사용자 게시글 로드 완료시 true 변환\r\n\tloadUserPostsError: null,\r\n\tloadPostsLoading: false, // 화면 로드중 로딩\r\n\tloadPostsDone: false, // 화면 로드 완료되었을때 true 변환\r\n\tloadPostsError: null,\r\n\tloadPostLoading: false, // 게시글 로드중 로딩\r\n\tloadPostDone: false, // 게시글 로드 완료되었을때 true 변환\r\n\tloadPostError: null,\r\n\taddPostLoading: false, // 게시물 등록중 로딩\r\n\taddPostDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddPostError: null,\r\n\tremovePostLoading: false, // 게시물 삭제중 로딩\r\n\tremovePostDone: false, // 게시물 삭제가 완료되었을때 true 변환\r\n\tremovePostError: null,\r\n\taddCommentLoading: false, // 댓글 등록중 로딩\r\n\taddCommentDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddCommentError: null,\r\n}\r\n// 이부분을 사용해서 무한 스크롤링을 만들것 front\r\n/*export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n\tid: shortId.generate(),\r\n\tUser: {\r\n\t\tid: shortId.generate(),\r\n\t\tnickname: faker.name.findName(),\r\n\t},\r\n\tcontent: faker.lorem.paragraph(),\r\n\tImages: [{\r\n\t\tsrc: faker.image.image(),\r\n\t}],\r\n\tComments: [{\r\n\t\tUser: {\r\n\t\t\tid: shortId.generate(),\r\n\t\t\tnickname: faker.name.findName(),\r\n\t\t},\r\n\t\tcontent: faker.lorem.sentence(),\r\n\t}],\r\n}))*/\r\n\r\n//게시글 액션\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST'\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS'\r\n\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST'; // 특정 사용자의 게시글을 로딩하면 바로 LOAD_POSTS_REQUEST 를 호출해줄것\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = ' LOAD_POSTS_REQUEST'; // 화면을 로딩하면 바로 LOAD_POSTS_REQUEST 를 호출해줄것\r\nexport const LOAD_POSTS_SUCCESS = ' LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = ' LOAD_POSTS_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST' // 게시물을 로딩하면 바로 LOAD_POST_REQUEST 를 호출해줄것\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS'\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE'\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE'\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; // 동기 옵션은 하나만 만들어도 된다\r\n\r\nexport const addPost = (data) => ({\r\n\ttype: ADD_POST_REQUEST,\r\n\tdata,\r\n})\r\n\r\n// dynamic action create\r\nexport const addComment = (data) => ({\r\n\ttype: ADD_COMMENT_REQUEST,\r\n\tdata,\r\n})\r\n\r\n/* front dummy\r\nconst dummyPost = (data) => ({\r\n\tid: data.id,\r\n\tcontent: data.content,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t},\r\n\tImages: [],\r\n\tComments: [],\r\n})\r\n*/\r\n\r\n/* front dummy\r\nconst dummyComment = (data) => ({\r\n\tid: shortId.generate(),\r\n\tcontent: data,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t}\r\n})*/\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n\t// immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\r\n\tswitch (action.type) {\r\n\t\tcase ADD_COMMENT_REQUEST:\r\n\t\t\tdraft.addCommentLoading = true\r\n\t\t\tdraft.addCommentDone = false\r\n\t\t\tdraft.addCommentError = null\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_SUCCESS: {\r\n\t\t\t//action.data.content, postId, userId\r\n\t\t\t//const post = draft.mainPosts.find((v) => v.id === action.data.postId) // 게시글 리스트중에 post 찾기 front\r\n\t\t\tconst post = draft.mainPosts.find((v) => v.id === action.data.PostId) // 게시글 리스트중에 post 찾기 bak\r\n\t\t\t//post.Comments.unshift(dummyComment(action.data.content)) // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌 FRONT\r\n\t\t\tpost.Comments.unshift(action.data) // 찾은 post 에 실제 데이터 back\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentDone = true\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase ADD_COMMENT_FAILURE:\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentError = action.error\r\n\t\t\tbreak;\r\n\t\tcase LIKE_POST_REQUEST:\r\n\t\t\tdraft.likePostLoading = true;\r\n\t\t\tdraft.likePostDone = false;\r\n\t\t\tdraft.likePostError = null;\r\n\t\t\tconsole.log('reducer LIKE_POST_REQUEST 요청::')\r\n\t\t\tbreak;\r\n\t\tcase LIKE_POST_SUCCESS: {\r\n\t\t\t// mainPosts 에서 id 가 액션데이터포스트아이디를 찾아서\r\n\t\t\tconst post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n\t\t\t// 게시글 좋아요 누른 사람들에게 사용자 아이디를 넣어준다\r\n\t\t\tpost.Likers.push({id: action.data.UserId});\r\n\t\t\tdraft.likePostLoading = false;\r\n\t\t\tdraft.likePostDone = true;\r\n\t\t\tconsole.log('reducer LIKE_POST_SUCCESS 성공::')\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase LIKE_POST_FAILURE:\r\n\t\t\tdraft.likePostLoading = false;\r\n\t\t\tdraft.likePostError = action.error;\r\n\t\t\tconsole.error('reducer LIKE_POST_FAILURE 실패:::', action.error)\r\n\t\t\tbreak;\r\n\t\tcase LOAD_POSTS_REQUEST:\r\n\t\t\tdraft.loadPostsLoading = true;\r\n\t\t\tdraft.loadPostsDone = false;\r\n\t\t\tdraft.loadPostsError = null;\r\n\t\t\tbreak;\r\n\t\tcase LOAD_POSTS_SUCCESS:\r\n\t\t\tdraft.loadPostsLoading = false\r\n\t\t\tdraft.loadPostsDone = true\r\n\t\t\t// action.data 에 dummy data 가 들어있을것이며, 기존데이터와 합쳐주는것\r\n\t\t\t// concat 을 할땐 항상 앞에 대입을 해줘야한다 그래야 합쳐짐\r\n\t\t\t//draft.mainPosts = action.data.concat(draft.mainPosts) front\r\n\t\t\tdraft.mainPosts = draft.mainPosts.concat(action.data)\r\n\t\t\t// 게시물을 50 개까지만 가져오겠다\r\n\t\t\t//draft.hasMorePosts = draft.mainPosts.length < 50 front\r\n\t\t\tdraft.hasMorePosts = action.data.length === 10\r\n\t\t\tbreak;\r\n\t\tcase LOAD_POSTS_FAILURE:\r\n\t\t\tdraft.loadPostsLoading = false\r\n\t\t\tdraft.loadPostsError = action.error\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_REQUEST:\r\n\t\t\tdraft.addPostLoading = true;\r\n\t\t\tdraft.addPostDone = false;\r\n\t\t\tdraft.addPostError = null;\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_SUCCESS:\r\n\t\t\t// draft.mainPosts.unshift(dummyPost(action.data)) // front dummy\r\n\t\t\tdraft.mainPosts.unshift(action.data) // back 실제 데이터\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostDone = true\r\n\t\t\tdraft.imagePaths = [] // add post 성공 시, 사용자 게시글 작성에 이미지 초기화\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_FAILURE:\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostError = action.error\r\n\t\t\tbreak;\r\n\t\tcase LOAD_POST_REQUEST:\r\n\t\t\tdraft.loadPostLoading = true\r\n\t\t\tdraft.loadPostDone = false\r\n\t\t\tdraft.loadPostError = null\r\n\t\t\tconsole.log('reducer LOAD_POST_REQUEST 요청:: ')\r\n\t\t\tbreak\r\n\t\tcase LOAD_POST_SUCCESS:\r\n\t\t\tdraft.singlePost = action.data // 하나의 게시물만 로드\r\n\t\t\tdraft.loadPostLoading = false\r\n\t\t\tdraft.loadPostDone = true\r\n\t\t\tconsole.log('reducer LOAD_POST_SUCCESS 성공:: ')\r\n\t\t\tbreak\r\n\t\tcase LOAD_POST_FAILURE:\r\n\t\t\tdraft.loadPostLoading = false\r\n\t\t\tdraft.loadPostError = action.error\r\n\t\t\tconsole.error('reducer LOAD_POST_FAILURE 실패:: ', action.error)\r\n\t\tcase REMOVE_IMAGE:\r\n\t\t\tdraft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data)\r\n\t\t\tconsole.log('reducer REMOVE_IMAGE 성공')\r\n\t\t\tbreak\r\n\t\tcase RETWEET_REQUEST:\r\n\t\t\tdraft.retweetLoading = true\r\n\t\t\tdraft.retweetDone = false\r\n\t\t\tdraft.retweetError = null\r\n\t\t\tconsole.log('reducer RETWEET_REQUEST 요청::')\r\n\t\t\tbreak\r\n\t\tcase RETWEET_SUCCESS: {\r\n\t\t\tdraft.retweetLoading = false\r\n\t\t\tdraft.retweetDone = true\r\n\t\t\tdraft.mainPosts.unshift(action.data) // 리트윗된 게시글 메인포스트에 추가\r\n\t\t\tconsole.log('reducer RETWEET_SUCCESS 성공::')\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tcase RETWEET_FAILURE:\r\n\t\t\tdraft.retweetLoading = false\r\n\t\t\tdraft.retweetError = action.error\r\n\t\t\tconsole.error('reducer RETWEET_FAILURE 실패::', action.data)\r\n\t\t\tbreak\r\n\t\tcase UNLIKE_POST_REQUEST:\r\n\t\t\tdraft.unlikePostLoading = true;\r\n\t\t\tdraft.unlikePostDone = false;\r\n\t\t\tdraft.unlikePostError = null;\r\n\t\t\tconsole.log('reducer UNLIKE_POST_REQUEST 요청::')\r\n\t\t\tbreak;\r\n\t\tcase UNLIKE_POST_SUCCESS: {\r\n\t\t\tconst post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n\t\t\tpost.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n\t\t\tdraft.unlikePostLoading = false;\r\n\t\t\tdraft.unlikePostDone = true;\r\n\t\t\tconsole.log('reducer UNLIKE_POST_SUCCESS 성공::')\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase UNLIKE_POST_FAILURE:\r\n\t\t\tdraft.unlikePostLoading = false;\r\n\t\t\tdraft.unlikePostError = action.error;\r\n\t\t\tconsole.error('reducer UNLIKE_POST_FAILURE 실패:::', action.error)\r\n\t\t\tbreak;\r\n\t\tcase LOAD_USER_POSTS_REQUEST:\r\n\t\t\tdraft.loadUserPostsLoading = true\r\n\t\t\tdraft.loadUserPostsDone = false\r\n\t\t\tdraft.loadUserPostsError = null\r\n\t\t\tconsole.log('reducer LOAD_USER_POSTS_REQUEST 요청::')\r\n\t\t\tbreak\r\n\t\tcase LOAD_USER_POSTS_SUCCESS:\r\n\t\t\tdraft.loadUserPostsLoading = false\r\n\t\t\tdraft.loadUserPostsDone = true\r\n\t\t\tdraft.mainPosts = draft.mainPosts.concat(action.data)\r\n\t\t\tconsole.log('reducer LOAD_USER_POSTS_SUCCESS 성공::')\r\n\t\t\tbreak\r\n\t\tcase LOAD_USER_POSTS_FAILURE:\r\n\t\t\tdraft.loadPostsLoading = false\r\n\t\t\tdraft.loadPostsError = action.error\r\n\t\t\tconsole.error('reducer LOAD_USER_POSTS_FAILURE 실패:: ', action.error)\r\n\t\t\tbreak\r\n\t\tcase UPLOAD_IMAGES_REQUEST:\r\n\t\t\tdraft.uploadImagesLoading = true\r\n\t\t\tdraft.uploadImagesDone = false\r\n\t\t\tdraft.uploadImagesError = null\r\n\t\t\tconsole.log('reducer UPLOAD_IMAGES_REQUEST 요청::')\r\n\t\t\tbreak\r\n\t\tcase UPLOAD_IMAGES_SUCCESS:\r\n\t\t\tdraft.imagePaths = action.data\r\n\t\t\tdraft.uploadImagesLoading = false\r\n\t\t\tdraft.uploadImagesDone = true\r\n\t\t\tconsole.log('reducer UPLOAD_IMAGES_SUCCESS 성공::')\r\n\t\t\tbreak\r\n\t\tcase UPLOAD_IMAGES_FAILURE:\r\n\t\t\tdraft.uploadImagesLoading = false\r\n\t\t\tdraft.uploadImagesError = action.error\r\n\t\t\tconsole.error('reducer UPLOAD_IMAGES_FAILURE 실패:::', action.error)\r\n\t\t\tbreak\r\n\t\tcase REMOVE_POST_REQUEST:\r\n\t\t\tdraft.removePostLoading = true\r\n\t\t\tdraft.removePostDone = false\r\n\t\t\tdraft.removePostError = null\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_SUCCESS:\r\n\t\t\tdraft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId) // 지울땐 보통 filter 가 편하다\r\n\t\t\tdraft.PostLoading = false\r\n\t\t\tdraft.PostDone = true\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_FAILURE:\r\n\t\t\tdraft.removePostLoading = false\r\n\t\t\tdraft.removePostError = action.error\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n})\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}