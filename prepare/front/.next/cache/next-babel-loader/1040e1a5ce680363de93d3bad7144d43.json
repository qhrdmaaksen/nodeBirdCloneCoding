{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, //generateDummyPost, front\nLOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; //import shortId from \"shortid\"; front\n// restAPI\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    console.log('saga retweet 실행:::', action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n    console.log('saga retweet 성공:::', result);\n  } catch (err) {\n    console.error('saga retweet 실패 ::: ', err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // form data 를 {name:data} 형식으로 감싸면 json 되기때문에 사용하면 안됨\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    console.log('saga uploadImages 실행::: ', action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n    console.log('saga uploadImages 성공::: ', result);\n  } catch (err) {\n    console.error('saga uploadImages error::: ', err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  // 3 전달되면\n  return axios.patch(`/post/${data}/like`); // 4 데이터가 간다, like & unlike 는 patch ( 게시글에 일부분 수정이기때문 )\n}\n\nfunction* likePost(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(likePostAPI, action.data); // 2 데이터를 꺼내서\n\n    console.log('likePost 실행중:::', result);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data // back, postId, userId 들어있음\n\n    });\n    console.log('likePost 완료:::', result);\n  } catch (err) {\n    console.error('likePost error::: ', err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  // 3 전달되면\n  return axios.delete(`/post/${data}/like`); // 4 데이터가 간다\n}\n\nfunction* unlikePost(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(unlikePostAPI, action.data); // 2 데이터를 꺼내서\n\n    console.log('unlikePost 실행중:::', result);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // back, postId,userId 들어있음\n\n    });\n    console.log('UNLIKEPost 완료:::', result);\n  } catch (err) {\n    console.error('UNLIKEPost error::: ', err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  // 3 전달되면\n  //return axios.get('/api/posts', data) // 4 데이터가 간다 front\n  // 보통 get 방식은 데이터를 못 넣기때문에 쿼리스트링으로 넣어줘야한다 (주소), etc : limit=10&offset=10\n  // 포스트 등은 데이터 캐싱이 안되지만, 겟은 데이터 캐싱을 같이 할 수 있다\n  // lastId 가 undefined 인 경우 0\n  return axios.get(`/posts?lastId=${lastId || 0}`); // 4 데이터가 간다 ,\n}\n\nfunction* loadPosts(action) {\n  // 1 액션에서\n  try {\n    console.log('Sagas::: loadPosts 실행중', action.lastId);\n    const result = yield call(loadPostsAPI, action.lastId); // 2 데이터를 꺼내서\n    //yield delay(1000) front\n\n    console.log('loadPosts 완료::: ', result);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      // data: generateDummyPost(10), // data 10 개 front\n      data: result.data\n    });\n  } catch (err) {\n    console.error('saga loadPosts error: ', err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    console.log('saga loadPost 요청 ::: ', action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n    console.log('saga loadPost 성공 ::: ', result);\n  } catch (err) {\n    console.error('saga loadPost 실패 ::: ', err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  //return axios.post('/api/post', data) // 4 데이터가 간다 front\n  // data content 가 req.body.content 로 백엔드에 변환\n  //return axios.post('/post', {content: data}) // 4 데이터가 간다,\n  // form data 는 {content: data} 와 같이 감싸면 안된다, 바로 data 로 넣어줘야함\n  return axios.post('/post', data); // 4 데이터가 간다\n}\n\nfunction* addPost(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(addPostAPI, action.data); // 2 데이터를 꺼내서\n    //yield delay(1000) front\n    //const id = shortId.generate() // front 의 더미 아디\n\n    console.log('addPost 실행중:::', result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n\n      /*data: { // front dummy\r\n      \tid,\r\n      \tcontent: action.data,\r\n      }*/\n      data: result.data // back, 실제로 게시글이 들어있음\n\n    });\n    console.log('addPost 완료:::', result);\n    yield put({\n      type: ADD_POST_TO_ME,\n      // data: id, // front dummy\n      data: result.data.id // back\n\n    });\n  } catch (err) {\n    console.error('saga addPost error::: ', err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // 3 전달되면\n  //return axios.post('/api/post', data) // 4 데이터가 간다 front\n  return axios.delete(`/post/${data}`); // 4 데이터가 간다 back //delete 의 data 는 post.id (PostCard.js)에서 확인 가능\n}\n\nfunction* removePost(action) {\n  // 1 액션에서\n  try {\n    // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\n    const result = yield call(removePostAPI, action.data); // 2 데이터를 꺼내서\n    //yield delay(1000) front\n\n    console.log('removePost 실행::: ', action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data // 어떤 게시물을 지웠는지 id 가있을것,\n\n    });\n    console.log('removePost 완료::: ', result);\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      //data: action.data, front\n      data: action.data // action 이 들어왔을때 데이터\n\n    });\n  } catch (err) {\n    console.error('saga removePost error: ', err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  //주소는 백엔드와 프론트의 약속일뿐 정해진건없다\n  //return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\n  return axios.post(`/post/${data.postId}/comment`, data); // 4 데이터가 간다 // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  // 1 액션에서\n  try {\n    const result = yield call(addCommentAPI, action.data); // 2 데이터를 꺼내서 //back\n    //yield delay(1000) front\n\n    console.log('addComment 실행중 :::', action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      //data: action.data // front\n      data: result.data\n    });\n    console.log('addComment 완료:::', result);\n  } catch (err) {\n    console.error('saga addComment error::: ', err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    console.log('saga loadUserPosts 실행 ::: ', action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n    console.log('saga loadPostsSuccess 성공::: ', result);\n  } catch (err) {\n    console.error('saga loadUserPosts error ::: ', err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  // 인자를 두 개 넘겨줄수도 있다\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    console.log(`loadHashtagPosts log :::`);\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    console.log('saga loadHashtagPosts 요청 ::: ', action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n    console.log('saga loadHashtagPosts 성공 ::: ');\n  } catch (err) {\n    console.error('saga loadHashtagPosts error ::: ', err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["all","call","delay","fork","put","takeLatest","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","console","log","type","err","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostsAPI","lastId","get","loadPosts","loadPostAPI","loadPost","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","loadUserPostsAPI","loadUserPosts","loadHashtagPostsAPI","loadHashtagPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchLoadPost","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, call, delay, fork, put, takeLatest, throttle} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n\tLIKE_POST_FAILURE,\r\n\tLIKE_POST_REQUEST,\r\n\tLIKE_POST_SUCCESS,\r\n\tLOAD_HASHTAG_POSTS_FAILURE,\r\n\tLOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n\tLOAD_POST_FAILURE,\r\n\tLOAD_POST_REQUEST,\r\n\tLOAD_POST_SUCCESS,\r\n\t//generateDummyPost, front\r\n\tLOAD_POSTS_FAILURE,\r\n\tLOAD_POSTS_REQUEST,\r\n\tLOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\r\n\tLOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS,\r\n\tREMOVE_POST_FAILURE,\r\n\tREMOVE_POST_REQUEST,\r\n\tREMOVE_POST_SUCCESS,\r\n\tRETWEET_FAILURE,\r\n\tRETWEET_REQUEST,\r\n\tRETWEET_SUCCESS,\r\n\tUNLIKE_POST_FAILURE,\r\n\tUNLIKE_POST_REQUEST,\r\n\tUNLIKE_POST_SUCCESS,\r\n\tUPLOAD_IMAGES_FAILURE,\r\n\tUPLOAD_IMAGES_REQUEST,\r\n\tUPLOAD_IMAGES_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport {\r\n\tADD_POST_TO_ME,\r\n\tREMOVE_POST_OF_ME,\r\n} from \"../reducers/user\";\r\n\r\n//import shortId from \"shortid\"; front\r\n\r\n// restAPI\r\nfunction retweetAPI(data) {\r\n\treturn axios.post(`/post/${data}/retweet`)\r\n}\r\n\r\nfunction* retweet(action) {\r\n\ttry {\r\n\t\tconst result = yield call(retweetAPI, action.data)\r\n\t\tconsole.log('saga retweet 실행:::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: RETWEET_SUCCESS,\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('saga retweet 성공:::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga retweet 실패 ::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: RETWEET_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n\treturn axios.post('/post/images', data) // form data 를 {name:data} 형식으로 감싸면 json 되기때문에 사용하면 안됨\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n\ttry {\r\n\t\tconst result = yield call(uploadImagesAPI, action.data)\r\n\t\tconsole.log('saga uploadImages 실행::: ', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: UPLOAD_IMAGES_SUCCESS,\r\n\t\t\tdata: result.data\r\n\t\t})\r\n\t\tconsole.log('saga uploadImages 성공::: ', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga uploadImages error::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: UPLOAD_IMAGES_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction likePostAPI(data) { // 3 전달되면\r\n\treturn axios.patch(`/post/${data}/like`) // 4 데이터가 간다, like & unlike 는 patch ( 게시글에 일부분 수정이기때문 )\r\n}\r\n\r\nfunction* likePost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(likePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tconsole.log('likePost 실행중:::', result)\r\n\t\tyield put({\r\n\t\t\ttype: LIKE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // back, postId, userId 들어있음\r\n\t\t})\r\n\t\tconsole.log('likePost 완료:::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('likePost error::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LIKE_POST_FAILURE,\r\n\t\t\terror: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction unlikePostAPI(data) { // 3 전달되면\r\n\treturn axios.delete(`/post/${data}/like`) // 4 데이터가 간다\r\n}\r\n\r\nfunction* unlikePost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(unlikePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tconsole.log('unlikePost 실행중:::', result)\r\n\t\tyield put({\r\n\t\t\ttype: UNLIKE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // back, postId,userId 들어있음\r\n\t\t})\r\n\t\tconsole.log('UNLIKEPost 완료:::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('UNLIKEPost error::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: UNLIKE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction loadPostsAPI(lastId) { // 3 전달되면\r\n\t//return axios.get('/api/posts', data) // 4 데이터가 간다 front\r\n\t// 보통 get 방식은 데이터를 못 넣기때문에 쿼리스트링으로 넣어줘야한다 (주소), etc : limit=10&offset=10\r\n\t// 포스트 등은 데이터 캐싱이 안되지만, 겟은 데이터 캐싱을 같이 할 수 있다\r\n\t// lastId 가 undefined 인 경우 0\r\n\treturn axios.get(`/posts?lastId=${lastId || 0}`) // 4 데이터가 간다 ,\r\n}\r\n\r\nfunction* loadPosts(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconsole.log('Sagas::: loadPosts 실행중', action.lastId)\r\n\t\tconst result = yield call(loadPostsAPI, action.lastId) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('loadPosts 완료::: ', result)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_SUCCESS,\r\n\t\t\t// data: generateDummyPost(10), // data 10 개 front\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('saga loadPosts error: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POSTS_FAILURE,\r\n\t\t\terror: err.response.data,\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n\treturn axios.get(`/post/${data}`)\r\n}\r\n\r\nfunction* loadPost(action) {\r\n\ttry {\r\n\t\tconst result = yield call(loadPostAPI, action.data)\r\n\t\tconsole.log('saga loadPost 요청 ::: ', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POST_SUCCESS,\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('saga loadPost 성공 ::: ', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga loadPost 실패 ::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_POST_FAILURE,\r\n\t\t\terror: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\t//return axios.post('/api/post', data) // 4 데이터가 간다 front\r\n\t// data content 가 req.body.content 로 백엔드에 변환\r\n\t//return axios.post('/post', {content: data}) // 4 데이터가 간다,\r\n\t// form data 는 {content: data} 와 같이 감싸면 안된다, 바로 data 로 넣어줘야함\r\n\treturn axios.post('/post', data) // 4 데이터가 간다\r\n}\r\n\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\t//const id = shortId.generate() // front 의 더미 아디\r\n\t\tconsole.log('addPost 실행중:::', result)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\t/*data: { // front dummy\r\n\t\t\t\tid,\r\n\t\t\t\tcontent: action.data,\r\n\t\t\t}*/\r\n\t\t\tdata: result.data, // back, 실제로 게시글이 들어있음\r\n\t\t})\r\n\t\tconsole.log('addPost 완료:::', result)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t\t// data: id, // front dummy\r\n\t\t\tdata: result.data.id, // back\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('saga addPost error::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction removePostAPI(data) { // 3 전달되면\r\n\t//return axios.post('/api/post', data) // 4 데이터가 간다 front\r\n\treturn axios.delete(`/post/${data}`) // 4 데이터가 간다 back //delete 의 data 는 post.id (PostCard.js)에서 확인 가능\r\n}\r\n\r\nfunction* removePost(action) { // 1 액션에서\r\n\ttry { // 포스트 리듀서상태와 유저리듀서상태와 동시에 한방에 바꿀수 없기때문에 액션을 두번으로 바꿔준다,\r\n\t\tconst result = yield call(removePostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('removePost 실행::: ', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_SUCCESS,\r\n\t\t\tdata: result.data, // 어떤 게시물을 지웠는지 id 가있을것,\r\n\t\t})\r\n\t\tconsole.log('removePost 완료::: ', result)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_OF_ME,\r\n\t\t\t//data: action.data, front\r\n\t\t\tdata: action.data,  // action 이 들어왔을때 데이터\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('saga removePost error: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: REMOVE_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\t//주소는 백엔드와 프론트의 약속일뿐 정해진건없다\r\n\t//return axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다 // front\r\n\treturn axios.post(`/post/${data.postId}/comment`, data) // 4 데이터가 간다 // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\tconst result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서 //back\r\n\t\t//yield delay(1000) front\r\n\t\tconsole.log('addComment 실행중 :::', action.data)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\t//data: action.data // front\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('addComment 완료:::', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga addComment error::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n\treturn axios.get(`/user/${data}/posts?lastId=${lastId || 0}`)\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n\ttry {\r\n\t\tconst result = yield call(loadUserPostsAPI, action.data, action.lastId)\r\n\t\tconsole.log('saga loadUserPosts 실행 ::: ', action.data, action.lastId)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_USER_POSTS_SUCCESS,\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('saga loadPostsSuccess 성공::: ', result)\r\n\t} catch (err) {\r\n\t\tconsole.error('saga loadUserPosts error ::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_USER_POSTS_FAILURE,\r\n\t\t\terror: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) { // 인자를 두 개 넘겨줄수도 있다\r\n\treturn axios.get(`/hashtag/${data}?lastId=${lastId || 0}`)\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n\ttry {\r\n\t\tconsole.log(`loadHashtagPosts log :::`)\r\n\t\tconst result = yield call(loadHashtagPostsAPI, action.data, action.lastId)\r\n\t\tconsole.log('saga loadHashtagPosts 요청 ::: ', action.data, action.lastId)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_HASHTAG_POSTS_SUCCESS,\r\n\t\t\tdata: result.data,\r\n\t\t})\r\n\t\tconsole.log('saga loadHashtagPosts 성공 ::: ')\r\n\t} catch (err) {\r\n\t\tconsole.error('saga loadHashtagPosts error ::: ', err)\r\n\t\tyield put({\r\n\t\t\ttype: LOAD_HASHTAG_POSTS_FAILURE,\r\n\t\t\terror: err.response.data,\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n\tyield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts)\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n\tyield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n\tyield takeLatest(LOAD_POST_REQUEST, loadPost)\r\n}\r\n\r\nfunction* watchRetweet() {\r\n\tyield takeLatest(RETWEET_REQUEST, retweet)\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n\tyield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages)\r\n}\r\n\r\nfunction* watchLikePost() {\r\n\tyield takeLatest(LIKE_POST_REQUEST, likePost)\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n\tyield takeLatest(UNLIKE_POST_REQUEST, unlikePost)\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n\tyield throttle(5000, LOAD_POSTS_REQUEST, loadPosts)\r\n}\r\n\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n\tyield takeLatest(REMOVE_POST_REQUEST, removePost)\r\n}\r\n\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchLoadPost),\r\n\t\tfork(watchRetweet),\r\n\t\tfork(watchUploadImages),\r\n\t\tfork(watchLikePost),\r\n\t\tfork(watchUnlikePost),\r\n\t\tfork(watchLoadUserPosts),\r\n\t\tfork(watchLoadHashtagPosts),\r\n\t\tfork(watchLoadPosts),\r\n\t\tfork(watchAddPost),\r\n\t\tfork(watchRemovePost),\r\n\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}