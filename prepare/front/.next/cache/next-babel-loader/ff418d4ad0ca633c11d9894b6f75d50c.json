{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '비타민'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: ''\n    }, {\n      src: ''\n    }, {\n      src: ''\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '개정판이 나왔네요!?'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '정말정말 신기하당!'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 경로들이 저장됨\n  postAdded: false // 게시물 추가가 완료되었을때 true 변환\n\n}; //게시글 작성하는 액션\n\nvar ADD_POST = 'ADD_POST'; // 중간에 오타가나는 일을 막을 수 있다\n\nexport var addPost = {\n  type: ADD_POST\n};\nvar dummyPost = {\n  id: 2,\n  content: '더미데이터입니당',\n  User: {\n    id: 1,\n    nickname: 'vitamin'\n  },\n  Images: [],\n  Comments: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPost: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        // 불변성 지켜주며 앞에다가 추가해야 게시글 위에올라감\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","reducer","state","action","mainPost"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,uBANX;AAOEC,IAAAA,MAAM,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD,EAAc;AAAEA,MAAAA,GAAG,EAAE;AAAP,KAAd,EAA2B;AAAEA,MAAAA,GAAG,EAAE;AAAP,KAA3B,CAPV;AAQEC,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADQ,EAOR;AACEF,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KAPQ;AARZ,GADS,CADe;AA0B1BI,EAAAA,UAAU,EAAE,EA1Bc;AA0BV;AAChBC,EAAAA,SAAS,EAAE,KA3Be,CA2BR;;AA3BQ,CAArB,C,CA8BP;;AACA,IAAMC,QAAQ,GAAG,UAAjB,C,CAA6B;;AAC7B,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,IAAI,EAAEF;AADe,CAAhB;AAIP,IAAMG,SAAS,GAAG;AAChBZ,EAAAA,EAAE,EAAE,CADY;AAEhBG,EAAAA,OAAO,EAAE,UAFO;AAGhBF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHU;AAOhBE,EAAAA,MAAM,EAAE,EAPQ;AAQhBE,EAAAA,QAAQ,EAAE;AARM,CAAlB;;AAWA,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBhB,YAAyB;AAAA,MAAXiB,MAAW;;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKF,QAAL;AACE,6CACGK,KADH;AAEEE,QAAAA,QAAQ,GAAGJ,SAAH,4BAAiBE,KAAK,CAACf,SAAvB,EAFV;AAE6C;AAC3CS,QAAAA,SAAS,EAAE;AAHb;;AAKF;AACE,aAAOM,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: '비타민',\n      },\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\n      Images: [{ src: '' }, { src: '' }, { src: '' }],\n      Comments: [\n        {\n          User: {\n            nickname: 'nero',\n          },\n          content: '개정판이 나왔네요!?',\n        },\n        {\n          User: {\n            nickname: 'hero',\n          },\n          content: '정말정말 신기하당!',\n        },\n      ],\n    },\n  ],\n  imagePaths: [], // 이미지 경로들이 저장됨\n  postAdded: false, // 게시물 추가가 완료되었을때 true 변환\n}\n\n//게시글 작성하는 액션\nconst ADD_POST = 'ADD_POST'; // 중간에 오타가나는 일을 막을 수 있다\nexport const addPost = {\n  type: ADD_POST,\n}\n\nconst dummyPost = {\n  id: 2,\n  content: '더미데이터입니당',\n  User: {\n    id: 1,\n    nickname: 'vitamin',\n  },\n  Images: [],\n  Comments: [],\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return {\n      ...state,\n        mainPost: [dummyPost, ...state.mainPosts], // 불변성 지켜주며 앞에다가 추가해야 게시글 위에올라감\n        postAdded: true,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}