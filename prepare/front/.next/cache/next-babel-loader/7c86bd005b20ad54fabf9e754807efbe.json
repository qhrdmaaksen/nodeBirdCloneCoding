{"ast":null,"code":"//import { store } from 'next/dist/build/output/store'\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post'; // const initialState = {\n// \tuser: {},\n// \tpost: {},\n// }\n// 비동기 액션 생성기\n// 액션 생성기\n\n/*const changeNickname = (data) => {\r\n\treturn {\r\n\t\ttype: 'CHANGE_NICKNAME',\r\n\t\tdata,\r\n\t}\r\n}\r\nchangeNickname('vitamin777')*/\n\n/*{\r\n\t\ttype: 'CHANGE_NICKNAME',\r\n\t\tdata: 'vitamin777',\r\n}*/\n\n/*store.dispatch(changeNickname('vitamin7777777'))*/\n// 리듀서 : 이전상태와 액션을 통해 다음 상태를 만들어내는 함수\n\n/* CSR REDUCER\r\nconst rootReducer = combineReducers({\r\n\t// user 이니셜스테이트, post 이니셜스테이트 컴바인 리듀서가 알아서 한방에 묶어줌\r\n\tindex: (state = {}, action) => {\r\n\t\tswitch (action.type) {\r\n\t\t\tcase HYDRATE:\r\n\t\t\t\tconsole.log('HYDRATE', action)\r\n\t\t\t\treturn {...state, ...action.payload}\r\n\t\t\tdefault:\r\n\t\t\t\treturn state\r\n\t\t}\r\n\t},\r\n\tuser,\r\n\tpost,\r\n})*/\n// SSR\n\nvar rootReducer = function rootReducer(state, action) {\n  // (이전상태 state, 액션) => 다음상태\n  switch (action.type) {\n    case HYDRATE:\n      console.log('reducer rootReducer HYDRATE :: ', action);\n      return action.payload;\n\n    default:\n      {\n        var combinedReducer = combineReducers({\n          user: user,\n          post: post\n        });\n        return combinedReducer(state, action);\n      }\n  }\n};\n/*reducers/index.js 보시면 user랑 post를 불러와서 합치고 있습니다.\r\nrootReducer가 state고, user와 post는 각각 state.user, state.post가 됩니다.\r\nuser.js의 me는 state.user.me가 됩니다.*/\n\n\nexport default rootReducer;","map":null,"metadata":{},"sourceType":"module"}