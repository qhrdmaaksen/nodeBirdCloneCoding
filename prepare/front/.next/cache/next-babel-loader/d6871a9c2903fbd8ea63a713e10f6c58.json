{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\intellijProjects\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\profile.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Head from 'next/head';\nimport AppLayout from '../component/AppLayout';\nimport NicknameEditForm from '../component/NicknameEditForm';\nimport FollowList from '../component/FollowList';\nimport axios from 'axios';\nimport useSWR from 'swr';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Router from \"next/router\";\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST } from '../reducers/user';\n//import FollowerList from '../component/FollowerList'\n// fetcher 를 다른걸로 바꾸면 graphql 도 쓸수있다\nvar fetcher = url = axios.get(url, {\n  withCredentials: true\n}).then(function (result) {\n  return result.data;\n});\n\nvar Profile = function Profile() {\n  _s();\n\n  /* front\n  const dispatch = useDispatch();\n  const followingList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}] front early\n  const followerList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}]*/\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n  /*useEffect(() => {\n  \tdispatch({\n  \t\ttype: LOAD_FOLLOWERS_REQUEST,\n  \t});\n  \tdispatch({\n  \t\ttype: LOAD_FOLLOWINGS_REQUEST,\n  \t});\n  }, []);*/\n  //followers 불러오기\n  // data, error 가 둘다 있다면 성공했거나, 실패했거나, 둘다 없다면 로딩중\n\n\n  var _useSWR = useSWR(\"http://localhost:3065/user/followers\", fetcher),\n      followersData = _useSWR.data,\n      followerError = _useSWR.error; //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n  //followings 불러오기\n\n\n  var _useSWR2 = useSWR(\"http://localhost:3065/user/followings\", fetcher),\n      followingsData = _useSWR2.data,\n      followingError = _useSWR2.error; //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n\n\n  useEffect(function () {\n    if (!(me && me.id)) {\n      // 프로필 페이지에서 로그아웃했을 경우 main 화면으로\n      Router.push('/');\n    }\n  }, [me && me.id]);\n\n  if (!me) {\n    // 내가 없으면 못들어가게\n    return '내 정보 로딩중...';\n  }\n\n  if (followerError || followingError) {\n    console.error(followerError || followingError);\n    return '팔로잉/팔로워 로딩 중 에러가 발생했습니다.';\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 6\n    }\n  }, \"\\uB0B4 \\uD504\\uB85C\\uD544 | NodeBird\")), __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(NicknameEditForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 6\n    }\n  }), __jsx(FollowList, {\n    header: \"\\uD314\\uB85C\\uC719 \\uBAA9\\uB85D\",\n    data: followingsData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 6\n    }\n  }), __jsx(FollowList, {\n    header: \"\\uD314\\uB85C\\uC6CC \\uBAA9\\uB85D\",\n    data: followersData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 6\n    }\n  })));\n};\n\n_s(Profile, \"MV9/uwZNRopsSeKLiy69103t+ZI=\", false, function () {\n  return [useSelector, useSWR, useSWR];\n});\n\n_c = Profile;\nexport var __N_SSP = true;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/pages/profile.js"],"names":["React","useEffect","Head","AppLayout","NicknameEditForm","FollowList","axios","useSWR","useDispatch","useSelector","Router","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWINGS_REQUEST","fetcher","url","get","withCredentials","then","result","data","Profile","state","user","me","followersData","followerError","error","followingsData","followingError","id","push","console"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAAQC,sBAAR,EAAgCC,uBAAhC,QAAoF,kBAApF;AAEA;AAEA;AACA,IAAMC,OAAO,GAAIC,GAAD,GAAQR,KAAK,CAACS,GAAN,CAAUD,GAAV,EAAe;AAACE,EAAAA,eAAe,EAAE;AAAlB,CAAf,EAAwCC,IAAxC,CAA6C,UAACC,MAAD;AAAA,SAAYA,MAAM,CAACC,IAAnB;AAAA,CAA7C,CAAxB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AACrB;AACD;AACA;AACA;AACC,qBAAaX,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAxB;AAAA,MAAOC,EAAP,gBAAOA,EAAP;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AAEA;;;AACA,gBAAoDhB,MAAM,yCAAyCM,OAAzC,CAA1D;AAAA,MAAaW,aAAb,WAAOL,IAAP;AAAA,MAAmCM,aAAnC,WAA4BC,KAA5B,CAlBqB,CAkBuF;AAC5G;;;AACA,iBAAsDnB,MAAM,0CAA0CM,OAA1C,CAA5D;AAAA,MAAac,cAAb,YAAOR,IAAP;AAAA,MAAoCS,cAApC,YAA6BF,KAA7B,CApBqB,CAoB0F;;;AAE/GzB,EAAAA,SAAS,CAAC,YAAM;AACf,QAAI,EAAEsB,EAAE,IAAIA,EAAE,CAACM,EAAX,CAAJ,EAAoB;AAAE;AACrBnB,MAAAA,MAAM,CAACoB,IAAP,CAAY,GAAZ;AACA;AACD,GAJQ,EAIN,CAACP,EAAE,IAAIA,EAAE,CAACM,EAAV,CAJM,CAAT;;AAMA,MAAI,CAACN,EAAL,EAAS;AAAE;AACV,WAAO,aAAP;AACA;;AAED,MAAIE,aAAa,IAAIG,cAArB,EAAqC;AACpCG,IAAAA,OAAO,CAACL,KAAR,CAAcD,aAAa,IAAIG,cAA/B;AACA,WAAO,0BAAP;AACA;;AAED,SACE,4BACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADD,CADD,EAIC,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC,MAAC,UAAD;AAAY,IAAA,MAAM,EAAC,iCAAnB;AAA4B,IAAA,IAAI,EAAED,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAGC,MAAC,UAAD;AAAY,IAAA,MAAM,EAAC,iCAAnB;AAA4B,IAAA,IAAI,EAAEH,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CAJD,CADF;AAYA,CAjDD;;GAAMJ,O;UAKQX,W,EAauCF,M,EAEEA,M;;;KApBjDa,O;;AAmEN,eAAeA,OAAf","sourcesContent":["import React, {useEffect} from 'react'\nimport Head from 'next/head'\nimport AppLayout from '../component/AppLayout'\nimport NicknameEditForm from '../component/NicknameEditForm'\nimport FollowList from '../component/FollowList'\nimport axios from 'axios'\nimport {END} from 'redux-saga'\nimport useSWR from 'swr'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Router from \"next/router\";\nimport {LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, LOAD_MY_INFO_REQUEST} from '../reducers/user'\nimport wrapper from \"../store/configureStore\";\n//import FollowerList from '../component/FollowerList'\n\n// fetcher 를 다른걸로 바꾸면 graphql 도 쓸수있다\nconst fetcher = (url) = axios.get(url, {withCredentials: true}).then((result) => result.data)\n\nconst Profile = () => {\n\t/* front\n\tconst dispatch = useDispatch();\n\tconst followingList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}] front early\n\tconst followerList = [{nickname: '비타민'}, {nickname: '엠알민'}, {nickname: '올마스터'}]*/\n\tconst {me} = useSelector((state) => state.user)\n\n\t/*useEffect(() => {\n\t\tdispatch({\n\t\t\ttype: LOAD_FOLLOWERS_REQUEST,\n\t\t});\n\t\tdispatch({\n\t\t\ttype: LOAD_FOLLOWINGS_REQUEST,\n\t\t});\n\t}, []);*/\n\t//followers 불러오기\n\n\t// data, error 가 둘다 있다면 성공했거나, 실패했거나, 둘다 없다면 로딩중\n\tconst {data: followersData, error: followerError} = useSWR(`http://localhost:3065/user/followers`, fetcher) //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n\t//followings 불러오기\n\tconst {data: followingsData, error: followingError} = useSWR(`http://localhost:3065/user/followings`, fetcher) //fetcher 가 url 를 어떻게 가져올지에 대한걸적어줌\n\n\tuseEffect(() => {\n\t\tif (!(me && me.id)) { // 프로필 페이지에서 로그아웃했을 경우 main 화면으로\n\t\t\tRouter.push('/')\n\t\t}\n\t}, [me && me.id])\n\n\tif (!me) { // 내가 없으면 못들어가게\n\t\treturn '내 정보 로딩중...';\n\t}\n\n\tif (followerError || followingError) {\n\t\tconsole.error(followerError || followingError)\n\t\treturn '팔로잉/팔로워 로딩 중 에러가 발생했습니다.'\n\t}\n\n\treturn (\n\t\t\t<>\n\t\t\t\t<Head>\n\t\t\t\t\t<title>내 프로필 | NodeBird</title>\n\t\t\t\t</Head>\n\t\t\t\t<AppLayout>\n\t\t\t\t\t<NicknameEditForm/>\n\t\t\t\t\t<FollowList header=\"팔로윙 목록\" data={followingsData}/>\n\t\t\t\t\t<FollowList header=\"팔로워 목록\" data={followersData}/>\n\t\t\t\t</AppLayout>\n\t\t\t</>\n\t)\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n\tconsole.log('Profile getServerSideProps Start')\n\tconsole.log(context.req.headers)\n\tconst cookie = context.req ? context.req.headers.cookie : '';\n\taxios.defaults.headers.Cookie = '';\n\tif (context.req && cookie) {\n\t\taxios.defaults.headers.Cookie = cookie;\n\t}\n\tcontext.store.dispatch({\n\t\ttype: LOAD_MY_INFO_REQUEST,\n\t})\n\tcontext.store.dispatch(END)\n\tconsole.log('Profile getServerSideProps END')\n\tawait context.store.sagaTask.toPromise()\n})\n\nexport default Profile\n\n"]},"metadata":{},"sourceType":"module"}