{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  loadMyInfoLoading: false,\n  // 유저 정보 보기 시도중일땐 로딩중 띄울거임\n  loadMyInfoDone: false,\n  // 유저 정보 보기 됨\n  loadMyInfoError: null,\n  // 유저 정보 보기중일때 에러 없앰\n  followLoading: false,\n  // 팔로우 시도중일땐 로딩중 띄울거임\n  followDone: false,\n  // 팔로우 됨\n  followError: null,\n  // 팔로우중일때 에러 없앰\n  unfollowLoading: false,\n  // 언팔로우 시도중일땐 로딩중 띄울거임\n  unfollowDone: false,\n  // 언팔로우 됨\n  unfollowError: null,\n  // 팔로우중일때 에러 없앰\n  logInLoading: false,\n  // 로그인 시도중일땐 로딩중 띄울거임\n  logInDone: false,\n  // 로그인 됨\n  logInError: null,\n  // 로딩중일때 에러 없앰\n  logOutLoading: false,\n  // 로그아웃 시도중\n  logOutDone: false,\n  // 로그아웃 완료\n  logOutError: null,\n  signUpLoading: false,\n  // 회원가입 로딩중\n  signUpDone: false,\n  // 회원 가입 완료\n  signUpError: null,\n  changeNicknameLoading: false,\n  // 닉네임 변경 로딩중\n  changeNicknameDone: false,\n  // 닉네임 변경 완료\n  changeNicknameError: null,\n  me: null,\n  signUpData: {},\n  // 회원 가입 데이터\n  loginData: {}\n}; // 로그인 액션 생성기 thunk\n// export const loginAction = (data) => { // 함수를 리턴하는 비동기 액션 크리에이터가 추가\n// \treturn (dispatch, getState) => {\n// \t\tconst state = getState()\n// \t\tdispatch(loginRequestAction())\n// \t\taxios.post('/api/login')\n// \t\t\t\t.then((res) => {\n// \t\t\t\t\tdispatch(loginSuccessAction(res.data))\n// \t\t\t\t})\n// \t\t\t\t.catch((error) => {\n// \t\t\t\t\tdispatch(loginFailureAction(error))\n// \t\t\t\t})\n// \t}\n// }\n// actions\n\nexport const LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST';\nexport const LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS';\nexport const LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport const CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport const CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE';\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'; // 유저 리듀서의 상태를 바꿀수있는 액션 생성\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\n/* front\r\nconst dummyUser = (data) => ({\r\n\t...data,\r\n\tnickname: '비타민',\r\n\tid: 1,\r\n\tPosts: [{id: 1}],\r\n\tFollowings: [{nickname: '외노'}, {nickname: '음메'}, {nickname: '썽'}, {nickname: '오댕'}, {nickname: '만뽀'}],\r\n\tFollowers: [{nickname: '까매'}, {nickname: '만두'}, {nickname: '보챙'}, {nickname: '뒷가'}, {nickname: '야덩'}],\r\n})*/\n\nexport const loginRequestAction = data => {\n  return {\n    type: LOG_IN_REQUEST,\n    data\n  };\n}; // 로그아웃 액션 생성기 thunk\n// export const logoutAction = (data) => {\n// \treturn (dispatch) => {\n// \t\taxios.post('/api/logout')\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(logoutSuccessAction())\n// \t\t\t\t})\n// \t\t\t\t.catch(() => {\n// \t\t\t\t\tdispatch(logoutFailureAction())\n// \t\t\t\t})\n// \t}\n// }\n\nexport const logoutRequestAction = () => ({\n  type: LOG_OUT_REQUEST\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_MY_INFO_REQUEST:\n      // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n      draft.loadMyInfoLoading = true;\n      draft.loadMyInfoError = null; // 로딩 중일때는 에러 없앰\n\n      draft.loadMyInfoDone = false;\n      console.log('reducer myInfo 요청');\n      break;\n\n    case LOAD_MY_INFO_SUCCESS:\n      draft.loadMyInfoLoading = false;\n      draft.me = action.data; // back 사용자 정보가 들어있음\n\n      draft.loadMyInfoDone = true; //draft.me = dummyUser(action.data)\n\n      console.log('reducer myInfo 성공');\n      break;\n\n    case LOAD_MY_INFO_FAILURE:\n      console.error('loadMyInfoFail :: ' + action.error);\n      draft.loadMyInfoLoading = false;\n      draft.loadMyInfoError = action.error;\n      break;\n\n    case FOLLOW_REQUEST:\n      // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n      draft.followLoading = true;\n      draft.followError = null; // 로딩 중일때는 에러 없앰\n\n      draft.followDone = false;\n      console.log('reducer FOLLOW_REQUEST 요청');\n      break;\n\n    case FOLLOW_SUCCESS:\n      draft.followLoading = false;\n      draft.followDone = true; //draft.me = dummyUser(action.data)\n\n      draft.me.Followings.push({\n        id: action.data.UserId\n      });\n      console.log('reducer FOLLOW_SUCCESS 성공');\n      break;\n\n    case FOLLOW_FAILURE:\n      draft.followLoading = false;\n      draft.followError = action.error;\n      console.error('reducer FOLLOW_FAILURE 실패::', action.error);\n      break;\n\n    case UNFOLLOW_REQUEST:\n      // store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\n      draft.unfollowLoading = true;\n      draft.unfollowError = null; // 로딩 중일때는 에러 없앰\n\n      draft.unfollowDone = false;\n      console.log('reducer unfollow 요청');\n      break;\n\n    case UNFOLLOW_SUCCESS:\n      draft.unfollowLoading = false;\n      draft.unfollowDone = true; //draft.me = dummyUser(action.data)\n      // 언팔로우 한 사람만 빠지게\n\n      draft.me.Followings = draft.me.Followings.filter(v => v.id !== action.data);\n      console.log('reducer unfollow 성공');\n      break;\n\n    case UNFOLLOW_FAILURE:\n      draft.unfollowLoading = false;\n      draft.unfollowError = action.error;\n      console.error('reducer unfollow 실패::', action.error);\n      break;\n\n    case LOG_IN_REQUEST:\n      draft.logInLoading = true;\n      draft.logInError = null;\n      draft.logInDone = false;\n      console.log('reducer login 요청');\n      break;\n\n    case LOG_IN_SUCCESS:\n      draft.logInLoading = false;\n      draft.logInDone = true; //draft.me = dummyUser(action.data) front\n\n      draft.me = action.data; // back\n\n      console.log('reducer login 성공');\n      break;\n\n    case LOG_IN_FAILURE:\n      draft.logInLoading = false;\n      draft.logInError = action.error;\n      console.error('reducer login 실패:: ', action.error);\n      break;\n\n    case LOG_OUT_REQUEST:\n      draft.logOutLoading = true;\n      draft.logOutDone = false;\n      draft.logOutError = null;\n      console.log('reducer logout 요청');\n      break;\n\n    case LOG_OUT_SUCCESS:\n      draft.logOutLoading = false;\n      draft.logOutDone = true;\n      draft.me = null;\n      console.log('reducer logout 성공');\n      break;\n\n    case LOG_OUT_FAILURE:\n      draft.logOutLoading = false;\n      draft.logOutError = action.error;\n      console.error('reducer logout 실패', action.error);\n      break;\n\n    case SIGN_UP_REQUEST:\n      draft.signUpLoading = true;\n      draft.signUpDone = false;\n      draft.signUpError = null;\n      console.log('reducer signup 요청');\n      break;\n\n    case SIGN_UP_SUCCESS:\n      draft.signUpLoading = false;\n      draft.signUpDone = true;\n      console.log('reducer signUp 성공');\n      break;\n\n    case SIGN_UP_FAILURE:\n      draft.signUpLoading = false;\n      draft.signUpError = action.error;\n      console.error('reducer signUp 실패', action.error);\n      break;\n\n    case CHANGE_NICKNAME_REQUEST:\n      draft.changeNicknameLoading = true;\n      draft.changeNicknameDone = false;\n      draft.changeNicknameError = null;\n      console.log('reducer CHANGE_NICKNAME_REQUEST 요청');\n      break;\n\n    case CHANGE_NICKNAME_SUCCESS:\n      draft.changeNicknameLoading = false;\n      draft.changeNicknameDone = true;\n      console.log('reducer CHANGE_NICKNAME_SUCCESS 성공');\n      break;\n\n    case CHANGE_NICKNAME_FAILURE:\n      draft.changeNicknameLoading = false;\n      draft.changeNicknameError = action.error;\n      console.error('reducer CHANGE_NICKNAME 실패', action.error);\n      break;\n\n    case ADD_POST_TO_ME:\n      // 게시글을 쓰면 게시글 아이디가 여기로 들어와서 하나가 추가된다\n      draft.me.Posts.unshift({\n        id: action.data\n      });\n      console.log('ADD_POST_TO_ME 성공');\n      break;\n    // return {\n    // \t...state,\n    // \tme: {\n    // \t\t...state.me,\n    // \t\tPosts: [{id: action.data}, ...state.me.Posts],\n    // \t}\n    // }\n\n    case REMOVE_POST_OF_ME:\n      draft.me.Posts = draft.me.Posts.filter(v => v.id !== action.data);\n      console.log('REMOVE_POST_OF_ME');\n      break;\n    // return { // 불변성을 지키며 게시글을 지워야한다.\n    // \t...state,\n    // \tme: {\n    // \t\t...state.me,\n    // \t\tPosts: state.me.Posts.filter((v) => v.id !== action.data)\n    // \t}\n    // }\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/user.js"],"names":["produce","initialState","loadMyInfoLoading","loadMyInfoDone","loadMyInfoError","followLoading","followDone","followError","unfollowLoading","unfollowDone","unfollowError","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","changeNicknameLoading","changeNicknameDone","changeNicknameError","me","signUpData","loginData","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loginRequestAction","data","type","logoutRequestAction","reducer","state","action","draft","console","log","error","Followings","push","id","UserId","filter","v","Posts","unshift"],"mappings":"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","sourcesContent":["import produce from 'immer'\r\n\r\nexport const initialState = {\r\n\tloadMyInfoLoading: false, // 유저 정보 보기 시도중일땐 로딩중 띄울거임\r\n\tloadMyInfoDone: false, // 유저 정보 보기 됨\r\n\tloadMyInfoError: null, // 유저 정보 보기중일때 에러 없앰\r\n\tfollowLoading: false, // 팔로우 시도중일땐 로딩중 띄울거임\r\n\tfollowDone: false, // 팔로우 됨\r\n\tfollowError: null, // 팔로우중일때 에러 없앰\r\n\tunfollowLoading: false, // 언팔로우 시도중일땐 로딩중 띄울거임\r\n\tunfollowDone: false, // 언팔로우 됨\r\n\tunfollowError: null, // 팔로우중일때 에러 없앰\r\n\tlogInLoading: false, // 로그인 시도중일땐 로딩중 띄울거임\r\n\tlogInDone: false, // 로그인 됨\r\n\tlogInError: null, // 로딩중일때 에러 없앰\r\n\tlogOutLoading: false, // 로그아웃 시도중\r\n\tlogOutDone: false, // 로그아웃 완료\r\n\tlogOutError: null,\r\n\tsignUpLoading: false, // 회원가입 로딩중\r\n\tsignUpDone: false, // 회원 가입 완료\r\n\tsignUpError: null,\r\n\tchangeNicknameLoading: false, // 닉네임 변경 로딩중\r\n\tchangeNicknameDone: false, // 닉네임 변경 완료\r\n\tchangeNicknameError: null,\r\n\tme: null,\r\n\tsignUpData: {}, // 회원 가입 데이터\r\n\tloginData: {},\r\n}\r\n\r\n// 로그인 액션 생성기 thunk\r\n// export const loginAction = (data) => { // 함수를 리턴하는 비동기 액션 크리에이터가 추가\r\n// \treturn (dispatch, getState) => {\r\n// \t\tconst state = getState()\r\n// \t\tdispatch(loginRequestAction())\r\n// \t\taxios.post('/api/login')\r\n// \t\t\t\t.then((res) => {\r\n// \t\t\t\t\tdispatch(loginSuccessAction(res.data))\r\n// \t\t\t\t})\r\n// \t\t\t\t.catch((error) => {\r\n// \t\t\t\t\tdispatch(loginFailureAction(error))\r\n// \t\t\t\t})\r\n// \t}\r\n// }\r\n\r\n// actions\r\nexport const LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST'\r\nexport const LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS'\r\nexport const LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE'\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST'\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS'\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'\r\n\r\nexport const CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST'\r\nexport const CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS'\r\nexport const CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE'\r\n\r\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST'\r\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS'\r\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE'\r\n\r\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST'\r\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS'\r\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'\r\n\r\n// 유저 리듀서의 상태를 바꿀수있는 액션 생성\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME'\r\n\r\n/* front\r\nconst dummyUser = (data) => ({\r\n\t...data,\r\n\tnickname: '비타민',\r\n\tid: 1,\r\n\tPosts: [{id: 1}],\r\n\tFollowings: [{nickname: '외노'}, {nickname: '음메'}, {nickname: '썽'}, {nickname: '오댕'}, {nickname: '만뽀'}],\r\n\tFollowers: [{nickname: '까매'}, {nickname: '만두'}, {nickname: '보챙'}, {nickname: '뒷가'}, {nickname: '야덩'}],\r\n})*/\r\n\r\nexport const loginRequestAction = (data) => {\r\n\treturn {\r\n\t\ttype: LOG_IN_REQUEST,\r\n\t\tdata,\r\n\t}\r\n}\r\n// 로그아웃 액션 생성기 thunk\r\n// export const logoutAction = (data) => {\r\n// \treturn (dispatch) => {\r\n// \t\taxios.post('/api/logout')\r\n// \t\t\t\t.then(() => {\r\n// \t\t\t\t\tdispatch(logoutSuccessAction())\r\n// \t\t\t\t})\r\n// \t\t\t\t.catch(() => {\r\n// \t\t\t\t\tdispatch(logoutFailureAction())\r\n// \t\t\t\t})\r\n// \t}\r\n// }\r\nexport const logoutRequestAction = () => ({\r\n\ttype: LOG_OUT_REQUEST,\r\n})\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n\tswitch (action.type) {\r\n\t\tcase LOAD_MY_INFO_REQUEST:\r\n\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\r\n\t\t\tdraft.loadMyInfoLoading = true\r\n\t\t\tdraft.loadMyInfoError = null // 로딩 중일때는 에러 없앰\r\n\t\t\tdraft.loadMyInfoDone = false\r\n\t\t\tconsole.log('reducer myInfo 요청')\r\n\t\t\tbreak;\r\n\t\tcase LOAD_MY_INFO_SUCCESS:\r\n\t\t\tdraft.loadMyInfoLoading = false\r\n\t\t\tdraft.me = action.data // back 사용자 정보가 들어있음\r\n\t\t\tdraft.loadMyInfoDone = true\r\n\t\t\t//draft.me = dummyUser(action.data)\r\n\t\t\tconsole.log('reducer myInfo 성공')\r\n\t\t\tbreak;\r\n\t\tcase LOAD_MY_INFO_FAILURE:\r\n\t\t\tconsole.error('loadMyInfoFail :: ' + action.error)\r\n\t\t\tdraft.loadMyInfoLoading = false\r\n\t\t\tdraft.loadMyInfoError = action.error\r\n\t\t\tbreak;\r\n\t\tcase FOLLOW_REQUEST:\r\n\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\r\n\t\t\tdraft.followLoading = true\r\n\t\t\tdraft.followError = null // 로딩 중일때는 에러 없앰\r\n\t\t\tdraft.followDone = false\r\n\t\t\tconsole.log('reducer FOLLOW_REQUEST 요청')\r\n\t\t\tbreak;\r\n\t\tcase FOLLOW_SUCCESS:\r\n\t\t\tdraft.followLoading = false\r\n\t\t\tdraft.followDone = true\r\n\t\t\t//draft.me = dummyUser(action.data)\r\n\t\t\tdraft.me.Followings.push({id: action.data.UserId})\r\n\t\t\tconsole.log('reducer FOLLOW_SUCCESS 성공')\r\n\t\t\tbreak;\r\n\t\tcase FOLLOW_FAILURE:\r\n\t\t\tdraft.followLoading = false\r\n\t\t\tdraft.followError = action.error\r\n\t\t\tconsole.error('reducer FOLLOW_FAILURE 실패::', action.error)\r\n\t\t\tbreak;\r\n\t\tcase UNFOLLOW_REQUEST:\r\n\t\t\t// store 에서 보낸 state 가 만들어짐, state 자체가 user.js 의 state 임\r\n\t\t\tdraft.unfollowLoading = true\r\n\t\t\tdraft.unfollowError = null // 로딩 중일때는 에러 없앰\r\n\t\t\tdraft.unfollowDone = false\r\n\t\t\tconsole.log('reducer unfollow 요청')\r\n\t\t\tbreak;\r\n\t\tcase UNFOLLOW_SUCCESS:\r\n\t\t\tdraft.unfollowLoading = false\r\n\t\t\tdraft.unfollowDone = true\r\n\t\t\t//draft.me = dummyUser(action.data)\r\n\t\t\t// 언팔로우 한 사람만 빠지게\r\n\t\t\tdraft.me.Followings = draft.me.Followings.filter((v) => v.id !== action.data)\r\n\t\t\tconsole.log('reducer unfollow 성공')\r\n\t\t\tbreak;\r\n\t\tcase UNFOLLOW_FAILURE:\r\n\t\t\tdraft.unfollowLoading = false\r\n\t\t\tdraft.unfollowError = action.error\r\n\t\t\tconsole.error('reducer unfollow 실패::', action.error)\r\n\t\t\tbreak;\r\n\t\tcase LOG_IN_REQUEST:\r\n\t\t\tdraft.logInLoading = true\r\n\t\t\tdraft.logInError = null\r\n\t\t\tdraft.logInDone = false\r\n\t\t\tconsole.log('reducer login 요청')\r\n\t\t\tbreak;\r\n\t\tcase LOG_IN_SUCCESS:\r\n\t\t\tdraft.logInLoading = false\r\n\t\t\tdraft.logInDone = true\r\n\t\t\t//draft.me = dummyUser(action.data) front\r\n\t\t\tdraft.me = action.data // back\r\n\t\t\tconsole.log('reducer login 성공')\r\n\t\t\tbreak;\r\n\t\tcase LOG_IN_FAILURE:\r\n\t\t\tdraft.logInLoading = false\r\n\t\t\tdraft.logInError = action.error\r\n\t\t\tconsole.error('reducer login 실패:: ', action.error)\r\n\t\t\tbreak;\r\n\t\tcase LOG_OUT_REQUEST:\r\n\t\t\tdraft.logOutLoading = true\r\n\t\t\tdraft.logOutDone = false\r\n\t\t\tdraft.logOutError = null\r\n\t\t\tconsole.log('reducer logout 요청')\r\n\t\t\tbreak;\r\n\t\tcase LOG_OUT_SUCCESS:\r\n\t\t\tdraft.logOutLoading = false\r\n\t\t\tdraft.logOutDone = true\r\n\t\t\tdraft.me = null\r\n\t\t\tconsole.log('reducer logout 성공')\r\n\t\t\tbreak;\r\n\t\tcase LOG_OUT_FAILURE:\r\n\t\t\tdraft.logOutLoading = false\r\n\t\t\tdraft.logOutError = action.error\r\n\t\t\tconsole.error('reducer logout 실패', action.error)\r\n\t\t\tbreak\r\n\t\tcase SIGN_UP_REQUEST:\r\n\t\t\tdraft.signUpLoading = true\r\n\t\t\tdraft.signUpDone = false\r\n\t\t\tdraft.signUpError = null\r\n\t\t\tconsole.log('reducer signup 요청')\r\n\t\t\tbreak;\r\n\t\tcase SIGN_UP_SUCCESS:\r\n\t\t\tdraft.signUpLoading = false\r\n\t\t\tdraft.signUpDone = true\r\n\t\t\tconsole.log('reducer signUp 성공')\r\n\t\t\tbreak\r\n\t\tcase SIGN_UP_FAILURE:\r\n\t\t\tdraft.signUpLoading = false\r\n\t\t\tdraft.signUpError = action.error\r\n\t\t\tconsole.error('reducer signUp 실패', action.error)\r\n\t\t\tbreak\r\n\t\tcase CHANGE_NICKNAME_REQUEST:\r\n\t\t\tdraft.changeNicknameLoading = true\r\n\t\t\tdraft.changeNicknameDone = false\r\n\t\t\tdraft.changeNicknameError = null\r\n\t\t\tconsole.log('reducer CHANGE_NICKNAME_REQUEST 요청')\r\n\t\t\tbreak\r\n\t\tcase CHANGE_NICKNAME_SUCCESS:\r\n\t\t\tdraft.changeNicknameLoading = false\r\n\t\t\tdraft.changeNicknameDone = true\r\n\t\t\tconsole.log('reducer CHANGE_NICKNAME_SUCCESS 성공')\r\n\t\t\tbreak;\r\n\t\tcase CHANGE_NICKNAME_FAILURE:\r\n\t\t\tdraft.changeNicknameLoading = false\r\n\t\t\tdraft.changeNicknameError = action.error\r\n\t\t\tconsole.error('reducer CHANGE_NICKNAME 실패', action.error)\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_TO_ME: // 게시글을 쓰면 게시글 아이디가 여기로 들어와서 하나가 추가된다\r\n\t\t\tdraft.me.Posts.unshift({id: action.data})\r\n\t\t\tconsole.log('ADD_POST_TO_ME 성공')\r\n\t\t\tbreak\r\n\t\t\t// return {\r\n\t\t\t// \t...state,\r\n\t\t\t// \tme: {\r\n\t\t\t// \t\t...state.me,\r\n\t\t\t// \t\tPosts: [{id: action.data}, ...state.me.Posts],\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\tcase REMOVE_POST_OF_ME:\r\n\t\t\tdraft.me.Posts = draft.me.Posts.filter((v) => v.id !== action.data)\r\n\t\t\tconsole.log('REMOVE_POST_OF_ME')\r\n\t\t\tbreak;\r\n\t\t\t// return { // 불변성을 지키며 게시글을 지워야한다.\r\n\t\t\t// \t...state,\r\n\t\t\t// \tme: {\r\n\t\t\t// \t\t...state.me,\r\n\t\t\t// \t\tPosts: state.me.Posts.filter((v) => v.id !== action.data)\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n})\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}