{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [{\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: '비타민'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '개정판이 나왔네요!?'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '정말정말 신기하당!'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 경로들이 저장됨\n  addPostLoading: false,\n  // 게시물 등록중 로딩\n  addPostDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addPostError: null,\n  removePostLoading: false,\n  // 게시물 삭제중 로딩\n  removePostDone: false,\n  // 게시물 삭제가 완료되었을때 true 변환\n  removePostError: null,\n  addCommentLoading: false,\n  // 댓글 등록중 로딩\n  addCommentDone: false,\n  // 게시물 추가가 완료되었을때 true 변환\n  addCommentError: null\n}; // concat 을 할땐 항상 앞에 대입을 해줘야한다 그래야 합쳐짐\n\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph,\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}))); //게시글 작성하는 액션\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\n\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n}); // dynamic action create\n\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '비타민'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '비타민'\n  }\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  // immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.data;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data); // 지울땐 보통 filter 가 편하다\n\n      draft.PostLoading = false;\n      draft.PostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        //action.data.content, postId, userId\n        const post = draft.mainPosts.find(v => v.id === action.data.postId); // 게시글 리스트중에 post 찾기\n\n        post.Comments.unshift(dummyComment(action.data.content)); // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌\n\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","generate","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","name","findName","lorem","paragraph","image","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","filter","v","PostLoading","PostDone","error","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid'\r\nimport produce from 'immer'\r\nimport faker from 'faker'\r\n\r\nexport const initialState = {\r\n\tmainPosts: [\r\n\t\t{\r\n\t\t\tid: shortId.generate(),\r\n\t\t\tUser: {\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tnickname: '비타민',\r\n\t\t\t},\r\n\t\t\tcontent: '첫 번째 게시글 #해시태그 #익스프레스',\r\n\t\t\tImages: [{\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tsrc: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n\t\t\t}, {\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tsrc: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n\t\t\t}, {\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tsrc: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n\t\t\t}],\r\n\t\t\tComments: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\tUser: {\r\n\t\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\t\tnickname: 'nero',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcontent: '개정판이 나왔네요!?',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\tUser: {\r\n\t\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\t\tnickname: 'hero',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcontent: '정말정말 신기하당!',\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t],\r\n\timagePaths: [], // 이미지 경로들이 저장됨\r\n\taddPostLoading: false, // 게시물 등록중 로딩\r\n\taddPostDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddPostError: null,\r\n\tremovePostLoading: false, // 게시물 삭제중 로딩\r\n\tremovePostDone: false, // 게시물 삭제가 완료되었을때 true 변환\r\n\tremovePostError: null,\r\n\taddCommentLoading: false, // 댓글 등록중 로딩\r\n\taddCommentDone: false, // 게시물 추가가 완료되었을때 true 변환\r\n\taddCommentError: null,\r\n}\r\n// concat 을 할땐 항상 앞에 대입을 해줘야한다 그래야 합쳐짐\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n\t\tArray(20).fill().map(() => ({\r\n\t\t\tid: shortId.generate(),\r\n\t\t\tUser: {\r\n\t\t\t\tid: shortId.generate(),\r\n\t\t\t\tnickname: faker.name.findName(),\r\n\t\t\t},\r\n\t\t\tcontent: faker.lorem.paragraph,\r\n\t\t\tImages: [{\r\n\t\t\t\tsrc: faker.image.image(),\r\n\t\t\t}],\r\n\t\t\tComments: [{\r\n\t\t\t\tUser: {\r\n\t\t\t\t\tid: shortId.generate(),\r\n\t\t\t\t\tnickname: faker.name.findName(),\r\n\t\t\t\t},\r\n\t\t\t\tcontent: faker.lorem.sentence(),\r\n\t\t\t}],\r\n\t\t})),\r\n);\r\n\r\n//게시글 작성하는 액션\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'; // 변수로 따로 만들어줘야 중간에 오타가나는 일을 막을 수 있다\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n\ttype: ADD_POST_REQUEST,\r\n\tdata,\r\n})\r\n\r\n// dynamic action create\r\nexport const addComment = (data) => ({\r\n\ttype: ADD_COMMENT_REQUEST,\r\n\tdata,\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n\tid: data.id,\r\n\tcontent: data.content,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t},\r\n\tImages: [],\r\n\tComments: [],\r\n})\r\n\r\nconst dummyComment = (data) => ({\r\n\tid: shortId.generate(),\r\n\tcontent: data,\r\n\tUser: {\r\n\t\tid: 1,\r\n\t\tnickname: '비타민',\r\n\t}\r\n})\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n\t// immer 사용시 state 를 draft 로 교체해주며, switch 문인걸 인식하고 break 를 까먹지말자\r\n\tswitch (action.type) {\r\n\t\tcase ADD_POST_REQUEST:\r\n\t\t\tdraft.addPostLoading = true;\r\n\t\t\tdraft.addPostDone = false;\r\n\t\t\tdraft.addPostError = null;\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_SUCCESS:\r\n\t\t\tdraft.mainPosts.unshift(dummyPost(action.data))\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostDone = true\r\n\t\t\tbreak;\r\n\t\tcase ADD_POST_FAILURE:\r\n\t\t\tdraft.addPostLoading = false\r\n\t\t\tdraft.addPostError = action.data\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_REQUEST:\r\n\t\t\tdraft.removePostLoading = true\r\n\t\t\tdraft.removePostDone = false\r\n\t\t\tdraft.removePostError = null\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_SUCCESS:\r\n\t\t\tdraft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data) // 지울땐 보통 filter 가 편하다\r\n\t\t\tdraft.PostLoading = false\r\n\t\t\tdraft.PostDone = true\r\n\t\t\tbreak;\r\n\t\tcase REMOVE_POST_FAILURE:\r\n\t\t\tdraft.removePostLoading = false\r\n\t\t\tdraft.removePostError = action.error\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_REQUEST:\r\n\t\t\tdraft.addCommentLoading = true\r\n\t\t\tdraft.addCommentDone = false\r\n\t\t\tdraft.addCommentError = null\r\n\t\t\tbreak;\r\n\t\tcase ADD_COMMENT_SUCCESS: {\r\n\t\t\t//action.data.content, postId, userId\r\n\t\t\tconst post = draft.mainPosts.find((v) => v.id === action.data.postId) // 게시글 리스트중에 post 찾기\r\n\t\t\tpost.Comments.unshift(dummyComment(action.data.content)) // 찾은 post 에 맨 앞에 가짜 댓글 하나 넣어줌\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentDone = true\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase ADD_COMMENT_FAILURE:\r\n\t\t\tdraft.addCommentLoading = false\r\n\t\t\tdraft.addCommentError = action.error\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n})\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}