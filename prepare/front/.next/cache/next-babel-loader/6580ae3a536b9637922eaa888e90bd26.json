{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  // 3 전달되면\n  return axios.post('/api/post', data); // 4 데이터가 간다\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: action.data //data: result.data\n\n          });\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: ADD_POST_TO_ME\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('addPost : ' + _context.t0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  // 3 전달되면\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data); // 4 데이터가 간다\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data //data: result.data\n\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error('addComment : ' + _context2.t0);\n          _context2.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","all","delay","fork","put","takeLatest","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","addPostAPI","data","post","action","type","console","error","response","addCommentAPI","postId"],"mappings":";;oDAeUA,O;qDAuBAC,U;qDAiBAC,Y;qDAIAC,e;qDAIeC,Q;;AA/DzB,SAAQC,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACCC,mBADD,EAECC,mBAFD,EAGCC,mBAHD,EAICC,gBAJD,EAKCC,gBALD,EAMCC,gBAND,QAOO,kBAPP;AAQA,SAAQC,cAAR,QAA6B,kBAA7B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAE;AAC3B,SAAOT,KAAK,CAACU,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP,CADyB,CACY;AACrC;;AACD,SAAUnB,OAAV,CAAkBqB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAME,GAAG,CAAC;AACTc,YAAAA,IAAI,EAAEN,gBADG;AAETG,YAAAA,IAAI,EAAEE,MAAM,CAACF,IAFJ,CAGT;;AAHS,WAAD,CAAT;;AAJF;AAAA;AASE,iBAAMX,GAAG,CAAC;AACTc,YAAAA,IAAI,EAAEL;AADG,WAAD,CAAT;;AATF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaEM,UAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd;AAbF;AAcE,iBAAMhB,GAAG,CAAC;AACTc,YAAAA,IAAI,EAAER,gBADG;AAETU,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaN;AAFX,WAAD,CAAT;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAASO,aAAT,CAAuBP,IAAvB,EAA6B;AAAE;AAC9B,SAAOT,KAAK,CAACU,IAAN,qBAAwBD,IAAI,CAACQ,MAA7B,eAA+CR,IAA/C,CAAP,CAD4B,CACgC;AAC5D;;AACD,SAAUlB,UAAV,CAAqBoB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAME,GAAG,CAAC;AACTc,YAAAA,IAAI,EAAET,mBADG;AAETM,YAAAA,IAAI,EAAEE,MAAM,CAACF,IAFJ,CAGT;;AAHS,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUEI,UAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd;AAVF;AAWE,iBAAMhB,GAAG,CAAC;AACTc,YAAAA,IAAI,EAAEX,mBADG;AAETa,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaN;AAFX,WAAD,CAAT;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUjB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMO,UAAU,CAACM,gBAAD,EAAmBf,OAAnB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMM,UAAU,CAACG,mBAAD,EAAsBX,UAAtB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CACTE,IAAI,CAACL,YAAD,CADK,EAERK,IAAI,CAACJ,eAAD,CAFI,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tADD_COMMENT_FAILURE,\r\n\tADD_COMMENT_REQUEST,\r\n\tADD_COMMENT_SUCCESS,\r\n\tADD_POST_FAILURE,\r\n\tADD_POST_REQUEST,\r\n\tADD_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport {ADD_POST_TO_ME} from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) { // 3 전달되면\r\n\treturn axios.post('/api/post', data) // 4 데이터가 간다\r\n}\r\nfunction* addPost(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addPostAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_TO_ME,\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addPost : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_POST_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\nfunction addCommentAPI(data) { // 3 전달되면\r\n\treturn axios.post(`/api/post/${data.postId}/comment`, data) // 4 데이터가 간다\r\n}\r\nfunction* addComment(action) { // 1 액션에서\r\n\ttry {\r\n\t\t//const result = yield call(addCommentAPI, action.data) // 2 데이터를 꺼내서\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_SUCCESS,\r\n\t\t\tdata: action.data\r\n\t\t\t//data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tconsole.error('addComment : ' + err)\r\n\t\tyield put({\r\n\t\t\ttype: ADD_COMMENT_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\nfunction* watchAddPost() {\r\n\tyield takeLatest(ADD_POST_REQUEST, addPost)\r\n\r\n}\r\nfunction* watchAddComment() {\r\n\tyield takeLatest(ADD_COMMENT_REQUEST, addComment)\r\n}\r\n\r\nexport default function* postSaga() {\r\n\tyield all([\r\n\t\tfork(watchAddPost),\r\n\t\t\tfork(watchAddComment),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}