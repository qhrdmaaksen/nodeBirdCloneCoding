{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  // gererator 아님\n  return axios.post('/api/login', data); // 실제 서버에 로그인 요청을 보냄\n} // 테스트 코드\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\n// \t\tl.next();\n// \t\tl.next();\n/////////////////\n\n\nfunction* logIn(action) {\n  // login action request 가 action 에 전달\n  try {\n    // 요청 실패 대비\n    console.log('saga login');\n    yield delay(1000); //const result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data //data: result.data // (성공 결과 담김)\n\n    });\n  } catch (err) {\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: LOG_IN_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // 요청 실패 대비\n    yield delay(1000); //const result = yield call(logOutAPI) // 서버에서 받은 결과 값을 받음\n\n    yield put({\n      type: LOG_OUT_SUCCESS //data: result.data // (성공 결과 담김)\n\n    });\n  } catch (err) {\n    yield put({\n      // put 은 dispatch 라고 생각하자\n      type: LOG_OUT_FAILURE,\n      error: err.response.data // (실패 결과 담김)\n\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.signup('/api/signup');\n}\n\nfunction* singUp() {\n  try {\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS // data: result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 로그인 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchLogOut() {\n  // 로그아웃 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(LOG_OUT_REQUEST, logOut); //LOG_OUT_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nfunction* watchSignUp() {\n  // 회원가입 액션이 실행될때까지 기다리겠다는 뜻\n  yield takeLatest(SIGN_UP_REQUEST, signUp); // SIGN_UP_REQUEST 액션이 실행되면 logIn 함수 실행\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/intellijProjects/react-nodebird/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","signUpAPI","signup","singUp","watchLogIn","watchLogOut","watchSignUp","signUp","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACCC,cADD,EAECC,cAFD,EAGCC,cAHD,EAICC,eAJD,EAKCC,eALD,EAMCC,eAND,EAMkBC,eANlB,EAMmCC,eANnC,EAMoDC,eANpD,QAOO,kBAPP;;AAUA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAAE;AACzB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADuB,CACe;AACtC,C,CAED;AACA;AACA;AACA;AACA;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AAAE;AACzB,MAAI;AAAE;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX,CAFG,CAGH;;AACA,UAAME,GAAG,CAAC;AACTmB,MAAAA,IAAI,EAAEd,cADG;AAETQ,MAAAA,IAAI,EAAEG,MAAM,CAACH,IAFJ,CAGT;;AAHS,KAAD,CAAT;AAKA,GATD,CASE,OAAOO,GAAP,EAAY;AACb,UAAMpB,GAAG,CAAC;AAAE;AACXmB,MAAAA,IAAI,EAAEhB,cADG;AAETkB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT,IAFX,CAEgB;;AAFhB,KAAD,CAAT;AAIA;AACD;;AAED,SAASU,SAAT,GAAqB;AACpB,SAAOrB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACA;;AAED,UAAUU,MAAV,GAAmB;AAClB,MAAI;AAAE;AACL,UAAM1B,KAAK,CAAC,IAAD,CAAX,CADG,CAEH;;AACA,UAAME,GAAG,CAAC;AACTmB,MAAAA,IAAI,EAAEX,eADG,CAET;;AAFS,KAAD,CAAT;AAIA,GAPD,CAOE,OAAOY,GAAP,EAAY;AACb,UAAMpB,GAAG,CAAC;AAAE;AACXmB,MAAAA,IAAI,EAAEb,eADG;AAETe,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT,IAFX,CAEgB;;AAFhB,KAAD,CAAT;AAIA;AACD;;AAED,SAASY,SAAT,GAAqB;AACpB,SAAOvB,KAAK,CAACwB,MAAN,CAAa,aAAb,CAAP;AACA;;AAED,UAAUC,MAAV,GAAmB;AAClB,MAAI;AACH,UAAM7B,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACTmB,MAAAA,IAAI,EAAER,eADG,CAET;;AAFS,KAAD,CAAT;AAIA,GAND,CAME,OAAOS,GAAP,EAAY;AACb,UAAMpB,GAAG,CAAC;AACTmB,MAAAA,IAAI,EAAEV,eADG;AAETY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFX,KAAD,CAAT;AAIA;AACD;;AAED,UAAUe,UAAV,GAAuB;AAAE;AACxB,QAAM3B,UAAU,CAACG,cAAD,EAAiBW,KAAjB,CAAhB,CADsB,CACkB;AACxC;;AAED,UAAUc,WAAV,GAAwB;AAAE;AACzB,QAAM5B,UAAU,CAACM,eAAD,EAAkBiB,MAAlB,CAAhB,CADuB,CACmB;AAC1C;;AAED,UAAUM,WAAV,GAAwB;AAAE;AACzB,QAAM7B,UAAU,CAACS,eAAD,EAAkBqB,MAAlB,CAAhB,CADuB,CACmB;AAC1C;;AAED,eAAe,UAAUC,QAAV,GAAqB;AACnC,QAAMnC,GAAG,CAAC,CACTE,IAAI,CAAC6B,UAAD,CADK,EAET7B,IAAI,CAAC8B,WAAD,CAFK,EAGT9B,IAAI,CAAC+B,WAAD,CAHK,CAAD,CAAT;AAKA","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tLOG_IN_FAILURE,\r\n\tLOG_IN_REQUEST,\r\n\tLOG_IN_SUCCESS,\r\n\tLOG_OUT_FAILURE,\r\n\tLOG_OUT_REQUEST,\r\n\tLOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS,\r\n} from \"../reducers/user\";\r\n\r\n\r\nfunction logInAPI(data) { // gererator 아님\r\n\treturn axios.post('/api/login', data) // 실제 서버에 로그인 요청을 보냄\r\n}\r\n\r\n// 테스트 코드\r\n// const l = logIn({type: 'LOG_IN_REQUEST', data: {id: 'rlaalsdn8@naver.com'}})\r\n// \t\tl.next();\r\n// \t\tl.next();\r\n/////////////////\r\nfunction* logIn(action) { // login action request 가 action 에 전달\r\n\ttry { // 요청 실패 대비\r\n\t\tconsole.log('saga login')\r\n\t\tyield delay(1000)\r\n\t\t//const result = yield call(logInAPI, action.data) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS,\r\n\t\t\tdata: action.data,\r\n\t\t\t//data: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: LOG_IN_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction logOutAPI() {\r\n\treturn axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n\ttry { // 요청 실패 대비\r\n\t\tyield delay(1000)\r\n\t\t//const result = yield call(logOutAPI) // 서버에서 받은 결과 값을 받음\r\n\t\tyield put({\r\n\t\t\ttype: LOG_OUT_SUCCESS,\r\n\t\t\t//data: result.data // (성공 결과 담김)\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({ // put 은 dispatch 라고 생각하자\r\n\t\t\ttype: LOG_OUT_FAILURE,\r\n\t\t\terror: err.response.data // (실패 결과 담김)\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction signUpAPI() {\r\n\treturn axios.signup('/api/signup')\r\n}\r\n\r\nfunction* singUp() {\r\n\ttry {\r\n\t\tyield delay(1000)\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_SUCCESS,\r\n\t\t\t// data: result.data\r\n\t\t})\r\n\t} catch (err) {\r\n\t\tyield put({\r\n\t\t\ttype: SIGN_UP_FAILURE,\r\n\t\t\terror: err.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\t// 로그인 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(LOG_IN_REQUEST, logIn) //LOG_IN_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchLogOut() {\t// 로그아웃 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(LOG_OUT_REQUEST, logOut) //LOG_OUT_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nfunction* watchSignUp() {\t// 회원가입 액션이 실행될때까지 기다리겠다는 뜻\r\n\tyield takeLatest(SIGN_UP_REQUEST, signUp) // SIGN_UP_REQUEST 액션이 실행되면 logIn 함수 실행\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchLogOut),\r\n\t\tfork(watchSignUp),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}