{"version":3,"sources":["webpack://_N_E/./components/PostForm.js","webpack://_N_E/./pages/index.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["PostForm","useSelector","state","post","imagePaths","addPostDone","dispatch","useDispatch","useInput","text","onChangeText","setText","useEffect","onSubmit","useCallback","trim","alert","formData","FormData","forEach","p","append","type","ADD_POST_REQUEST","data","imageInput","useRef","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","UPLOAD_IMAGES_REQUEST","onRemoveImage","index","REMOVE_IMAGE","style","margin","encType","onFinish","TextArea","value","onChange","maxLength","placeholder","name","multiple","hidden","ref","onClick","float","htmlType","map","v","i","key","display","src","width","alt","Home","me","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","LOAD_POSTS_REQUEST","addEventListener","removeEventListener","AppLayout","PostCard","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/index-89723f23a84bc5cb33ff.js","sourcesContent":["import {Form, Input, Button} from 'antd'\r\nimport React, {useCallback, useEffect, useRef, useState} from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST} from '../reducers/post'\r\nimport useInput from \"../hooks/useInput\";\r\n\r\nconst PostForm = () => {\r\n\tconst {imagePaths, addPostDone} = useSelector((state) => state.post)\r\n\tconst dispatch = useDispatch()\r\n\tconst [text, onChangeText, setText] = useInput('')\r\n\r\n\tuseEffect(() => {\r\n\t\tif (addPostDone) {\r\n\t\t\tsetText('')\r\n\t\t}\r\n\t}, [addPostDone])\r\n\r\n\tconst onSubmit = useCallback(() => {\r\n\t\tif (!text || !text.trim()) { // 게시글이 없다면 게시글 작성 alert\r\n\t\t\treturn alert('게시글을 작성하세요.')\r\n\t\t}\r\n\t\tconst formData = new FormData();\r\n\t\timagePaths.forEach((p)=>{\r\n\t\t\tformData.append('image', p) // req.body.content\r\n\t\t})\r\n\t\tformData.append('content', text)\r\n\t\treturn dispatch({\r\n\t\t\ttype: ADD_POST_REQUEST,\r\n\t\t\tdata: formData,\r\n\t\t})\r\n\t}, [text, imagePaths])\r\n\r\n\tconst imageInput = useRef()\r\n\tconst onClickImageUpload = useCallback(() => {\r\n\t\timageInput.current.click();\r\n\t}, [imageInput.current])\r\n\r\n\tconst onChangeImages = useCallback(\r\n\t\t\t(e) => {\r\n\t\t\t\tconsole.log('images info :: ', e.target.files) // 이미지에 대한 정보가 담겨있음\r\n\t\t\t\tconst imageFormData = new FormData(); // form data 를 multipart 형식으로 서버로 보냄\r\n\t\t\t\t[].forEach.call(e.target.files, (f) => { // 배열에 forEach 를 빌려 쓰는 것\r\n\t\t\t\t\timageFormData.append('image', f) // image 키랑 f 값\r\n\t\t\t\t})\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPLOAD_IMAGES_REQUEST,\r\n\t\t\t\t\tdata: imageFormData,\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t[],\r\n\t);\r\n\r\n\tconst onRemoveImage = useCallback((index)=>()=>{\r\n\t\tdispatch({\r\n\t\t\ttype: REMOVE_IMAGE,\r\n\t\t\tdata: index,\r\n\t\t})\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t\t// post Form\r\n\t\t\t<Form style={{margin: '10px 0 20px'}} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n\t\t\t\t<Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\"/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type=\"file\" name=\"image\" multiple hidden ref={imageInput}\r\n\t\t\t\t\t\t\t\t onChange={onChangeImages}/>\r\n\t\t\t\t\t<Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n\t\t\t\t\t<Button type=\"primary\" style={{float: 'right'}} htmlType=\"submit\">\r\n\t\t\t\t\t\t짹짹\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{imagePaths.map((v, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t// 이미지 등록을 했을 시, 이미지 경로가 저장되며, 반복문으로 표시해줌\r\n\t\t\t\t\t\t\t\t<div key={v} style={{display: 'inline-block'}}>\r\n\t\t\t\t\t\t\t\t\t<img src={`http://localhost:3065/${v}`} style={{width: '200px'}} alt={v}/>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={onRemoveImage(i)}>제거</Button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</Form>\r\n\t)\r\n}\r\n\r\nexport default PostForm\r\n","import React, {useEffect} from 'react' // Next 에서는 이 구문이 필요가 없다.\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {END} from 'redux-saga'\r\nimport axios from 'axios'\r\nimport AppLayout from '../components/AppLayout'\r\nimport PostForm from '../components/PostForm'\r\nimport PostCard from \"../components/PostCard\";\r\nimport {LOAD_POSTS_REQUEST} from '../reducers/post'\r\nimport {LOAD_MY_INFO_REQUEST} from '../reducers/user'\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst Home = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst {me} = useSelector((state) => state.user)\r\n\tconst {mainPosts, hasMorePosts, loadPostsLoading, retweetError} = useSelector((state) => state.post)\r\n\r\n\r\n\tuseEffect(() => { // retweet 실패 시 alert 출력\r\n\t\tif (retweetError) {\r\n\t\t\talert(retweetError)\r\n\t\t}\r\n\t}, [retweetError])\r\n\r\n\t/* CSR\r\n\tuseEffect(() => { // 컴포넌트 디드마운트와 같은 효과 가능 , 뒤에 빈배열만 넣는다면\r\n\t\tdispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n\t\t\ttype: LOAD_MY_INFO_REQUEST,\r\n\t\t});\r\n\t\tdispatch({\r\n\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t});\r\n\t}, []);*/\r\n\r\n\t// 스크롤이 끝까지 내려갔을때 다시 로딩하게하는코드\r\n\t/*유즈 이펙트에서 윈도우 addEventListener 를 사용할땐 항상 리턴을 해줘야한다.\r\n\t\t\t스크롤했던거 해제해줘야한다, 안그러면 메모리에 쌓여있는다.*/\r\n\tuseEffect(() => {\r\n\t\tfunction onScroll() {\r\n\t\t\t// (높이를 나타내는것중)scrollY,clientHeight,scrollHeight 를 많이사용\r\n\t\t\tconsole.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n\t\t\tif (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n\t\t\t\tif (hasMorePosts && !loadPostsLoading) { // 기존에 로딩을 하고있을땐 이부분이 실행이안됨, 로딩이 끝나면 실행\r\n\t\t\t\t\tconst lastId = mainPosts[mainPosts.length - 1]?.id; // 마지막 게시글의 id\r\n\t\t\t\t\tdispatch({ // 다 내리면 그때 새로운 것 로딩\r\n\t\t\t\t\t\ttype: LOAD_POSTS_REQUEST,\r\n\t\t\t\t\t\tlastId,\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('scroll', onScroll)\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('scroll', onScroll)\r\n\t\t};\r\n\t}, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n\treturn (\r\n\t\t\t<AppLayout>\r\n\t\t\t\t{/*AppLayout 을 사용한다, 만약 다른 레이아웃을 사용하고싶다면 따로 components 에 만들어서 이와같이 감싸면된다.*/}\r\n\t\t\t\t{/*뭔가 묶일 수 있는 단위가있을 것 같으면 먼저 컴포넌트 이름을 정해주자*/}\r\n\t\t\t\t{me && <PostForm/>} {/*모두 참 인경우 마지막 피 연산자를 반환*/}\r\n\t\t\t\t{mainPosts.map((post) => (\r\n\t\t\t\t\t\t<PostCard key={post.id} post={post}/>\r\n\t\t\t\t))}\r\n\t\t\t\t{/*이와같이 AppLayout 으로 감싼 이부분은 AppLayout 의 children 이된다.*/}\r\n\t\t\t</AppLayout>\r\n\t)\r\n}\r\n\r\n\r\n//  Home 보다 먼저 실행이 된다 ( browser 가 아닌 front server 쪽에서 실행) (SSR)\r\n// context 는 요청/응답과 SSR에 관련된 정보가 들어있는 객체이고요\r\n/*(브라우저) 쿠키 프론트서버로 전달 ->  (프론트서버) 전달받은 쿠키 저장해서\r\n백엔드 서버로 요청 -> 백엔드서버 쿠키에 따른 데이터 응답 -> 프론트서버\r\n데이터와 컴포넌트 조합 -> 브라우저*/\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n\t// server 쪽에서 실행되면 context.req 가 존재함, 서버쪽 쿠키 전달\r\n\t/*getServerSideProps는 프론트 서버에서 실행되는 코드입니다. 사용자들은 많은 수의 브라우저로 접근하지만\r\n\t프론트 서버는 하나이므로 axios.defaults.headers.Cookie=쿠키 로 쿠키를 설정하게 되면 프론트 서버에\r\n\t이 쿠키가 설정되어 버립니다. 모든 브라우저가 프론트 서버를 거쳐 백엔드\r\n\t서버로 요청을 보낼 때 같은 쿠키가 적용되어버리는 것입니다.\t그래서 한 번 설정했다가 요청을 보낸 다음에는\r\n\taxios.defaults.headers.Cookie = ''로 비워주는 것입니다.*/\r\n\tconst cookie = context.req ? context.req.headers.cookie : '';\r\n\taxios.defaults.headers.Cookie = ''; // 쿠키를 사용하지 않고 요청을 보낼때는 비워줌\r\n\t// cookie 공유 문제를 해결 장치\r\n\tif (context.req && cookie) { // 서버일때와 cookie 가 있을때\r\n\t\taxios.defaults.headers.Cookie = cookie; // 쿠키를 써서 요청을 보낼땐 쿠키를 넣어줌\r\n\t}\r\n\tcontext.store.dispatch({ // 매번 로그인 상태를 복구해주기 위해서 만듬\r\n\t\ttype: LOAD_MY_INFO_REQUEST,\r\n\t});\r\n\tcontext.store.dispatch({\r\n\t\ttype: LOAD_POSTS_REQUEST,\r\n\t});\r\n\t// request 가 success 로 바뀌기까지 기다려주기 위한 장치\r\n\tcontext.store.dispatch(END)\r\n\tawait context.store.sagaTask.toPromise()\r\n\tconsole.log('context :: ', context)\r\n})\r\n\r\nexport default Home\r\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}